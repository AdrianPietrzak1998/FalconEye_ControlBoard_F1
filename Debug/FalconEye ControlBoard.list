
FalconEye ControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015824  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08015a10  08015a10  00025a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080162c4  080162c4  000309e0  2**0
                  CONTENTS
  4 .ARM          00000000  080162c4  080162c4  000309e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080162c4  080162c4  000309e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080162c4  080162c4  000262c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080162c8  080162c8  000262c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e0  20000000  080162cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030ac  200009e0  08016cac  000309e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20003a8c  08016cac  00033a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247ad  00000000  00000000  00030a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dcb  00000000  00000000  000551b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec8  00000000  00000000  0005af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c48  00000000  00000000  0005ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021965  00000000  00000000  0005ea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000295a0  00000000  00000000  000803fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9710  00000000  00000000  000a999d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001530ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f4c  00000000  00000000  00153100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200009e0 	.word	0x200009e0
 8000204:	00000000 	.word	0x00000000
 8000208:	080159f4 	.word	0x080159f4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200009e4 	.word	0x200009e4
 8000224:	080159f4 	.word	0x080159f4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <set_baudrate+0x50>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <set_baudrate+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = baudrate;
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <set_baudrate+0x50>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6053      	str	r3, [r2, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <set_baudrate+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <set_baudrate+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <set_baudrate+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <set_baudrate+0x50>)
 8001044:	220c      	movs	r2, #12
 8001046:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <set_baudrate+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <set_baudrate+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <set_baudrate+0x50>)
 8001056:	f00c feb7 	bl	800ddc8 <HAL_HalfDuplex_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <set_baudrate+0x48>
	  {
	    Error_Handler();
 8001060:	f003 f9d8 	bl	8004414 <Error_Handler>
	  }
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20002858 	.word	0x20002858
 8001070:	40004800 	.word	0x40004800

08001074 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 800107a:	23f0      	movs	r3, #240	; 0xf0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8001082:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001086:	f7ff ffc9 	bl	800101c <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, 100);
 800108a:	1df9      	adds	r1, r7, #7
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <wire_reset+0x4c>)
 8001092:	f00c fef1 	bl	800de78 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, 100);
 8001096:	1db9      	adds	r1, r7, #6
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	2201      	movs	r2, #1
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <wire_reset+0x4c>)
 800109e:	f00c ff6e 	bl	800df7e <HAL_UART_Receive>
	set_baudrate(115200);
 80010a2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80010a6:	f7ff ffb9 	bl	800101c <set_baudrate>

	if (data_in != 0xF0)
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	2bf0      	cmp	r3, #240	; 0xf0
 80010ae:	d001      	beq.n	80010b4 <wire_reset+0x40>
		return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <wire_reset+0x42>
	else
		return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20002858 	.word	0x20002858

080010c4 <read_bit>:

static int read_bit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xff;
 80010ca:	23ff      	movs	r3, #255	; 0xff
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0x0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71bb      	strb	r3, [r7, #6]
	data_in = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71bb      	strb	r3, [r7, #6]
	if(USARTn -> SR & (1<<5))
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <read_bit+0x4c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <read_bit+0x22>
	{
		USARTn -> DR;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <read_bit+0x4c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
	}
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 80010e6:	1df9      	adds	r1, r7, #7
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	2201      	movs	r2, #1
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <read_bit+0x50>)
 80010f0:	f00c fec2 	bl	800de78 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 80010f4:	1db9      	adds	r1, r7, #6
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2201      	movs	r2, #1
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <read_bit+0x50>)
 80010fe:	f00c ff3e 	bl	800df7e <HAL_UART_Receive>

	return data_in & 0x01;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	f003 0301 	and.w	r3, r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40004800 	.word	0x40004800
 8001114:	20002858 	.word	0x20002858

08001118 <wire_read>:

uint8_t wire_read(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	e00e      	b.n	8001146 <wire_read+0x2e>
  {
    value >>= 1;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800112e:	f7ff ffc9 	bl	80010c4 <read_bit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <wire_read+0x28>
      value |= 0x80;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	dded      	ble.n	8001128 <wire_read+0x10>
  }
  return value;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <write_bit>:

static void write_bit(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (value)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00a      	beq.n	800117c <write_bit+0x24>
  {
    uint8_t data_out = 0xff;
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 800116a:	f107 010f 	add.w	r1, r7, #15
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	2201      	movs	r2, #1
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <write_bit+0x40>)
 8001176:	f00c fe7f 	bl	800de78 <HAL_UART_Transmit>
  else
  {
    uint8_t data_out = 0x0;
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800117a:	e009      	b.n	8001190 <write_bit+0x38>
    uint8_t data_out = 0x0;
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8001180:	f107 010e 	add.w	r1, r7, #14
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <write_bit+0x40>)
 800118c:	f00c fe74 	bl	800de78 <HAL_UART_Transmit>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20002858 	.word	0x20002858

0800119c <wire_write>:

void wire_write(uint8_t byte)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e00b      	b.n	80011c4 <wire_write+0x28>
    write_bit(byte & 0x01);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffd0 	bl	8001158 <write_bit>
    byte >>= 1;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	085b      	lsrs	r3, r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	ddf0      	ble.n	80011ac <wire_write+0x10>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e016      	b.n	8001218 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4053      	eors	r3, r2
 80011f0:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <byte_crc+0x38>
      crc ^= 0x8c;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001208:	43db      	mvns	r3, r3
 800120a:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	085b      	lsrs	r3, r3, #1
 8001210:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b07      	cmp	r3, #7
 800121c:	dde5      	ble.n	80011ea <byte_crc+0x16>
  }
  return crc;
 800121e:	79fb      	ldrb	r3, [r7, #7]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e00d      	b.n	800125a <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffc2 	bl	80011d4 <byte_crc>
 8001250:	4603      	mov	r3, r0
 8001252:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbed      	blt.n	800123e <wire_crc+0x14>

    return crc;
 8001262:	7afb      	ldrb	r3, [r7, #11]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <EepromInit>:
extern TIM_HandleTypeDef htim4;

uint32_t OldTickReadEeprom;

void EepromInit(m24cxx_t *dev)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	m24cxxFullReadWoDma(dev, EepromMirror.EepromBufferMirror);
 8001274:	490e      	ldr	r1, [pc, #56]	; (80012b0 <EepromInit+0x44>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fdf2 	bl	8001e60 <m24cxxFullReadWoDma>
	for(uint16_t i = 0; i<dev->memsize; i++ )
 800127c:	2300      	movs	r3, #0
 800127e:	81fb      	strh	r3, [r7, #14]
 8001280:	e00b      	b.n	800129a <EepromInit+0x2e>
	{
		EepromMirror.EpromBuffer[i] = EepromMirror.EepromBufferMirror[i];
 8001282:	89fa      	ldrh	r2, [r7, #14]
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	490a      	ldr	r1, [pc, #40]	; (80012b0 <EepromInit+0x44>)
 8001288:	5c89      	ldrb	r1, [r1, r2]
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <EepromInit+0x44>)
 800128c:	4413      	add	r3, r2
 800128e:	460a      	mov	r2, r1
 8001290:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	for(uint16_t i = 0; i<dev->memsize; i++ )
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	3301      	adds	r3, #1
 8001298:	81fb      	strh	r3, [r7, #14]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	891b      	ldrh	r3, [r3, #8]
 800129e:	89fa      	ldrh	r2, [r7, #14]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3ee      	bcc.n	8001282 <EepromInit+0x16>
	}
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200009fc 	.word	0x200009fc

080012b4 <EepromRecovery>:

void EepromRecovery(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	GPIOE -> ODR = EepromMirror.EepromGpioOut;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <EepromRecovery+0x8c>)
 80012ba:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <EepromRecovery+0x90>)
 80012c0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, EepromMirror.EepromPwm1);
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <EepromRecovery+0x8c>)
 80012c4:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <EepromRecovery+0x94>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, EepromMirror.EepromPwm2);
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <EepromRecovery+0x8c>)
 80012d0:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <EepromRecovery+0x94>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, EepromMirror.EepromPwm3);
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <EepromRecovery+0x8c>)
 80012dc:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <EepromRecovery+0x94>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, EepromMirror.EepromPwm4);
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <EepromRecovery+0x8c>)
 80012e8:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <EepromRecovery+0x94>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
	Logo.Mode = EepromMirror.EepromLogoMode;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <EepromRecovery+0x8c>)
 80012f4:	f993 210a 	ldrsb.w	r2, [r3, #266]	; 0x10a
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <EepromRecovery+0x98>)
 80012fa:	701a      	strb	r2, [r3, #0]
	Logo.PwmMax = EepromMirror.EepromLogoPwmMax;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <EepromRecovery+0x8c>)
 80012fe:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <EepromRecovery+0x98>)
 8001304:	805a      	strh	r2, [r3, #2]
	Logo.DimmerSpeed = EepromMirror.EepromLogoDimmingSpeed;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <EepromRecovery+0x8c>)
 8001308:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <EepromRecovery+0x98>)
 800130e:	821a      	strh	r2, [r3, #16]
	Light.Mode = EepromMirror.EepromLightMode;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <EepromRecovery+0x8c>)
 8001312:	f993 2110 	ldrsb.w	r2, [r3, #272]	; 0x110
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <EepromRecovery+0x9c>)
 8001318:	701a      	strb	r2, [r3, #0]
	Light.PwmMax = EepromMirror.EepromLightPwmMax;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <EepromRecovery+0x8c>)
 800131c:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <EepromRecovery+0x9c>)
 8001322:	805a      	strh	r2, [r3, #2]
	Light.DimmerSpeed = EepromMirror.EepromLightDimmingSpeed;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <EepromRecovery+0x8c>)
 8001326:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <EepromRecovery+0x9c>)
 800132c:	821a      	strh	r2, [r3, #16]
	htim4.Init.Prescaler = EepromMirror.EepromPwmFreqPrescaler;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <EepromRecovery+0x8c>)
 8001330:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <EepromRecovery+0x94>)
 8001336:	6053      	str	r3, [r2, #4]

}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200009fc 	.word	0x200009fc
 8001344:	40011800 	.word	0x40011800
 8001348:	20002738 	.word	0x20002738
 800134c:	20001e60 	.word	0x20001e60
 8001350:	20001e74 	.word	0x20001e74

08001354 <EepromVarAssig>:

static void EepromVarAssig(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	EepromMirror.EepromGpioOut = GPIOE -> ODR;
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <EepromVarAssig+0x9c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <EepromVarAssig+0xa0>)
 8001360:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	EepromMirror.EepromPwm1 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <EepromVarAssig+0xa4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <EepromVarAssig+0xa0>)
 800136e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	EepromMirror.EepromPwm2 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_2);
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <EepromVarAssig+0xa4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <EepromVarAssig+0xa0>)
 800137c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	EepromMirror.EepromPwm3 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_3);
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <EepromVarAssig+0xa4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <EepromVarAssig+0xa0>)
 800138a:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	EepromMirror.EepromPwm4 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <EepromVarAssig+0xa4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <EepromVarAssig+0xa0>)
 8001398:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	EepromMirror.EepromLogoMode = Logo.Mode;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <EepromVarAssig+0xa8>)
 800139e:	f993 2000 	ldrsb.w	r2, [r3]
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <EepromVarAssig+0xa0>)
 80013a4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	EepromMirror.EepromLogoPwmMax = Logo.PwmMax;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <EepromVarAssig+0xa8>)
 80013aa:	885a      	ldrh	r2, [r3, #2]
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <EepromVarAssig+0xa0>)
 80013ae:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	EepromMirror.EepromLogoDimmingSpeed = Logo.DimmerSpeed;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <EepromVarAssig+0xa8>)
 80013b4:	8a1a      	ldrh	r2, [r3, #16]
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <EepromVarAssig+0xa0>)
 80013b8:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
	EepromMirror.EepromLightMode = Light.Mode;
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <EepromVarAssig+0xac>)
 80013be:	f993 2000 	ldrsb.w	r2, [r3]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <EepromVarAssig+0xa0>)
 80013c4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	EepromMirror.EepromLightPwmMax = Light.PwmMax;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <EepromVarAssig+0xac>)
 80013ca:	885a      	ldrh	r2, [r3, #2]
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <EepromVarAssig+0xa0>)
 80013ce:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
	EepromMirror.EepromLightDimmingSpeed = Light.DimmerSpeed;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <EepromVarAssig+0xac>)
 80013d4:	8a1a      	ldrh	r2, [r3, #16]
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <EepromVarAssig+0xa0>)
 80013d8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	EepromMirror.EepromPwmFreqPrescaler = htim4.Init.Prescaler;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <EepromVarAssig+0xa4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <EepromVarAssig+0xa0>)
 80013e2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40011800 	.word	0x40011800
 80013f4:	200009fc 	.word	0x200009fc
 80013f8:	20002738 	.word	0x20002738
 80013fc:	20001e60 	.word	0x20001e60
 8001400:	20001e74 	.word	0x20001e74

08001404 <EepromBackup>:

void EepromBackup(m24cxx_t *dev)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - dev->OldTickWriteEeprom > M24_WRITE_TIME)
 800140c:	f004 feee 	bl	80061ec <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b14      	cmp	r3, #20
 800141a:	d92c      	bls.n	8001476 <EepromBackup+0x72>
	{
		EepromVarAssig();
 800141c:	f7ff ff9a 	bl	8001354 <EepromVarAssig>

		for(uint16_t i = 0; i<dev->memsize; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	81fb      	strh	r3, [r7, #14]
 8001424:	e022      	b.n	800146c <EepromBackup+0x68>
		{
			if(EepromMirror.EepromBufferMirror[i] != EepromMirror.EpromBuffer[i])
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	4a15      	ldr	r2, [pc, #84]	; (8001480 <EepromBackup+0x7c>)
 800142a:	5cd2      	ldrb	r2, [r2, r3]
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	4914      	ldr	r1, [pc, #80]	; (8001480 <EepromBackup+0x7c>)
 8001430:	440b      	add	r3, r1
 8001432:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001436:	429a      	cmp	r2, r3
 8001438:	d015      	beq.n	8001466 <EepromBackup+0x62>
			{
				m24cxxWrite8Bit(dev, i, &EepromMirror.EpromBuffer[i]);
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	b2d9      	uxtb	r1, r3
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <EepromBackup+0x7c>)
 8001446:	4413      	add	r3, r2
 8001448:	461a      	mov	r2, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fc8a 	bl	8001d64 <m24cxxWrite8Bit>
//				EepromMirror.EepromBufferMirror[i] = EepromMirror.EpromBuffer[i];
				m24cxxRead8Bit(dev, i, &EepromMirror.EepromBufferMirror[i]);
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	b2d9      	uxtb	r1, r3
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <EepromBackup+0x7c>)
 8001458:	4413      	add	r3, r2
 800145a:	461a      	mov	r2, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fc49 	bl	8001cf4 <m24cxxRead8Bit>
				break;
 8001462:	bf00      	nop
			}
		}
	}
}
 8001464:	e007      	b.n	8001476 <EepromBackup+0x72>
		for(uint16_t i = 0; i<dev->memsize; i++)
 8001466:	89fb      	ldrh	r3, [r7, #14]
 8001468:	3301      	adds	r3, #1
 800146a:	81fb      	strh	r3, [r7, #14]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	891b      	ldrh	r3, [r3, #8]
 8001470:	89fa      	ldrh	r2, [r7, #14]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3d7      	bcc.n	8001426 <EepromBackup+0x22>
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200009fc 	.word	0x200009fc

08001484 <EepromRefresh>:

void EepromRefresh(m24cxx_t *dev)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	m24cxxFullRead(dev, EepromMirror.EepromBufferMirror);
 800148c:	4903      	ldr	r1, [pc, #12]	; (800149c <EepromRefresh+0x18>)
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fcb0 	bl	8001df4 <m24cxxFullRead>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200009fc 	.word	0x200009fc

080014a0 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	font = font_t;
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <GFX_SetFont+0x18>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000bfc 	.word	0x20000bfc

080014bc <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <GFX_SetFontSize+0x16>
		size = size_t;
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <GFX_SetFontSize+0x20>)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	7013      	strb	r3, [r2, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000000 	.word	0x20000000

080014e0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	4613      	mov	r3, r2
 80014f4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b7e      	cmp	r3, #126	; 0x7e
 80014fa:	f200 80a3 	bhi.w	8001644 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	e096      	b.n	8001632 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8001504:	4b51      	ldr	r3, [pc, #324]	; (800164c <GFX_DrawChar+0x16c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	3b20      	subs	r3, #32
 800150c:	494f      	ldr	r1, [pc, #316]	; (800164c <GFX_DrawChar+0x16c>)
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	3101      	adds	r1, #1
 8001512:	7809      	ldrb	r1, [r1, #0]
 8001514:	fb03 f101 	mul.w	r1, r3, r1
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	440b      	add	r3, r1
 800151c:	3302      	adds	r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001524:	2300      	movs	r3, #0
 8001526:	757b      	strb	r3, [r7, #21]
 8001528:	e078      	b.n	800161c <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d032      	beq.n	800159a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <GFX_DrawChar+0x170>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d113      	bne.n	8001564 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	b29a      	uxth	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	b218      	sxth	r0, r3
 800154a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800154e:	b29a      	uxth	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	b21b      	sxth	r3, r3
 800155a:	79ba      	ldrb	r2, [r7, #6]
 800155c:	4619      	mov	r1, r3
 800155e:	f003 ff67 	bl	8005430 <SSD1306_DrawPixel>
 8001562:	e052      	b.n	800160a <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <GFX_DrawChar+0x170>)
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	fb03 f202 	mul.w	r2, r3, r2
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	18d0      	adds	r0, r2, r3
 8001572:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001576:	4a36      	ldr	r2, [pc, #216]	; (8001650 <GFX_DrawChar+0x170>)
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	fb03 f202 	mul.w	r2, r3, r2
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	18d1      	adds	r1, r2, r3
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <GFX_DrawChar+0x170>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <GFX_DrawChar+0x170>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b29c      	uxth	r4, r3
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	f000 f9a3 	bl	80018de <GFX_DrawFillRectangle>
 8001598:	e037      	b.n	800160a <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800159a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d133      	bne.n	800160a <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <GFX_DrawChar+0x170>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d114      	bne.n	80015d4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b218      	sxth	r0, r3
 80015b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015cc:	4619      	mov	r1, r3
 80015ce:	f003 ff2f 	bl	8005430 <SSD1306_DrawPixel>
 80015d2:	e01a      	b.n	800160a <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <GFX_DrawChar+0x170>)
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	fb03 f202 	mul.w	r2, r3, r2
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	18d0      	adds	r0, r2, r3
 80015e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015e6:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <GFX_DrawChar+0x170>)
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	fb03 f202 	mul.w	r2, r3, r2
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	18d1      	adds	r1, r2, r3
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <GFX_DrawChar+0x170>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <GFX_DrawChar+0x170>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b29c      	uxth	r4, r3
 80015fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4623      	mov	r3, r4
 8001606:	f000 f96a 	bl	80018de <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800160a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	757b      	strb	r3, [r7, #21]
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	75bb      	strb	r3, [r7, #22]
 800161c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <GFX_DrawChar+0x16c>)
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4293      	cmp	r3, r2
 8001628:	f6ff af7f 	blt.w	800152a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	3301      	adds	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <GFX_DrawChar+0x16c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	7dfa      	ldrb	r2, [r7, #23]
 800163c:	429a      	cmp	r2, r3
 800163e:	f4ff af61 	bcc.w	8001504 <GFX_DrawChar+0x24>
 8001642:	e000      	b.n	8001646 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001644:	bf00      	nop
            }
        }
    }
}
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	20000bfc 	.word	0x20000bfc
 8001650:	20000000 	.word	0x20000000

08001654 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800166c:	e03e      	b.n	80016ec <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800166e:	78f9      	ldrb	r1, [r7, #3]
 8001670:	7cfa      	ldrb	r2, [r7, #19]
 8001672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	460b      	mov	r3, r1
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ff2f 	bl	80014e0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <GFX_DrawString+0xb0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <GFX_DrawString+0xb4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	3301      	adds	r3, #1
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4413      	add	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800169c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d120      	bne.n	80016e6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	74bb      	strb	r3, [r7, #18]
 80016a8:	e012      	b.n	80016d0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b218      	sxth	r0, r3
 80016b4:	7cbb      	ldrb	r3, [r7, #18]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4413      	add	r3, r2
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	f003 feb3 	bl	8005430 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80016ca:	7cbb      	ldrb	r3, [r7, #18]
 80016cc:	3301      	adds	r3, #1
 80016ce:	74bb      	strb	r3, [r7, #18]
 80016d0:	7cba      	ldrb	r2, [r7, #18]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <GFX_DrawString+0xb0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <GFX_DrawString+0xb4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbe1      	blt.n	80016aa <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ba      	bne.n	800166e <GFX_DrawString+0x1a>
	}
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000bfc 	.word	0x20000bfc
 8001708:	20000000 	.word	0x20000000

0800170c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001724:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1acb      	subs	r3, r1, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	bfb8      	it	lt
 8001732:	425b      	neglt	r3, r3
 8001734:	429a      	cmp	r2, r3
 8001736:	bfcc      	ite	gt
 8001738:	2301      	movgt	r3, #1
 800173a:	2300      	movle	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001740:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dd0b      	ble.n	8001780 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	b29b      	uxth	r3, r3
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	bfb8      	it	lt
 8001798:	425b      	neglt	r3, r3
 800179a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800179c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a0:	0fda      	lsrs	r2, r3, #31
 80017a2:	4413      	add	r3, r2
 80017a4:	105b      	asrs	r3, r3, #1
 80017a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	da02      	bge.n	80017b6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80017b4:	e030      	b.n	8001818 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80017b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80017bc:	e02c      	b.n	8001818 <GFX_WriteLine+0x10c>
	        if (steep) {
 80017be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	b211      	sxth	r1, r2
 80017ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fe2c 	bl	8005430 <SSD1306_DrawPixel>
 80017d8:	e008      	b.n	80017ec <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	b211      	sxth	r1, r2
 80017e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fe22 	bl	8005430 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80017ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80017ee:	8abb      	ldrh	r3, [r7, #20]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80017f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da09      	bge.n	8001812 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80017fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4413      	add	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001808:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800180a:	8afb      	ldrh	r3, [r7, #22]
 800180c:	4413      	add	r3, r2
 800180e:	b29b      	uxth	r3, r3
 8001810:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	ddce      	ble.n	80017be <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af02      	add	r7, sp, #8
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	1e5a      	subs	r2, r3, #1
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff ff5e 	bl	800170c <GFX_WriteLine>
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff ff48 	bl	800170c <GFX_WriteLine>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	460b      	mov	r3, r1
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4613      	mov	r3, r2
 8001898:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	7e3b      	ldrb	r3, [r7, #24]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff ffd9 	bl	8001858 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 80018a6:	88ba      	ldrh	r2, [r7, #4]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4413      	add	r3, r2
 80018ac:	1e59      	subs	r1, r3, #1
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	7e3b      	ldrb	r3, [r7, #24]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff ffd0 	bl	8001858 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 80018b8:	88ba      	ldrh	r2, [r7, #4]
 80018ba:	7e3b      	ldrb	r3, [r7, #24]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff ffb3 	bl	800182a <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 80018c4:	88fa      	ldrh	r2, [r7, #6]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	1e58      	subs	r0, r3, #1
 80018cc:	88ba      	ldrh	r2, [r7, #4]
 80018ce:	7e3b      	ldrb	r3, [r7, #24]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	f7ff ffaa 	bl	800182a <GFX_DrawFastVLine>

}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	4611      	mov	r1, r2
 80018ea:	461a      	mov	r2, r3
 80018ec:	460b      	mov	r3, r1
 80018ee:	80fb      	strh	r3, [r7, #6]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e009      	b.n	800190e <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80018fa:	88ba      	ldrh	r2, [r7, #4]
 80018fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff91 	bl	800182a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbef      	blt.n	80018fa <GFX_DrawFillRectangle+0x1c>
    }

}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <GFX_DrawCircle>:
#endif
#if USING_CIRCLE == 1
void GFX_DrawCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	460b      	mov	r3, r1
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	4613      	mov	r3, r2
 8001938:	717b      	strb	r3, [r7, #5]
    int16_t f = 1 - r;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	f1c3 0301 	rsb	r3, r3, #1
 8001940:	b29b      	uxth	r3, r3
 8001942:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	461a      	mov	r2, r3
 800194c:	03d2      	lsls	r2, r2, #15
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	82fb      	strh	r3, [r7, #22]

    GFX_DrawPixel(x0  , y0+r, color);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	b218      	sxth	r0, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	b29a      	uxth	r2, r3
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4413      	add	r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	797a      	ldrb	r2, [r7, #5]
 8001970:	4619      	mov	r1, r3
 8001972:	f003 fd5d 	bl	8005430 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0  , y0-r, color);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	b218      	sxth	r0, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	b29a      	uxth	r2, r3
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	b21b      	sxth	r3, r3
 8001986:	797a      	ldrb	r2, [r7, #5]
 8001988:	4619      	mov	r1, r3
 800198a:	f003 fd51 	bl	8005430 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0+r, y0  , color);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	b29a      	uxth	r2, r3
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	b21b      	sxth	r3, r3
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	b211      	sxth	r1, r2
 800199e:	797a      	ldrb	r2, [r7, #5]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fd45 	bl	8005430 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0-r, y0  , color);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	b211      	sxth	r1, r2
 80019b6:	797a      	ldrb	r2, [r7, #5]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fd39 	bl	8005430 <SSD1306_DrawPixel>

    while (x<y) {
 80019be:	e0a1      	b.n	8001b04 <GFX_DrawCircle+0x1e0>
        if (f >= 0) {
 80019c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0e      	blt.n	80019e6 <GFX_DrawCircle+0xc2>
            y--;
 80019c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80019d4:	8b7b      	ldrh	r3, [r7, #26]
 80019d6:	3302      	adds	r3, #2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 80019dc:	8bfa      	ldrh	r2, [r7, #30]
 80019de:	8b7b      	ldrh	r3, [r7, #26]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80019e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80019f2:	8bbb      	ldrh	r3, [r7, #28]
 80019f4:	3302      	adds	r3, #2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 80019fa:	8bfa      	ldrh	r2, [r7, #30]
 80019fc:	8bbb      	ldrh	r3, [r7, #28]
 80019fe:	4413      	add	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	83fb      	strh	r3, [r7, #30]

        GFX_DrawPixel(x0 + x, y0 + y, color);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	8b3b      	ldrh	r3, [r7, #24]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b218      	sxth	r0, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	8afb      	ldrh	r3, [r7, #22]
 8001a16:	4413      	add	r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	797a      	ldrb	r2, [r7, #5]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f003 fd06 	bl	8005430 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 + y, color);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	8b3b      	ldrh	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b218      	sxth	r0, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	797a      	ldrb	r2, [r7, #5]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f003 fcf6 	bl	8005430 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + x, y0 - y, color);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	8b3b      	ldrh	r3, [r7, #24]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b218      	sxth	r0, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	8afb      	ldrh	r3, [r7, #22]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	797a      	ldrb	r2, [r7, #5]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f003 fce6 	bl	8005430 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 - y, color);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	8b3b      	ldrh	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b218      	sxth	r0, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	8afb      	ldrh	r3, [r7, #22]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	797a      	ldrb	r2, [r7, #5]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f003 fcd6 	bl	8005430 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 + x, color);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	8afb      	ldrh	r3, [r7, #22]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b218      	sxth	r0, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	8b3b      	ldrh	r3, [r7, #24]
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	797a      	ldrb	r2, [r7, #5]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f003 fcc6 	bl	8005430 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 + x, color);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	8afb      	ldrh	r3, [r7, #22]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b218      	sxth	r0, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	8b3b      	ldrh	r3, [r7, #24]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	797a      	ldrb	r2, [r7, #5]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f003 fcb6 	bl	8005430 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 - x, color);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	4413      	add	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b218      	sxth	r0, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	8b3b      	ldrh	r3, [r7, #24]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	797a      	ldrb	r2, [r7, #5]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f003 fca6 	bl	8005430 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 - x, color);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	8afb      	ldrh	r3, [r7, #22]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	b218      	sxth	r0, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	8b3b      	ldrh	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	797a      	ldrb	r2, [r7, #5]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f003 fc96 	bl	8005430 <SSD1306_DrawPixel>
    while (x<y) {
 8001b04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f6ff af57 	blt.w	80019c0 <GFX_DrawCircle+0x9c>
    }

}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	80fb      	strh	r3, [r7, #6]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f1c3 0301 	rsb	r3, r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	461a      	mov	r2, r3
 8001b44:	03d2      	lsls	r2, r2, #15
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001b56:	e077      	b.n	8001c48 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8001b58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0e      	blt.n	8001b7e <GFX_DrawFillCircleHelper+0x62>
            y--;
 8001b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001b6c:	8b7b      	ldrh	r3, [r7, #26]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001b74:	8bfa      	ldrh	r2, [r7, #30]
 8001b76:	8b7b      	ldrh	r3, [r7, #26]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001b7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001b8a:	8bbb      	ldrh	r3, [r7, #28]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001b92:	8bfa      	ldrh	r2, [r7, #30]
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001b9c:	797b      	ldrb	r3, [r7, #5]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d025      	beq.n	8001bf2 <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001ba6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	18d0      	adds	r0, r2, r3
 8001bae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	1ad1      	subs	r1, r2, r3
 8001bb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001bc2:	441a      	add	r2, r3
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc8:	f7ff fe2f 	bl	800182a <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	18d0      	adds	r0, r2, r3
 8001bd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	1ad1      	subs	r1, r2, r3
 8001bdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001be8:	441a      	add	r2, r3
 8001bea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bee:	f7ff fe1c 	bl	800182a <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001bf2:	797b      	ldrb	r3, [r7, #5]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d025      	beq.n	8001c48 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001bfc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	1ad0      	subs	r0, r2, r3
 8001c04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	1ad1      	subs	r1, r2, r3
 8001c0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c18:	441a      	add	r2, r3
 8001c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c1e:	f7ff fe04 	bl	800182a <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001c22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	1ad0      	subs	r0, r2, r3
 8001c2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	1ad1      	subs	r1, r2, r3
 8001c32:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c3e:	441a      	add	r2, r3
 8001c40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c44:	f7ff fdf1 	bl	800182a <GFX_DrawFastVLine>
    while (x<y) {
 8001c48:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	db81      	blt.n	8001b58 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <GFX_DrawFillCircle>:
#endif
#if USING_FILL_CIRCLE == 1
void GFX_DrawFillCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	80fb      	strh	r3, [r7, #6]
 8001c70:	4613      	mov	r3, r2
 8001c72:	717b      	strb	r3, [r7, #5]

	GFX_DrawFastVLine(x0, y0-r, 2*r+1, color);
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	1ad1      	subs	r1, r2, r3
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	797b      	ldrb	r3, [r7, #5]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff fdd1 	bl	800182a <GFX_DrawFastVLine>
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	797b      	ldrb	r3, [r7, #5]
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2303      	movs	r3, #3
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff ff40 	bl	8001b1c <GFX_DrawFillCircleHelper>
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <m24cxxInit>:
#include "M24Cxx.h"



void m24cxxInit(m24cxx_t *m24, I2C_HandleTypeDef *i2c, uint8_t addr, uint16_t memsize, GPIO_TypeDef *WcPort, uint16_t WcPin)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80bb      	strh	r3, [r7, #4]
	m24 -> addr    = addr<<1;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	701a      	strb	r2, [r3, #0]
	m24 -> i2c     = i2c;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	605a      	str	r2, [r3, #4]
	m24 -> memsize = memsize;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	88ba      	ldrh	r2, [r7, #4]
 8001cce:	811a      	strh	r2, [r3, #8]
	m24 -> WcPort  = WcPort;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	60da      	str	r2, [r3, #12]
	m24 -> WcPin   = WcPin;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8bba      	ldrh	r2, [r7, #28]
 8001cda:	821a      	strh	r2, [r3, #16]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	68d8      	ldr	r0, [r3, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8a1b      	ldrh	r3, [r3, #16]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f005 fe59 	bl	800799e <HAL_GPIO_WritePin>
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <m24cxxRead8Bit>:

uint8_t m24cxxRead8Bit(m24cxx_t *m24, uint8_t DataAddr, uint8_t *Data)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	72fb      	strb	r3, [r7, #11]
	int32_t i = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001d06:	e002      	b.n	8001d0e <m24cxxRead8Bit+0x1a>
	{
		i++;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d003      	beq.n	8001d26 <m24cxxRead8Bit+0x32>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <m24cxxRead8Bit+0x6c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	ddf0      	ble.n	8001d08 <m24cxxRead8Bit+0x14>
	}
	if((m24->i2c)->hdmarx->State == HAL_DMA_STATE_READY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10f      	bne.n	8001d56 <m24cxxRead8Bit+0x62>
	{
	HAL_I2C_Mem_Read_DMA(m24 ->i2c, m24 -> addr, DataAddr, 1, Data, 1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6858      	ldr	r0, [r3, #4]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f006 fc4f 	bl	80085f0 <HAL_I2C_Mem_Read_DMA>
	return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <m24cxxRead8Bit+0x64>
	}
	else
	{
		return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
	}
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	00030d40 	.word	0x00030d40

08001d64 <m24cxxWrite8Bit>:
{
	HAL_I2C_Mem_Read(m24 ->i2c, m24 -> addr, DataAddr, 1, Data, 1, 500);
}

uint8_t m24cxxWrite8Bit(m24cxx_t *m24, uint8_t DataAddr, uint8_t *Data)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, RESET);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	68d8      	ldr	r0, [r3, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8a1b      	ldrh	r3, [r3, #16]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f005 fe0e 	bl	800799e <HAL_GPIO_WritePin>
	m24 -> WcIsZero = 1;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	749a      	strb	r2, [r3, #18]
	int32_t i = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmatx->State != HAL_DMA_STATE_READY && i<=200000)
 8001d8c:	e002      	b.n	8001d94 <m24cxxWrite8Bit+0x30>
	{
		i++;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmatx->State != HAL_DMA_STATE_READY && i<=200000)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d003      	beq.n	8001dac <m24cxxWrite8Bit+0x48>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <m24cxxWrite8Bit+0x8c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	ddf0      	ble.n	8001d8e <m24cxxWrite8Bit+0x2a>
	}
	if((m24->i2c)->hdmatx->State == HAL_DMA_STATE_READY)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d114      	bne.n	8001de6 <m24cxxWrite8Bit+0x82>
	{
	HAL_I2C_Mem_Write_DMA(m24 -> i2c, m24 -> addr, DataAddr, 1, Data, 1);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6858      	ldr	r0, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	2301      	movs	r3, #1
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f006 fab6 	bl	8008344 <HAL_I2C_Mem_Write_DMA>
	m24 -> OldTickWriteEeprom = HAL_GetTick();
 8001dd8:	f004 fa08 	bl	80061ec <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	615a      	str	r2, [r3, #20]
	return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <m24cxxWrite8Bit+0x84>
	}
	else
	{
		return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
	}
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	00030d40 	.word	0x00030d40

08001df4 <m24cxxFullRead>:
		return HAL_ERROR;
	}
}

uint8_t m24cxxFullRead(m24cxx_t *m24, uint8_t *Data)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	int32_t i = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001e02:	e002      	b.n	8001e0a <m24cxxFullRead+0x16>
	{
		i++;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d003      	beq.n	8001e22 <m24cxxFullRead+0x2e>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <m24cxxFullRead+0x68>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	ddf0      	ble.n	8001e04 <m24cxxFullRead+0x10>
	}
	if((m24->i2c)->hdmarx->State == HAL_DMA_STATE_READY)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10f      	bne.n	8001e52 <m24cxxFullRead+0x5e>
	{
	HAL_I2C_Mem_Read_DMA(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6858      	ldr	r0, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	891b      	ldrh	r3, [r3, #8]
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f006 fbd1 	bl	80085f0 <HAL_I2C_Mem_Read_DMA>
	return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <m24cxxFullRead+0x60>
	}
	else
	{
		return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
	}
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	00030d40 	.word	0x00030d40

08001e60 <m24cxxFullReadWoDma>:

void m24cxxFullReadWoDma(m24cxx_t *m24, uint8_t *Data)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af04      	add	r7, sp, #16
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize, 1000);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6858      	ldr	r0, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b299      	uxth	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	891b      	ldrh	r3, [r3, #8]
 8001e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e7c:	9202      	str	r2, [sp, #8]
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	2200      	movs	r2, #0
 8001e88:	f005 fff4 	bl	8007e74 <HAL_I2C_Mem_Read>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <m24cxxWcSetIt>:
		}
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
}

void m24cxxWcSetIt(m24cxx_t *m24, I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance == m24->i2c->Instance && m24->WcIsZero == 1)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10e      	bne.n	8001eca <m24cxxWcSetIt+0x36>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7c9b      	ldrb	r3, [r3, #18]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d10a      	bne.n	8001eca <m24cxxWcSetIt+0x36>
	{
		HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68d8      	ldr	r0, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8a1b      	ldrh	r3, [r3, #16]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f005 fd6d 	bl	800799e <HAL_GPIO_WritePin>
		m24->WcIsZero = 0;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	749a      	strb	r2, [r3, #18]
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <MX_ADC1_Init+0xd0>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f00:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f0e:	2204      	movs	r2, #4
 8001f10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f12:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f14:	f004 f992 	bl	800623c <HAL_ADC_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001f1e:	f002 fa79 	bl	8004414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f22:	2306      	movs	r3, #6
 8001f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	481b      	ldr	r0, [pc, #108]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f34:	f004 fc24 	bl	8006780 <HAL_ADC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f3e:	f002 fa69 	bl	8004414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f42:	2307      	movs	r3, #7
 8001f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f46:	2302      	movs	r3, #2
 8001f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f50:	f004 fc16 	bl	8006780 <HAL_ADC_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001f5a:	f002 fa5b 	bl	8004414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f5e:	2308      	movs	r3, #8
 8001f60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f62:	2303      	movs	r3, #3
 8001f64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f6c:	f004 fc08 	bl	8006780 <HAL_ADC_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f76:	f002 fa4d 	bl	8004414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f88:	f004 fbfa 	bl	8006780 <HAL_ADC_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001f92:	f002 fa3f 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000c00 	.word	0x20000c00
 8001fa4:	40012400 	.word	0x40012400

08001fa8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a33      	ldr	r2, [pc, #204]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d15f      	bne.n	8002088 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a31      	ldr	r2, [pc, #196]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_ADC_MspInit+0xec>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002010:	23c0      	movs	r3, #192	; 0xc0
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002014:	2303      	movs	r3, #3
 8002016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4619      	mov	r1, r3
 800201e:	481e      	ldr	r0, [pc, #120]	; (8002098 <HAL_ADC_MspInit+0xf0>)
 8002020:	f005 fb12 	bl	8007648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002024:	2301      	movs	r3, #1
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002028:	2303      	movs	r3, #3
 800202a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	4619      	mov	r1, r3
 8002032:	481a      	ldr	r0, [pc, #104]	; (800209c <HAL_ADC_MspInit+0xf4>)
 8002034:	f005 fb08 	bl	8007648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_ADC_MspInit+0xfc>)
 800203c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 8002052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002056:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 800205a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 8002062:	2220      	movs	r2, #32
 8002064:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 800206e:	f004 fe97 	bl	8006da0 <HAL_DMA_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002078:	f002 f9cc 	bl	8004414 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 8002080:	621a      	str	r2, [r3, #32]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_ADC_MspInit+0xf8>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40012400 	.word	0x40012400
 8002094:	40021000 	.word	0x40021000
 8002098:	40010800 	.word	0x40010800
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	20000c30 	.word	0x20000c30
 80020a4:	40020008 	.word	0x40020008

080020a8 <ButtonInitKey>:
#include "main.h"
#include "button.h"

//Button init
void ButtonInitKey(button_t * Key, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint32_t TimerDebounce, uint32_t TimerLongPressed, uint32_t TimerRepeat)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	80fb      	strh	r3, [r7, #6]
	Key->State = IDLE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
	Key->GpioPort = GpioPort;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	605a      	str	r2, [r3, #4]
	Key->GpioPin = GpioPin;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	811a      	strh	r2, [r3, #8]
	Key->TimerDebounce = TimerDebounce;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	611a      	str	r2, [r3, #16]
	Key->TimerLongPressed = TimerLongPressed;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	615a      	str	r2, [r3, #20]
	Key->TimerRepeat = TimerRepeat;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	619a      	str	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <ButtonRegisterPressCallback>:
	Key->TimerRepeat = Miliseconds;
}

//Callbacks
void ButtonRegisterPressCallback(button_t *Key, void *Callback)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
	Key->ButtonPressed = Callback;
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	61da      	str	r2, [r3, #28]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <ButtonRegisterRepeatCallback>:
{
	Key->ButtonLongPressed = Callback;
}

void ButtonRegisterRepeatCallback(button_t *Key, void *Callback)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
	Key->ButtonRepeat = Callback;
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <ButtonIdleRoutine>:
{
	Key->ButtonRelease = Callback;
}
//States routine
void ButtonIdleRoutine(button_t *Key)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	891b      	ldrh	r3, [r3, #8]
 800212a:	4619      	mov	r1, r3
 800212c:	4610      	mov	r0, r2
 800212e:	f005 fc1f 	bl	8007970 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <ButtonIdleRoutine+0x2e>
	{
		Key->LastTick = HAL_GetTick();
 8002138:	f004 f858 	bl	80061ec <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60da      	str	r2, [r3, #12]
		Key->State = DEBOUNCE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
	}
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <ButtonDebounceRoutine>:

void ButtonDebounceRoutine(button_t *Key)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - Key->LastTick) >= Key->TimerDebounce)
 8002158:	f004 f848 	bl	80061ec <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d31d      	bcc.n	80021a8 <ButtonDebounceRoutine+0x58>
	{
		if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	891b      	ldrh	r3, [r3, #8]
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f005 fbfa 	bl	8007970 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <ButtonDebounceRoutine+0x52>
		{
			Key->State = PRESSED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
			Key->LastTick = HAL_GetTick();
 8002188:	f004 f830 	bl	80061ec <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60da      	str	r2, [r3, #12]
			if(Key->ButtonPressed != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <ButtonDebounceRoutine+0x58>
			{
				Key->ButtonPressed();
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4798      	blx	r3
		else
		{
			Key->State = IDLE;
		}
	}
}
 80021a0:	e002      	b.n	80021a8 <ButtonDebounceRoutine+0x58>
			Key->State = IDLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <ButtonPressedRoutine>:

void ButtonPressedRoutine(button_t *Key)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	891b      	ldrh	r3, [r3, #8]
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f005 fbd4 	bl	8007970 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d103      	bne.n	80021d6 <ButtonPressedRoutine+0x26>
	{
		Key->State = RELEASE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2204      	movs	r2, #4
 80021d2:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonLongPressed != NULL)
		{
			Key->ButtonLongPressed();
		}
	}
}
 80021d4:	e018      	b.n	8002208 <ButtonPressedRoutine+0x58>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerLongPressed)
 80021d6:	f004 f809 	bl	80061ec <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d30e      	bcc.n	8002208 <ButtonPressedRoutine+0x58>
		Key->State = REPEAT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2203      	movs	r2, #3
 80021ee:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 80021f0:	f003 fffc 	bl	80061ec <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60da      	str	r2, [r3, #12]
		if(Key->ButtonLongPressed != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <ButtonPressedRoutine+0x58>
			Key->ButtonLongPressed();
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4798      	blx	r3
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <ButtonRepeatRoutine>:

void ButtonRepeatRoutine(button_t *Key)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	891b      	ldrh	r3, [r3, #8]
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f005 fba4 	bl	8007970 <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d103      	bne.n	8002236 <ButtonRepeatRoutine+0x26>
	{
		Key->State = RELEASE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2204      	movs	r2, #4
 8002232:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonRepeat != NULL)
		{
			Key->ButtonRepeat();
		}
	}
}
 8002234:	e015      	b.n	8002262 <ButtonRepeatRoutine+0x52>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerRepeat)
 8002236:	f003 ffd9 	bl	80061ec <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	1ad2      	subs	r2, r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	429a      	cmp	r2, r3
 8002248:	d30b      	bcc.n	8002262 <ButtonRepeatRoutine+0x52>
		Key->LastTick = HAL_GetTick();
 800224a:	f003 ffcf 	bl	80061ec <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]
		if(Key->ButtonRepeat != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <ButtonRepeatRoutine+0x52>
			Key->ButtonRepeat();
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	4798      	blx	r3
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <ButtonReleaseRoutine>:

void ButtonReleaseRoutine(button_t *Key)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	if(Key->ButtonRelease != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <ButtonReleaseRoutine+0x16>
	{
		Key->ButtonRelease();
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	4798      	blx	r3
	}
	Key->State = IDLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <ButtonTask>:

//State machines
void ButtonTask(button_t *Key)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	switch(Key->State)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d821      	bhi.n	80022e4 <ButtonTask+0x54>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <ButtonTask+0x18>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022bd 	.word	0x080022bd
 80022ac:	080022c5 	.word	0x080022c5
 80022b0:	080022cd 	.word	0x080022cd
 80022b4:	080022d5 	.word	0x080022d5
 80022b8:	080022dd 	.word	0x080022dd
	{
	case IDLE:
		ButtonIdleRoutine(Key);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff2c 	bl	800211a <ButtonIdleRoutine>
		break;
 80022c2:	e00f      	b.n	80022e4 <ButtonTask+0x54>

	case DEBOUNCE:
		ButtonDebounceRoutine(Key);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff43 	bl	8002150 <ButtonDebounceRoutine>
		break;
 80022ca:	e00b      	b.n	80022e4 <ButtonTask+0x54>

	case PRESSED:
		ButtonPressedRoutine(Key);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff6f 	bl	80021b0 <ButtonPressedRoutine>
		break;
 80022d2:	e007      	b.n	80022e4 <ButtonTask+0x54>

	case REPEAT:
		ButtonRepeatRoutine(Key);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff9b 	bl	8002210 <ButtonRepeatRoutine>
		break;
 80022da:	e003      	b.n	80022e4 <ButtonTask+0x54>

	case RELEASE:
		ButtonReleaseRoutine(Key);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffc4 	bl	800226a <ButtonReleaseRoutine>
		break;
 80022e2:	bf00      	nop
	}
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_channel1
  */
void MX_DMA_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <MX_DMA_Init+0x90>)
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4a21      	ldr	r2, [pc, #132]	; (800237c <MX_DMA_Init+0x90>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6153      	str	r3, [r2, #20]
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <MX_DMA_Init+0x90>)
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <MX_DMA_Init+0x90>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4a1b      	ldr	r2, [pc, #108]	; (800237c <MX_DMA_Init+0x90>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6153      	str	r3, [r2, #20]
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <MX_DMA_Init+0x90>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_channel1 on DMA2_Channel1 */
  hdma_memtomem_dma2_channel1.Instance = DMA2_Channel1;
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_DMA_Init+0x94>)
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <MX_DMA_Init+0x98>)
 8002326:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_DMA_Init+0x94>)
 800232a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800232e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <MX_DMA_Init+0x94>)
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_DMA_Init+0x94>)
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_DMA_Init+0x94>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_DMA_Init+0x94>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_channel1.Init.Mode = DMA_NORMAL;
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <MX_DMA_Init+0x94>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_channel1.Init.Priority = DMA_PRIORITY_LOW;
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_DMA_Init+0x94>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_channel1) != HAL_OK)
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <MX_DMA_Init+0x94>)
 8002356:	f004 fd23 	bl	8006da0 <HAL_DMA_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_DMA_Init+0x78>
  {
    Error_Handler();
 8002360:	f002 f858 	bl	8004414 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	200b      	movs	r0, #11
 800236a:	f004 fce2 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800236e:	200b      	movs	r0, #11
 8002370:	f004 fcfb 	bl	8006d6a <HAL_NVIC_EnableIRQ>

}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	20000c74 	.word	0x20000c74
 8002384:	40020408 	.word	0x40020408

08002388 <ds18b20_read_address>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 8002390:	f7fe fe70 	bl	8001074 <wire_reset>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <ds18b20_read_address+0x16>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e021      	b.n	80023e2 <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 800239e:	2033      	movs	r0, #51	; 0x33
 80023a0:	f7fe fefc 	bl	800119c <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e009      	b.n	80023be <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	18d4      	adds	r4, r2, r3
 80023b0:	f7fe feb2 	bl	8001118 <wire_read>
 80023b4:	4603      	mov	r3, r0
 80023b6:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b07      	cmp	r3, #7
 80023c2:	ddf2      	ble.n	80023aa <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 80023c4:	2107      	movs	r1, #7
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe ff2f 	bl	800122a <wire_crc>
 80023cc:	4603      	mov	r3, r0
 80023ce:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3307      	adds	r3, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	7afa      	ldrb	r2, [r7, #11]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d101      	bne.n	80023e0 <ds18b20_read_address+0x58>
    return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e000      	b.n	80023e2 <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}

080023ea <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 80023f6:	f7fe fe3d 	bl	8001074 <wire_reset>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <send_cmd+0x1a>
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e01e      	b.n	8002442 <send_cmd+0x58>

  if (!rom_code) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800240a:	20cc      	movs	r0, #204	; 0xcc
 800240c:	f7fe fec6 	bl	800119c <wire_write>
 8002410:	e012      	b.n	8002438 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8002412:	2055      	movs	r0, #85	; 0x55
 8002414:	f7fe fec2 	bl	800119c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e009      	b.n	8002432 <send_cmd+0x48>
      wire_write(rom_code[i]);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe feb8 	bl	800119c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3301      	adds	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b07      	cmp	r3, #7
 8002436:	ddf2      	ble.n	800241e <send_cmd+0x34>
  }
  wire_write(cmd);
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe feae 	bl	800119c <wire_write>
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8002452:	2144      	movs	r1, #68	; 0x44
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ffc8 	bl	80023ea <send_cmd>
 800245a:	4603      	mov	r3, r0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 800246e:	21be      	movs	r1, #190	; 0xbe
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffba 	bl	80023ea <send_cmd>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e01e      	b.n	80024be <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e009      	b.n	800249a <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	18d4      	adds	r4, r2, r3
 800248c:	f7fe fe44 	bl	8001118 <wire_read>
 8002490:	4603      	mov	r3, r0
 8002492:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3301      	adds	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b08      	cmp	r3, #8
 800249e:	ddf2      	ble.n	8002486 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80024a0:	2108      	movs	r1, #8
 80024a2:	6838      	ldr	r0, [r7, #0]
 80024a4:	f7fe fec1 	bl	800122a <wire_crc>
 80024a8:	4603      	mov	r3, r0
 80024aa:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3308      	adds	r3, #8
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	7afa      	ldrb	r2, [r7, #11]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d101      	bne.n	80024bc <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}

080024c6 <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

uint32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffc5 	bl	8002464 <ds18b20_read_scratchpad>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <ds18b20_get_temp_wo_fp+0x20>
    return 8500;
 80024e0:	f242 1334 	movw	r3, #8500	; 0x2134
 80024e4:	e00b      	b.n	80024fe <ds18b20_get_temp_wo_fp+0x38>
 80024e6:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 80024e8:	817b      	strh	r3, [r7, #10]

  return (temp * 100) / 16;
 80024ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024ee:	461a      	mov	r2, r3
 80024f0:	2364      	movs	r3, #100	; 0x64
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da00      	bge.n	80024fc <ds18b20_get_temp_wo_fp+0x36>
 80024fa:	330f      	adds	r3, #15
 80024fc:	111b      	asrs	r3, r3, #4
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	; 0x30
 800250c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250e:	f107 0320 	add.w	r3, r7, #32
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800251c:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a71      	ldr	r2, [pc, #452]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002534:	4b6c      	ldr	r3, [pc, #432]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a6b      	ldr	r2, [pc, #428]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800253a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b69      	ldr	r3, [pc, #420]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002552:	f043 0310 	orr.w	r3, r3, #16
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b60      	ldr	r3, [pc, #384]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a5f      	ldr	r2, [pc, #380]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257c:	4b5a      	ldr	r3, [pc, #360]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	4a59      	ldr	r2, [pc, #356]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002582:	f043 0308 	orr.w	r3, r3, #8
 8002586:	6193      	str	r3, [r2, #24]
 8002588:	4b57      	ldr	r3, [pc, #348]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002594:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a53      	ldr	r2, [pc, #332]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ac:	4b4e      	ldr	r3, [pc, #312]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a4d      	ldr	r2, [pc, #308]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 80025b2:	f043 0320 	orr.w	r3, r3, #32
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <MX_GPIO_Init+0x1e0>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80025c4:	2200      	movs	r2, #0
 80025c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025ca:	4848      	ldr	r0, [pc, #288]	; (80026ec <MX_GPIO_Init+0x1e4>)
 80025cc:	f005 f9e7 	bl	800799e <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80025d6:	4846      	ldr	r0, [pc, #280]	; (80026f0 <MX_GPIO_Init+0x1e8>)
 80025d8:	f005 f9e1 	bl	800799e <HAL_GPIO_WritePin>
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TXE_GPIO_Port, RS485_TXE_Pin, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	2110      	movs	r1, #16
 80025e0:	4844      	ldr	r0, [pc, #272]	; (80026f4 <MX_GPIO_Init+0x1ec>)
 80025e2:	f005 f9dc 	bl	800799e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_EEPROM_GPIO_Port, WC_EEPROM_Pin, GPIO_PIN_RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2120      	movs	r1, #32
 80025ea:	4843      	ldr	r0, [pc, #268]	; (80026f8 <MX_GPIO_Init+0x1f0>)
 80025ec:	f005 f9d7 	bl	800799e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80025f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f4:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2302      	movs	r3, #2
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002602:	f107 0320 	add.w	r3, r7, #32
 8002606:	4619      	mov	r1, r3
 8002608:	4838      	ldr	r0, [pc, #224]	; (80026ec <MX_GPIO_Init+0x1e4>)
 800260a:	f005 f81d 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800260e:	2304      	movs	r3, #4
 8002610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002616:	2301      	movs	r3, #1
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800261a:	f107 0320 	add.w	r3, r7, #32
 800261e:	4619      	mov	r1, r3
 8002620:	4833      	ldr	r0, [pc, #204]	; (80026f0 <MX_GPIO_Init+0x1e8>)
 8002622:	f005 f811 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 8002626:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800262a:	623b      	str	r3, [r7, #32]
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262c:	2301      	movs	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2302      	movs	r3, #2
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	4619      	mov	r1, r3
 800263e:	482c      	ldr	r0, [pc, #176]	; (80026f0 <MX_GPIO_Init+0x1e8>)
 8002640:	f005 f802 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = CHECK_WIRE_1_Pin|CHECK_WIRE_2_Pin|CHECK_WIRE_3_Pin|CHECK_WIRE_4_Pin
 8002644:	f240 330f 	movw	r3, #783	; 0x30f
 8002648:	623b      	str	r3, [r7, #32]
                          |BUTTON_DOWN_Pin|BUTTON_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	f107 0320 	add.w	r3, r7, #32
 8002656:	4619      	mov	r1, r3
 8002658:	4828      	ldr	r0, [pc, #160]	; (80026fc <MX_GPIO_Init+0x1f4>)
 800265a:	f004 fff5 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_OPEN_Pin;
 800265e:	2301      	movs	r3, #1
 8002660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SW_OPEN_GPIO_Port, &GPIO_InitStruct);
 800266a:	f107 0320 	add.w	r3, r7, #32
 800266e:	4619      	mov	r1, r3
 8002670:	4820      	ldr	r0, [pc, #128]	; (80026f4 <MX_GPIO_Init+0x1ec>)
 8002672:	f004 ffe9 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_TXE_Pin;
 8002676:	2310      	movs	r3, #16
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2302      	movs	r3, #2
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RS485_TXE_GPIO_Port, &GPIO_InitStruct);
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4619      	mov	r1, r3
 800268c:	4819      	ldr	r0, [pc, #100]	; (80026f4 <MX_GPIO_Init+0x1ec>)
 800268e:	f004 ffdb 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002692:	230f      	movs	r3, #15
 8002694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800269e:	f107 0320 	add.w	r3, r7, #32
 80026a2:	4619      	mov	r1, r3
 80026a4:	4816      	ldr	r0, [pc, #88]	; (8002700 <MX_GPIO_Init+0x1f8>)
 80026a6:	f004 ffcf 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80026aa:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80026ae:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026b8:	f107 0320 	add.w	r3, r7, #32
 80026bc:	4619      	mov	r1, r3
 80026be:	4810      	ldr	r0, [pc, #64]	; (8002700 <MX_GPIO_Init+0x1f8>)
 80026c0:	f004 ffc2 	bl	8007648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WC_EEPROM_Pin;
 80026c4:	2320      	movs	r3, #32
 80026c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2302      	movs	r3, #2
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WC_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 0320 	add.w	r3, r7, #32
 80026d8:	4619      	mov	r1, r3
 80026da:	4807      	ldr	r0, [pc, #28]	; (80026f8 <MX_GPIO_Init+0x1f0>)
 80026dc:	f004 ffb4 	bl	8007648 <HAL_GPIO_Init>

}
 80026e0:	bf00      	nop
 80026e2:	3730      	adds	r7, #48	; 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40011800 	.word	0x40011800
 80026f0:	40011c00 	.word	0x40011c00
 80026f4:	40010800 	.word	0x40010800
 80026f8:	40010c00 	.word	0x40010c00
 80026fc:	40011000 	.word	0x40011000
 8002700:	40012000 	.word	0x40012000

08002704 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <MX_I2C1_Init+0x50>)
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <MX_I2C1_Init+0x54>)
 800270c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_I2C1_Init+0x50>)
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <MX_I2C1_Init+0x58>)
 8002712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_I2C1_Init+0x50>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_I2C1_Init+0x50>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_I2C1_Init+0x50>)
 8002722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <MX_I2C1_Init+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_I2C1_Init+0x50>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <MX_I2C1_Init+0x50>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_I2C1_Init+0x50>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002740:	4804      	ldr	r0, [pc, #16]	; (8002754 <MX_I2C1_Init+0x50>)
 8002742:	f005 f945 	bl	80079d0 <HAL_I2C_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800274c:	f001 fe62 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000cb8 	.word	0x20000cb8
 8002758:	40005400 	.word	0x40005400
 800275c:	00061a80 	.word	0x00061a80

08002760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a3b      	ldr	r2, [pc, #236]	; (8002868 <HAL_I2C_MspInit+0x108>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d16f      	bne.n	8002860 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_I2C_MspInit+0x10c>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a39      	ldr	r2, [pc, #228]	; (800286c <HAL_I2C_MspInit+0x10c>)
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_I2C_MspInit+0x10c>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279c:	2312      	movs	r3, #18
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	4619      	mov	r1, r3
 80027aa:	4831      	ldr	r0, [pc, #196]	; (8002870 <HAL_I2C_MspInit+0x110>)
 80027ac:	f004 ff4c 	bl	8007648 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <HAL_I2C_MspInit+0x10c>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4a2d      	ldr	r2, [pc, #180]	; (800286c <HAL_I2C_MspInit+0x10c>)
 80027b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ba:	61d3      	str	r3, [r2, #28]
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_I2C_MspInit+0x10c>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027ca:	4a2b      	ldr	r2, [pc, #172]	; (8002878 <HAL_I2C_MspInit+0x118>)
 80027cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80027f8:	481e      	ldr	r0, [pc, #120]	; (8002874 <HAL_I2C_MspInit+0x114>)
 80027fa:	f004 fad1 	bl	8006da0 <HAL_DMA_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8002804:	f001 fe06 	bl	8004414 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <HAL_I2C_MspInit+0x114>)
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_I2C_MspInit+0x114>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_I2C_MspInit+0x11c>)
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_I2C_MspInit+0x120>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_I2C_MspInit+0x11c>)
 800281c:	2210      	movs	r2, #16
 800281e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_I2C_MspInit+0x11c>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_I2C_MspInit+0x11c>)
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_I2C_MspInit+0x11c>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_I2C_MspInit+0x11c>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_I2C_MspInit+0x11c>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_I2C_MspInit+0x11c>)
 8002840:	2200      	movs	r2, #0
 8002842:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <HAL_I2C_MspInit+0x11c>)
 8002846:	f004 faab 	bl	8006da0 <HAL_DMA_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8002850:	f001 fde0 	bl	8004414 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_I2C_MspInit+0x11c>)
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_I2C_MspInit+0x11c>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40005400 	.word	0x40005400
 800286c:	40021000 	.word	0x40021000
 8002870:	40010c00 	.word	0x40010c00
 8002874:	20000d0c 	.word	0x20000d0c
 8002878:	40020080 	.word	0x40020080
 800287c:	20000d50 	.word	0x20000d50
 8002880:	4002006c 	.word	0x4002006c

08002884 <LedBlinkInit>:

#include "main.h"
#include "led_blink.h"

void LedBlinkInit(blink_t *BlinkLed, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint16_t LightTime)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	460b      	mov	r3, r1
 8002894:	80fb      	strh	r3, [r7, #6]
 8002896:	4613      	mov	r3, r2
 8002898:	80bb      	strh	r3, [r7, #4]
	BlinkLed -> GpioPort = GpioPort;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	605a      	str	r2, [r3, #4]
	BlinkLed -> GpioPin  = GpioPin;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	811a      	strh	r2, [r3, #8]
	BlinkLed -> LightTime = LightTime;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88ba      	ldrh	r2, [r7, #4]
 80028aa:	815a      	strh	r2, [r3, #10]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <LedBlinkOne>:

void LedBlinkOne(blink_t *BlinkLed)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	BlinkLed -> LastTick = HAL_GetTick();
 80028be:	f003 fc95 	bl	80061ec <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BlinkLed->GpioPort, BlinkLed->GpioPin, SET);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6858      	ldr	r0, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	891b      	ldrh	r3, [r3, #8]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4619      	mov	r1, r3
 80028d4:	f005 f863 	bl	800799e <HAL_GPIO_WritePin>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <LedBlinkTask>:

void LedBlinkTask(blink_t *BlinkLed)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - BlinkLed->LastTick >= BlinkLed->LightTime)
 80028e8:	f003 fc80 	bl	80061ec <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	8952      	ldrh	r2, [r2, #10]
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d307      	bcc.n	800290c <LedBlinkTask+0x2c>
	{
		HAL_GPIO_WritePin(BlinkLed->GpioPort, BlinkLed->GpioPin, RESET);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6858      	ldr	r0, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	891b      	ldrh	r3, [r3, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	4619      	mov	r1, r3
 8002908:	f005 f849 	bl	800799e <HAL_GPIO_WritePin>
	}
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800291a:	f003 fc0f 	bl	800613c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800291e:	f000 f90b 	bl	8002b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002922:	f7ff fdf1 	bl	8002508 <MX_GPIO_Init>
  MX_DMA_Init();
 8002926:	f7ff fce1 	bl	80022ec <MX_DMA_Init>
  MX_USART3_UART_Init();
 800292a:	f003 fb03 	bl	8005f34 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800292e:	f7ff fee9 	bl	8002704 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002932:	f00f fbbf 	bl	80120b4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002936:	f7ff facd 	bl	8001ed4 <MX_ADC1_Init>
  MX_TIM3_Init();
 800293a:	f003 f83d 	bl	80059b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800293e:	f003 f8b3 	bl	8005aa8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002942:	f003 faa3 	bl	8005e8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002946:	f003 facb 	bl	8005ee0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800294a:	f003 f947 	bl	8005bdc <MX_TIM5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800294e:	f000 f952 	bl	8002bf6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(&hi2c1, &hdma_memtomem_dma2_channel1);
 8002952:	495f      	ldr	r1, [pc, #380]	; (8002ad0 <main+0x1bc>)
 8002954:	485f      	ldr	r0, [pc, #380]	; (8002ad4 <main+0x1c0>)
 8002956:	f002 fe53 	bl	8005600 <SSD1306_Init>

  OldTick500ms = HAL_GetTick();
 800295a:	f003 fc47 	bl	80061ec <HAL_GetTick>
 800295e:	4603      	mov	r3, r0
 8002960:	4a5d      	ldr	r2, [pc, #372]	; (8002ad8 <main+0x1c4>)
 8002962:	6013      	str	r3, [r2, #0]
  OldTick100ms = HAL_GetTick();
 8002964:	f003 fc42 	bl	80061ec <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
 800296a:	4a5c      	ldr	r2, [pc, #368]	; (8002adc <main+0x1c8>)
 800296c:	6013      	str	r3, [r2, #0]
  OldTick50ms = HAL_GetTick();
 800296e:	f003 fc3d 	bl	80061ec <HAL_GetTick>
 8002972:	4603      	mov	r3, r0
 8002974:	4a5a      	ldr	r2, [pc, #360]	; (8002ae0 <main+0x1cc>)
 8002976:	6013      	str	r3, [r2, #0]
  OldTick10000ms = HAL_GetTick();
 8002978:	f003 fc38 	bl	80061ec <HAL_GetTick>
 800297c:	4603      	mov	r3, r0
 800297e:	4a59      	ldr	r2, [pc, #356]	; (8002ae4 <main+0x1d0>)
 8002980:	6013      	str	r3, [r2, #0]

  if (ds18b20_read_address(ds1) != HAL_OK)
 8002982:	4859      	ldr	r0, [pc, #356]	; (8002ae8 <main+0x1d4>)
 8002984:	f7ff fd00 	bl	8002388 <ds18b20_read_address>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <main+0x7e>
  {
    Error_Handler();
 800298e:	f001 fd41 	bl	8004414 <Error_Handler>
  }

  ButtonInitKey(&KeyUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 20, 1000, 350);
 8002992:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2314      	movs	r3, #20
 80029a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a4:	4951      	ldr	r1, [pc, #324]	; (8002aec <main+0x1d8>)
 80029a6:	4852      	ldr	r0, [pc, #328]	; (8002af0 <main+0x1dc>)
 80029a8:	f7ff fb7e 	bl	80020a8 <ButtonInitKey>
  ButtonInitKey(&KeyDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 20, 1000, 350);
 80029ac:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2314      	movs	r3, #20
 80029ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029be:	494b      	ldr	r1, [pc, #300]	; (8002aec <main+0x1d8>)
 80029c0:	484c      	ldr	r0, [pc, #304]	; (8002af4 <main+0x1e0>)
 80029c2:	f7ff fb71 	bl	80020a8 <ButtonInitKey>

  LedBlinkInit(&CommPcUsb, COMM_PC_LED_GPIO_Port, COMM_PC_LED_Pin, 20);
 80029c6:	2314      	movs	r3, #20
 80029c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029cc:	494a      	ldr	r1, [pc, #296]	; (8002af8 <main+0x1e4>)
 80029ce:	484b      	ldr	r0, [pc, #300]	; (8002afc <main+0x1e8>)
 80029d0:	f7ff ff58 	bl	8002884 <LedBlinkInit>

  ShowMenu();
 80029d4:	f000 fcfa 	bl	80033cc <ShowMenu>


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80029d8:	2100      	movs	r1, #0
 80029da:	4849      	ldr	r0, [pc, #292]	; (8002b00 <main+0x1ec>)
 80029dc:	f00a fc14 	bl	800d208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80029e0:	2104      	movs	r1, #4
 80029e2:	4847      	ldr	r0, [pc, #284]	; (8002b00 <main+0x1ec>)
 80029e4:	f00a fc10 	bl	800d208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80029e8:	2108      	movs	r1, #8
 80029ea:	4845      	ldr	r0, [pc, #276]	; (8002b00 <main+0x1ec>)
 80029ec:	f00a fc0c 	bl	800d208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80029f0:	210c      	movs	r1, #12
 80029f2:	4843      	ldr	r0, [pc, #268]	; (8002b00 <main+0x1ec>)
 80029f4:	f00a fc08 	bl	800d208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80029f8:	2100      	movs	r1, #0
 80029fa:	4842      	ldr	r0, [pc, #264]	; (8002b04 <main+0x1f0>)
 80029fc:	f00a fc04 	bl	800d208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002a00:	2104      	movs	r1, #4
 8002a02:	4841      	ldr	r0, [pc, #260]	; (8002b08 <main+0x1f4>)
 8002a04:	f00a fc00 	bl	800d208 <HAL_TIM_PWM_Start>

  LedLightInit(&Logo, &htim3, TIM_CHANNEL_1, 20);
 8002a08:	2314      	movs	r3, #20
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	493d      	ldr	r1, [pc, #244]	; (8002b04 <main+0x1f0>)
 8002a0e:	483f      	ldr	r0, [pc, #252]	; (8002b0c <main+0x1f8>)
 8002a10:	f000 fcc2 	bl	8003398 <LedLightInit>
  LedLightInit(&Light, &htim5, TIM_CHANNEL_2, 20);
 8002a14:	2314      	movs	r3, #20
 8002a16:	2204      	movs	r2, #4
 8002a18:	493b      	ldr	r1, [pc, #236]	; (8002b08 <main+0x1f4>)
 8002a1a:	483d      	ldr	r0, [pc, #244]	; (8002b10 <main+0x1fc>)
 8002a1c:	f000 fcbc 	bl	8003398 <LedLightInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  m24cxxInit(&M24C02, &hi2c1, EEPROM_ADDRES, M24C02_MEM_SIZE, WC_EEPROM_GPIO_Port, WC_EEPROM_Pin);
 8002a20:	2320      	movs	r3, #32
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <main+0x200>)
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2c:	2250      	movs	r2, #80	; 0x50
 8002a2e:	4929      	ldr	r1, [pc, #164]	; (8002ad4 <main+0x1c0>)
 8002a30:	4839      	ldr	r0, [pc, #228]	; (8002b18 <main+0x204>)
 8002a32:	f7ff f937 	bl	8001ca4 <m24cxxInit>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Measurements.Adc1Value, 4);
 8002a36:	2204      	movs	r2, #4
 8002a38:	4938      	ldr	r1, [pc, #224]	; (8002b1c <main+0x208>)
 8002a3a:	4839      	ldr	r0, [pc, #228]	; (8002b20 <main+0x20c>)
 8002a3c:	f003 fce8 	bl	8006410 <HAL_ADC_Start_DMA>

  EepromInit(&M24C02);
 8002a40:	4835      	ldr	r0, [pc, #212]	; (8002b18 <main+0x204>)
 8002a42:	f7fe fc13 	bl	800126c <EepromInit>
  EepromRecovery();
 8002a46:	f7fe fc35 	bl	80012b4 <EepromRecovery>

  while (1)
  {


	  if(LineCounter)
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <main+0x210>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <main+0x158>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 8002a52:	4935      	ldr	r1, [pc, #212]	; (8002b28 <main+0x214>)
 8002a54:	4835      	ldr	r0, [pc, #212]	; (8002b2c <main+0x218>)
 8002a56:	f002 fbc0 	bl	80051da <Parser_TakeLine>

		  LineCounter--;
 8002a5a:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <main+0x210>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <main+0x210>)
 8002a64:	701a      	strb	r2, [r3, #0]

		  Parser_parse(ReceivedData);
 8002a66:	4830      	ldr	r0, [pc, #192]	; (8002b28 <main+0x214>)
 8002a68:	f002 fbe0 	bl	800522c <Parser_parse>
	  }
	  if(DataToTransmit > 0 )
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <main+0x21c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <main+0x188>
	  {
		  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002a74:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <main+0x220>)
 8002a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002a7a:	607b      	str	r3, [r7, #4]
		  if (hcdc->TxState == 0)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <main+0x188>
		  {
			  LedBlinkOne(&CommPcUsb);
 8002a86:	481d      	ldr	r0, [pc, #116]	; (8002afc <main+0x1e8>)
 8002a88:	f7ff ff15 	bl	80028b6 <LedBlinkOne>
			  UsbTransmitTask();
 8002a8c:	f001 fc98 	bl	80043c0 <UsbTransmitTask>

			  DataToTransmit--;
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <main+0x21c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <main+0x21c>)
 8002a9a:	701a      	strb	r2, [r3, #0]
		  }

	  }


	  IntervalFunc100ms();
 8002a9c:	f001 fb1c 	bl	80040d8 <IntervalFunc100ms>
	  IntervalFunc500ms();
 8002aa0:	f001 fad6 	bl	8004050 <IntervalFunc500ms>
	  IntervalFunc50ms();
 8002aa4:	f001 fbc2 	bl	800422c <IntervalFunc50ms>
	  IntervalFunc10000ms();
 8002aa8:	f001 fa9e 	bl	8003fe8 <IntervalFunc10000ms>

	  ButtonTask(&KeyDown);
 8002aac:	4811      	ldr	r0, [pc, #68]	; (8002af4 <main+0x1e0>)
 8002aae:	f7ff fbef 	bl	8002290 <ButtonTask>
	  ButtonTask(&KeyUp);
 8002ab2:	480f      	ldr	r0, [pc, #60]	; (8002af0 <main+0x1dc>)
 8002ab4:	f7ff fbec 	bl	8002290 <ButtonTask>

	  LedBlinkTask(&CommPcUsb);
 8002ab8:	4810      	ldr	r0, [pc, #64]	; (8002afc <main+0x1e8>)
 8002aba:	f7ff ff11 	bl	80028e0 <LedBlinkTask>

	  MeasurementConversion();
 8002abe:	f001 fa3d 	bl	8003f3c <MeasurementConversion>

	  LedLightTask(&Logo);
 8002ac2:	4812      	ldr	r0, [pc, #72]	; (8002b0c <main+0x1f8>)
 8002ac4:	f000 f9da 	bl	8002e7c <LedLightTask>
	  LedLightTask(&Light);
 8002ac8:	4811      	ldr	r0, [pc, #68]	; (8002b10 <main+0x1fc>)
 8002aca:	f000 f9d7 	bl	8002e7c <LedLightTask>
	  if(LineCounter)
 8002ace:	e7bc      	b.n	8002a4a <main+0x136>
 8002ad0:	20000c74 	.word	0x20000c74
 8002ad4:	20000cb8 	.word	0x20000cb8
 8002ad8:	20001e08 	.word	0x20001e08
 8002adc:	20001e0c 	.word	0x20001e0c
 8002ae0:	20001e10 	.word	0x20001e10
 8002ae4:	20001e14 	.word	0x20001e14
 8002ae8:	20001e20 	.word	0x20001e20
 8002aec:	40011000 	.word	0x40011000
 8002af0:	20000d94 	.word	0x20000d94
 8002af4:	20000dc0 	.word	0x20000dc0
 8002af8:	40011c00 	.word	0x40011c00
 8002afc:	20000dec 	.word	0x20000dec
 8002b00:	20002738 	.word	0x20002738
 8002b04:	200026f0 	.word	0x200026f0
 8002b08:	20002780 	.word	0x20002780
 8002b0c:	20001e60 	.word	0x20001e60
 8002b10:	20001e74 	.word	0x20001e74
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	20001e28 	.word	0x20001e28
 8002b1c:	20001e48 	.word	0x20001e48
 8002b20:	20000c00 	.word	0x20000c00
 8002b24:	20001600 	.word	0x20001600
 8002b28:	20001604 	.word	0x20001604
 8002b2c:	20000df8 	.word	0x20000df8
 8002b30:	20001e04 	.word	0x20001e04
 8002b34:	200028a8 	.word	0x200028a8

08002b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b096      	sub	sp, #88	; 0x58
 8002b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b42:	2228      	movs	r2, #40	; 0x28
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f00f ff90 	bl	8012a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b92:	4618      	mov	r0, r3
 8002b94:	f009 fdc8 	bl	800c728 <HAL_RCC_OscConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002b9e:	f001 fc39 	bl	8004414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba2:	230f      	movs	r3, #15
 8002ba4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f00a f834 	bl	800cc2c <HAL_RCC_ClockConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002bca:	f001 fc23 	bl	8004414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002bce:	2312      	movs	r3, #18
 8002bd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002bd2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002bd6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	4618      	mov	r0, r3
 8002be0:	f00a f9b4 	bl	800cf4c <HAL_RCCEx_PeriphCLKConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002bea:	f001 fc13 	bl	8004414 <Error_Handler>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3758      	adds	r7, #88	; 0x58
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	201f      	movs	r0, #31
 8002c00:	f004 f897 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c04:	201f      	movs	r0, #31
 8002c06:	f004 f8b0 	bl	8006d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2011      	movs	r0, #17
 8002c10:	f004 f88f 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002c14:	2011      	movs	r0, #17
 8002c16:	f004 f8a8 	bl	8006d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2010      	movs	r0, #16
 8002c20:	f004 f887 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002c24:	2010      	movs	r0, #16
 8002c26:	f004 f8a0 	bl	8006d6a <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2014      	movs	r0, #20
 8002c30:	f004 f87f 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002c34:	2014      	movs	r0, #20
 8002c36:	f004 f898 	bl	8006d6a <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2012      	movs	r0, #18
 8002c40:	f004 f877 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c44:	2012      	movs	r0, #18
 8002c46:	f004 f890 	bl	8006d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	2038      	movs	r0, #56	; 0x38
 8002c50:	f004 f86f 	bl	8006d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002c54:	2038      	movs	r0, #56	; 0x38
 8002c56:	f004 f888 	bl	8006d6a <HAL_NVIC_EnableIRQ>
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <PwmFreqSet>:

/* USER CODE BEGIN 4 */

void PwmFreqSet(uint16_t PwmFrequency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
	  htim4.Init.Prescaler = PwmFrequency;
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <PwmFreqSet+0x28>)
 8002c6e:	6053      	str	r3, [r2, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c70:	4805      	ldr	r0, [pc, #20]	; (8002c88 <PwmFreqSet+0x28>)
 8002c72:	f00a fa21 	bl	800d0b8 <HAL_TIM_Base_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <PwmFreqSet+0x20>
	  {
	    Error_Handler();
 8002c7c:	f001 fbca 	bl	8004414 <Error_Handler>
	  }
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20002738 	.word	0x20002738

08002c8c <OutputSet>:

void OutputSet(uint16_t ODRvalue)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
	GPIOE -> ODR = ODRvalue;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <OutputSet+0x1c>)
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40011800 	.word	0x40011800

08002cac <OutputPinStateSet>:

void OutputPinStateSet(uint8_t Pin, uint8_t State)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71bb      	strb	r3, [r7, #6]
	if(State == 1)
 8002cbc:	79bb      	ldrb	r3, [r7, #6]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10a      	bne.n	8002cd8 <OutputPinStateSet+0x2c>
	{
		GPIOE -> ODR |= (1 << Pin);
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <OutputPinStateSet+0x54>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	79fa      	ldrb	r2, [r7, #7]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f202 	lsl.w	r2, r1, r2
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <OutputPinStateSet+0x54>)
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	60d3      	str	r3, [r2, #12]
	}
	else if (State == 0)
	{
		GPIOE -> ODR &= ~(1 << Pin);
	}
}
 8002cd6:	e00d      	b.n	8002cf4 <OutputPinStateSet+0x48>
	else if (State == 0)
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <OutputPinStateSet+0x48>
		GPIOE -> ODR &= ~(1 << Pin);
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <OutputPinStateSet+0x54>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	43d2      	mvns	r2, r2
 8002cec:	4611      	mov	r1, r2
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <OutputPinStateSet+0x54>)
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40011800 	.word	0x40011800

08002d04 <OutputPinToggle>:

void OutputPinToggle(uint8_t Pin)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
	GPIOE -> ODR ^= (1 << Pin);
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <OutputPinToggle+0x28>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4a03      	ldr	r2, [pc, #12]	; (8002d2c <OutputPinToggle+0x28>)
 8002d1e:	404b      	eors	r3, r1
 8002d20:	60d3      	str	r3, [r2, #12]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40011800 	.word	0x40011800

08002d30 <PwmSet>:

void PwmSet(uint16_t Pwm1, uint16_t Pwm2, uint16_t Pwm3, uint16_t Pwm4)
{
 8002d30:	b490      	push	{r4, r7}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	80fb      	strh	r3, [r7, #6]
 8002d42:	4603      	mov	r3, r0
 8002d44:	80bb      	strh	r3, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Pwm1);
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <PwmSet+0x48>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, Pwm2);
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <PwmSet+0x48>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	88ba      	ldrh	r2, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, Pwm3);
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <PwmSet+0x48>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Pwm4);
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <PwmSet+0x48>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	883a      	ldrh	r2, [r7, #0]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc90      	pop	{r4, r7}
 8002d76:	4770      	bx	lr
 8002d78:	20002738 	.word	0x20002738

08002d7c <PwmChannelSet>:

void PwmChannelSet(uint8_t Channel, uint16_t Value)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	460a      	mov	r2, r1
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	80bb      	strh	r3, [r7, #4]
	Channel = Channel - 1;
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	71fb      	strb	r3, [r7, #7]

//	uint8_t ChannelMapper[] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
//	__HAL_TIM_SET_COMPARE(&htim4, ChannelMapper[Channel], Value);

	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <PwmChannelSet+0x26>
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <PwmChannelSet+0x5c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	88ba      	ldrh	r2, [r7, #4]
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002da0:	e015      	b.n	8002dce <PwmChannelSet+0x52>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d104      	bne.n	8002db4 <PwmChannelSet+0x38>
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <PwmChannelSet+0x5c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	88bb      	ldrh	r3, [r7, #4]
 8002db0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002db2:	e00c      	b.n	8002dce <PwmChannelSet+0x52>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d104      	bne.n	8002dc6 <PwmChannelSet+0x4a>
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <PwmChannelSet+0x5c>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	88bb      	ldrh	r3, [r7, #4]
 8002dc2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002dc4:	e003      	b.n	8002dce <PwmChannelSet+0x52>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <PwmChannelSet+0x5c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	20002738 	.word	0x20002738

08002ddc <DisplayContrast>:

void DisplayContrast(uint8_t Contrast)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(SSD1306_SETCONTRAST);
 8002de6:	2081      	movs	r0, #129	; 0x81
 8002de8:	f002 fae8 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(Contrast);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 fae4 	bl	80053bc <SSD1306_Command>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <LogoLedSetParameter>:

void LogoLedSetParameter(uint8_t Mode, uint16_t PwmValue, uint16_t DimmerSpeed)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
 8002e06:	460b      	mov	r3, r1
 8002e08:	80bb      	strh	r3, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	807b      	strh	r3, [r7, #2]
	Logo.Mode = Mode;
 8002e0e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <LogoLedSetParameter+0x3c>)
 8002e14:	701a      	strb	r2, [r3, #0]
	if(PwmValue != 0) Logo.PwmMax = PwmValue;
 8002e16:	88bb      	ldrh	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <LogoLedSetParameter+0x26>
 8002e1c:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <LogoLedSetParameter+0x3c>)
 8002e1e:	88bb      	ldrh	r3, [r7, #4]
 8002e20:	8053      	strh	r3, [r2, #2]
	if(DimmerSpeed != 0) Logo.DimmerSpeed = DimmerSpeed;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <LogoLedSetParameter+0x32>
 8002e28:	4a03      	ldr	r2, [pc, #12]	; (8002e38 <LogoLedSetParameter+0x3c>)
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	8213      	strh	r3, [r2, #16]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20001e60 	.word	0x20001e60

08002e3c <LightLedSetParameter>:

void LightLedSetParameter(uint8_t Mode, uint16_t PwmValue, uint16_t DimmerSpeed)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
 8002e46:	460b      	mov	r3, r1
 8002e48:	80bb      	strh	r3, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	807b      	strh	r3, [r7, #2]
	Light.Mode = Mode;
 8002e4e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <LightLedSetParameter+0x3c>)
 8002e54:	701a      	strb	r2, [r3, #0]
	if(PwmValue != 0) Light.PwmMax = PwmValue;
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <LightLedSetParameter+0x26>
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <LightLedSetParameter+0x3c>)
 8002e5e:	88bb      	ldrh	r3, [r7, #4]
 8002e60:	8053      	strh	r3, [r2, #2]
	if(DimmerSpeed != 0)Light.DimmerSpeed = DimmerSpeed;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <LightLedSetParameter+0x32>
 8002e68:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <LightLedSetParameter+0x3c>)
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	8213      	strh	r3, [r2, #16]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	20001e74 	.word	0x20001e74

08002e7c <LedLightTask>:

void LedLightTask(LedLightParameter_t *Instance)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	switch(Instance -> Mode)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f993 3000 	ldrsb.w	r3, [r3]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	f200 827d 	bhi.w	800338c <LedLightTask+0x510>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <LedLightTask+0x1c>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08003383 	.word	0x08003383
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002ef5 	.word	0x08002ef5
 8002ea4:	08003097 	.word	0x08003097
 8002ea8:	0800323f 	.word	0x0800323f
	{
	case -1:
		break;
	case 0:
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7a1b      	ldrb	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <LedLightTask+0x44>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002ebe:	e265      	b.n	800338c <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7a1b      	ldrb	r3, [r3, #8]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d105      	bne.n	8002ed4 <LedLightTask+0x58>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002ed2:	e25b      	b.n	800338c <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7a1b      	ldrb	r3, [r3, #8]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d105      	bne.n	8002ee8 <LedLightTask+0x6c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8002ee6:	e251      	b.n	800338c <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002ef2:	e24b      	b.n	800338c <LedLightTask+0x510>
	case 1:
		if(Instance -> PwmActual > Instance -> PwmMax)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	895a      	ldrh	r2, [r3, #10]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	885b      	ldrh	r3, [r3, #2]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d92d      	bls.n	8002f5c <LedLightTask+0xe0>
		{
			Instance -> PwmActual = Instance -> PwmMax;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	885a      	ldrh	r2, [r3, #2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	815a      	strh	r2, [r3, #10]
			__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7a1b      	ldrb	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <LedLightTask+0xa2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	895a      	ldrh	r2, [r3, #10]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1c:	e01e      	b.n	8002f5c <LedLightTask+0xe0>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7a1b      	ldrb	r3, [r3, #8]
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <LedLightTask+0xba>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8959      	ldrh	r1, [r3, #10]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	460b      	mov	r3, r1
 8002f32:	6393      	str	r3, [r2, #56]	; 0x38
 8002f34:	e012      	b.n	8002f5c <LedLightTask+0xe0>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7a1b      	ldrb	r3, [r3, #8]
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d107      	bne.n	8002f4e <LedLightTask+0xd2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8959      	ldrh	r1, [r3, #10]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002f4c:	e006      	b.n	8002f5c <LedLightTask+0xe0>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8959      	ldrh	r1, [r3, #10]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
		}
		if(DOOR_OPEN)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4888      	ldr	r0, [pc, #544]	; (8003180 <LedLightTask+0x304>)
 8002f60:	f004 fd06 	bl	8007970 <HAL_GPIO_ReadPin>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d147      	bne.n	8002ffa <LedLightTask+0x17e>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual <= Instance->PwmMax)
 8002f6a:	f003 f93f 	bl	80061ec <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	8a12      	ldrh	r2, [r2, #16]
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f240 8203 	bls.w	8003386 <LedLightTask+0x50a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	895a      	ldrh	r2, [r3, #10]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	885b      	ldrh	r3, [r3, #2]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f200 81fc 	bhi.w	8003386 <LedLightTask+0x50a>
			{
				Instance->PwmActual++;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	895b      	ldrh	r3, [r3, #10]
 8002f92:	3301      	adds	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7a1b      	ldrb	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <LedLightTask+0x134>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	895a      	ldrh	r2, [r3, #10]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	635a      	str	r2, [r3, #52]	; 0x34
 8002fae:	e01e      	b.n	8002fee <LedLightTask+0x172>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7a1b      	ldrb	r3, [r3, #8]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d107      	bne.n	8002fc8 <LedLightTask+0x14c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8959      	ldrh	r1, [r3, #10]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	6393      	str	r3, [r2, #56]	; 0x38
 8002fc6:	e012      	b.n	8002fee <LedLightTask+0x172>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7a1b      	ldrb	r3, [r3, #8]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d107      	bne.n	8002fe0 <LedLightTask+0x164>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8959      	ldrh	r1, [r3, #10]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002fde:	e006      	b.n	8002fee <LedLightTask+0x172>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8959      	ldrh	r1, [r3, #10]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	460b      	mov	r3, r1
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 8002fee:	f003 f8fd 	bl	80061ec <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]
				Instance->PwmActual--;
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
				Instance->LastTick = HAL_GetTick();
			}
		}
		break;
 8002ff8:	e1c5      	b.n	8003386 <LedLightTask+0x50a>
		else if(DOOR_CLOSED)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4860      	ldr	r0, [pc, #384]	; (8003180 <LedLightTask+0x304>)
 8002ffe:	f004 fcb7 	bl	8007970 <HAL_GPIO_ReadPin>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 81be 	beq.w	8003386 <LedLightTask+0x50a>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 0)
 800300a:	f003 f8ef 	bl	80061ec <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	8a12      	ldrh	r2, [r2, #16]
 800301a:	4293      	cmp	r3, r2
 800301c:	f240 81b3 	bls.w	8003386 <LedLightTask+0x50a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	895b      	ldrh	r3, [r3, #10]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 81ae 	beq.w	8003386 <LedLightTask+0x50a>
				Instance->PwmActual--;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	895b      	ldrh	r3, [r3, #10]
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7a1b      	ldrb	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <LedLightTask+0x1d0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	895a      	ldrh	r2, [r3, #10]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	635a      	str	r2, [r3, #52]	; 0x34
 800304a:	e01e      	b.n	800308a <LedLightTask+0x20e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7a1b      	ldrb	r3, [r3, #8]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d107      	bne.n	8003064 <LedLightTask+0x1e8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8959      	ldrh	r1, [r3, #10]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	460b      	mov	r3, r1
 8003060:	6393      	str	r3, [r2, #56]	; 0x38
 8003062:	e012      	b.n	800308a <LedLightTask+0x20e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7a1b      	ldrb	r3, [r3, #8]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d107      	bne.n	800307c <LedLightTask+0x200>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8959      	ldrh	r1, [r3, #10]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	460b      	mov	r3, r1
 8003078:	63d3      	str	r3, [r2, #60]	; 0x3c
 800307a:	e006      	b.n	800308a <LedLightTask+0x20e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8959      	ldrh	r1, [r3, #10]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	460b      	mov	r3, r1
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800308a:	f003 f8af 	bl	80061ec <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]
		break;
 8003094:	e177      	b.n	8003386 <LedLightTask+0x50a>
	case 2:
		if(Instance -> PwmActual > Instance -> PwmMax)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	895a      	ldrh	r2, [r3, #10]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	885b      	ldrh	r3, [r3, #2]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d92d      	bls.n	80030fe <LedLightTask+0x282>
			{
			Instance -> PwmActual = Instance -> PwmMax;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	885a      	ldrh	r2, [r3, #2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	815a      	strh	r2, [r3, #10]
			__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7a1b      	ldrb	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <LedLightTask+0x244>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	895a      	ldrh	r2, [r3, #10]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34
 80030be:	e01e      	b.n	80030fe <LedLightTask+0x282>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7a1b      	ldrb	r3, [r3, #8]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d107      	bne.n	80030d8 <LedLightTask+0x25c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8959      	ldrh	r1, [r3, #10]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	460b      	mov	r3, r1
 80030d4:	6393      	str	r3, [r2, #56]	; 0x38
 80030d6:	e012      	b.n	80030fe <LedLightTask+0x282>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7a1b      	ldrb	r3, [r3, #8]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d107      	bne.n	80030f0 <LedLightTask+0x274>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8959      	ldrh	r1, [r3, #10]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	460b      	mov	r3, r1
 80030ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80030ee:	e006      	b.n	80030fe <LedLightTask+0x282>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8959      	ldrh	r1, [r3, #10]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	460b      	mov	r3, r1
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
			}
		if(DOOR_OPEN)
 80030fe:	2101      	movs	r1, #1
 8003100:	481f      	ldr	r0, [pc, #124]	; (8003180 <LedLightTask+0x304>)
 8003102:	f004 fc35 	bl	8007970 <HAL_GPIO_ReadPin>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d148      	bne.n	800319e <LedLightTask+0x322>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 0)
 800310c:	f003 f86e 	bl	80061ec <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	8a12      	ldrh	r2, [r2, #16]
 800311c:	4293      	cmp	r3, r2
 800311e:	f240 8134 	bls.w	800338a <LedLightTask+0x50e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	895b      	ldrh	r3, [r3, #10]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 812f 	beq.w	800338a <LedLightTask+0x50e>
			{
				Instance->PwmActual--;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	895b      	ldrh	r3, [r3, #10]
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7a1b      	ldrb	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <LedLightTask+0x2d2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	895a      	ldrh	r2, [r3, #10]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	635a      	str	r2, [r3, #52]	; 0x34
 800314c:	e021      	b.n	8003192 <LedLightTask+0x316>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7a1b      	ldrb	r3, [r3, #8]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d107      	bne.n	8003166 <LedLightTask+0x2ea>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8959      	ldrh	r1, [r3, #10]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	460b      	mov	r3, r1
 8003162:	6393      	str	r3, [r2, #56]	; 0x38
 8003164:	e015      	b.n	8003192 <LedLightTask+0x316>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7a1b      	ldrb	r3, [r3, #8]
 800316a:	2b08      	cmp	r3, #8
 800316c:	d10a      	bne.n	8003184 <LedLightTask+0x308>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8959      	ldrh	r1, [r3, #10]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	460b      	mov	r3, r1
 800317a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800317c:	e009      	b.n	8003192 <LedLightTask+0x316>
 800317e:	bf00      	nop
 8003180:	40010800 	.word	0x40010800
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8959      	ldrh	r1, [r3, #10]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	460b      	mov	r3, r1
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 8003192:	f003 f82b 	bl	80061ec <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
				Instance->PwmActual++;
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
				Instance->LastTick = HAL_GetTick();
			}
		}
		break;
 800319c:	e0f5      	b.n	800338a <LedLightTask+0x50e>
		else if(DOOR_CLOSED)
 800319e:	2101      	movs	r1, #1
 80031a0:	487c      	ldr	r0, [pc, #496]	; (8003394 <LedLightTask+0x518>)
 80031a2:	f004 fbe5 	bl	8007970 <HAL_GPIO_ReadPin>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80ee 	beq.w	800338a <LedLightTask+0x50e>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual < Instance->PwmMax)
 80031ae:	f003 f81d 	bl	80061ec <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	8a12      	ldrh	r2, [r2, #16]
 80031be:	4293      	cmp	r3, r2
 80031c0:	f240 80e3 	bls.w	800338a <LedLightTask+0x50e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	895a      	ldrh	r2, [r3, #10]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	885b      	ldrh	r3, [r3, #2]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f080 80dc 	bcs.w	800338a <LedLightTask+0x50e>
				Instance->PwmActual++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	895b      	ldrh	r3, [r3, #10]
 80031d6:	3301      	adds	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7a1b      	ldrb	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <LedLightTask+0x378>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	895a      	ldrh	r2, [r3, #10]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
 80031f2:	e01e      	b.n	8003232 <LedLightTask+0x3b6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7a1b      	ldrb	r3, [r3, #8]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d107      	bne.n	800320c <LedLightTask+0x390>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8959      	ldrh	r1, [r3, #10]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	460b      	mov	r3, r1
 8003208:	6393      	str	r3, [r2, #56]	; 0x38
 800320a:	e012      	b.n	8003232 <LedLightTask+0x3b6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7a1b      	ldrb	r3, [r3, #8]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d107      	bne.n	8003224 <LedLightTask+0x3a8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8959      	ldrh	r1, [r3, #10]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	460b      	mov	r3, r1
 8003220:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003222:	e006      	b.n	8003232 <LedLightTask+0x3b6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8959      	ldrh	r1, [r3, #10]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	460b      	mov	r3, r1
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 8003232:	f002 ffdb 	bl	80061ec <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60da      	str	r2, [r3, #12]
		break;
 800323c:	e0a5      	b.n	800338a <LedLightTask+0x50e>
	case 3:
		if(!Instance->Direction)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7c9b      	ldrb	r3, [r3, #18]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d14a      	bne.n	80032dc <LedLightTask+0x460>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 50)
 8003246:	f002 ffd1 	bl	80061ec <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	8a12      	ldrh	r2, [r2, #16]
 8003256:	4293      	cmp	r3, r2
 8003258:	d938      	bls.n	80032cc <LedLightTask+0x450>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	895b      	ldrh	r3, [r3, #10]
 800325e:	2b32      	cmp	r3, #50	; 0x32
 8003260:	d934      	bls.n	80032cc <LedLightTask+0x450>
			{
				Instance->PwmActual--;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	895b      	ldrh	r3, [r3, #10]
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7a1b      	ldrb	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <LedLightTask+0x408>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	895a      	ldrh	r2, [r3, #10]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	635a      	str	r2, [r3, #52]	; 0x34
 8003282:	e01e      	b.n	80032c2 <LedLightTask+0x446>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7a1b      	ldrb	r3, [r3, #8]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d107      	bne.n	800329c <LedLightTask+0x420>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8959      	ldrh	r1, [r3, #10]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	460b      	mov	r3, r1
 8003298:	6393      	str	r3, [r2, #56]	; 0x38
 800329a:	e012      	b.n	80032c2 <LedLightTask+0x446>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7a1b      	ldrb	r3, [r3, #8]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d107      	bne.n	80032b4 <LedLightTask+0x438>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8959      	ldrh	r1, [r3, #10]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	460b      	mov	r3, r1
 80032b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80032b2:	e006      	b.n	80032c2 <LedLightTask+0x446>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8959      	ldrh	r1, [r3, #10]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	460b      	mov	r3, r1
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 80032c2:	f002 ff93 	bl	80061ec <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
			}
			if(Instance->PwmActual <= 50) Instance -> Direction = 1;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	895b      	ldrh	r3, [r3, #10]
 80032d0:	2b32      	cmp	r3, #50	; 0x32
 80032d2:	d85b      	bhi.n	800338c <LedLightTask+0x510>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	749a      	strb	r2, [r3, #18]
			}
			if(Instance->PwmActual >= Instance->PwmMax) Instance -> Direction = 0;
		}

	}
}
 80032da:	e057      	b.n	800338c <LedLightTask+0x510>
		else if(Instance->Direction)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7c9b      	ldrb	r3, [r3, #18]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d053      	beq.n	800338c <LedLightTask+0x510>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual <= Instance->PwmMax)
 80032e4:	f002 ff82 	bl	80061ec <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	8a12      	ldrh	r2, [r2, #16]
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d93a      	bls.n	800336e <LedLightTask+0x4f2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	895a      	ldrh	r2, [r3, #10]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	885b      	ldrh	r3, [r3, #2]
 8003300:	429a      	cmp	r2, r3
 8003302:	d834      	bhi.n	800336e <LedLightTask+0x4f2>
				Instance->PwmActual++;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	895b      	ldrh	r3, [r3, #10]
 8003308:	3301      	adds	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7a1b      	ldrb	r3, [r3, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <LedLightTask+0x4aa>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	895a      	ldrh	r2, [r3, #10]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	635a      	str	r2, [r3, #52]	; 0x34
 8003324:	e01e      	b.n	8003364 <LedLightTask+0x4e8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7a1b      	ldrb	r3, [r3, #8]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <LedLightTask+0x4c2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8959      	ldrh	r1, [r3, #10]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	460b      	mov	r3, r1
 800333a:	6393      	str	r3, [r2, #56]	; 0x38
 800333c:	e012      	b.n	8003364 <LedLightTask+0x4e8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7a1b      	ldrb	r3, [r3, #8]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d107      	bne.n	8003356 <LedLightTask+0x4da>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8959      	ldrh	r1, [r3, #10]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	460b      	mov	r3, r1
 8003352:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003354:	e006      	b.n	8003364 <LedLightTask+0x4e8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8959      	ldrh	r1, [r3, #10]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	460b      	mov	r3, r1
 8003362:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 8003364:	f002 ff42 	bl	80061ec <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60da      	str	r2, [r3, #12]
			if(Instance->PwmActual >= Instance->PwmMax) Instance -> Direction = 0;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	895a      	ldrh	r2, [r3, #10]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	885b      	ldrh	r3, [r3, #2]
 8003376:	429a      	cmp	r2, r3
 8003378:	d308      	bcc.n	800338c <LedLightTask+0x510>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	749a      	strb	r2, [r3, #18]
}
 8003380:	e004      	b.n	800338c <LedLightTask+0x510>
		break;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <LedLightTask+0x510>
		break;
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <LedLightTask+0x510>
		break;
 800338a:	bf00      	nop
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40010800 	.word	0x40010800

08003398 <LedLightInit>:

void LedLightInit(LedLightParameter_t *Instance, TIM_HandleTypeDef *htim, uint8_t Channel, uint16_t DimmerSpeed)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	460b      	mov	r3, r1
 80033a8:	71fb      	strb	r3, [r7, #7]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80bb      	strh	r3, [r7, #4]
	Instance -> htim = htim;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	605a      	str	r2, [r3, #4]
	Instance -> Channel = Channel;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	79fa      	ldrb	r2, [r7, #7]
 80033b8:	721a      	strb	r2, [r3, #8]
	Instance -> DimmerSpeed = DimmerSpeed;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88ba      	ldrh	r2, [r7, #4]
 80033be:	821a      	strh	r2, [r3, #16]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
	...

080033cc <ShowMenu>:


void ShowMenu(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, MenuNext);
 80033d0:	490b      	ldr	r1, [pc, #44]	; (8003400 <ShowMenu+0x34>)
 80033d2:	480c      	ldr	r0, [pc, #48]	; (8003404 <ShowMenu+0x38>)
 80033d4:	f7fe fe87 	bl	80020e6 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, MenuPrev);
 80033d8:	490b      	ldr	r1, [pc, #44]	; (8003408 <ShowMenu+0x3c>)
 80033da:	480a      	ldr	r0, [pc, #40]	; (8003404 <ShowMenu+0x38>)
 80033dc:	f7fe fe90 	bl	8002100 <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, MenuEnter);
 80033e0:	490a      	ldr	r1, [pc, #40]	; (800340c <ShowMenu+0x40>)
 80033e2:	480b      	ldr	r0, [pc, #44]	; (8003410 <ShowMenu+0x44>)
 80033e4:	f7fe fe7f 	bl	80020e6 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyUp, NULL);
 80033e8:	2100      	movs	r1, #0
 80033ea:	4809      	ldr	r0, [pc, #36]	; (8003410 <ShowMenu+0x44>)
 80033ec:	f7fe fe88 	bl	8002100 <ButtonRegisterRepeatCallback>
	ActualVisibleFunc = ScrollString;
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <ShowMenu+0x48>)
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <ShowMenu+0x4c>)
 80033f4:	601a      	str	r2, [r3, #0]
	MenuRefresh();
 80033f6:	f001 fa07 	bl	8004808 <MenuRefresh>
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	0800458d 	.word	0x0800458d
 8003404:	20000dc0 	.word	0x20000dc0
 8003408:	08004611 	.word	0x08004611
 800340c:	08004689 	.word	0x08004689
 8003410:	20000d94 	.word	0x20000d94
 8003414:	20001e88 	.word	0x20001e88
 8003418:	080049e1 	.word	0x080049e1

0800341c <HideMenu>:

void HideMenu(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, NULL);
 8003420:	2100      	movs	r1, #0
 8003422:	4808      	ldr	r0, [pc, #32]	; (8003444 <HideMenu+0x28>)
 8003424:	f7fe fe5f 	bl	80020e6 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, NULL);
 8003428:	2100      	movs	r1, #0
 800342a:	4806      	ldr	r0, [pc, #24]	; (8003444 <HideMenu+0x28>)
 800342c:	f7fe fe68 	bl	8002100 <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, NULL);
 8003430:	2100      	movs	r1, #0
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <HideMenu+0x2c>)
 8003434:	f7fe fe57 	bl	80020e6 <ButtonRegisterPressCallback>
	ActualVisibleFunc = NULL;
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <HideMenu+0x30>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000dc0 	.word	0x20000dc0
 8003448:	20000d94 	.word	0x20000d94
 800344c:	20001e88 	.word	0x20001e88

08003450 <ShowMeasurements>:

void ShowMeasurements(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
	HideMenu();
 8003456:	f7ff ffe1 	bl	800341c <HideMenu>
	ActualVisibleFunc = ShowMeasurements;
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <ShowMeasurements+0x98>)
 800345c:	4a23      	ldr	r2, [pc, #140]	; (80034ec <ShowMeasurements+0x9c>)
 800345e:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 8003460:	4923      	ldr	r1, [pc, #140]	; (80034f0 <ShowMeasurements+0xa0>)
 8003462:	4824      	ldr	r0, [pc, #144]	; (80034f4 <ShowMeasurements+0xa4>)
 8003464:	f7fe fe3f 	bl	80020e6 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8003468:	2000      	movs	r0, #0
 800346a:	f002 f86f 	bl	800554c <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "5V:   %.2fV", Measurements.Voltage5);
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <ShowMeasurements+0xa8>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f844 	bl	8000500 <__aeabi_f2d>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4638      	mov	r0, r7
 800347e:	491f      	ldr	r1, [pc, #124]	; (80034fc <ShowMeasurements+0xac>)
 8003480:	f00f ff5c 	bl	801333c <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 8003484:	463a      	mov	r2, r7
 8003486:	2301      	movs	r3, #1
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2301      	movs	r3, #1
 800348c:	2100      	movs	r1, #0
 800348e:	2000      	movs	r0, #0
 8003490:	f7fe f8e0 	bl	8001654 <GFX_DrawString>
	sprintf(buff, "12V: %5.2fV", Measurements.Voltage12);
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <ShowMeasurements+0xa8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f831 	bl	8000500 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4638      	mov	r0, r7
 80034a4:	4916      	ldr	r1, [pc, #88]	; (8003500 <ShowMeasurements+0xb0>)
 80034a6:	f00f ff49 	bl	801333c <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 80034aa:	463a      	mov	r2, r7
 80034ac:	2301      	movs	r3, #1
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	2301      	movs	r3, #1
 80034b2:	2110      	movs	r1, #16
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fe f8cd 	bl	8001654 <GFX_DrawString>
	sprintf(buff, "Curr: %.2fA", Measurements.Current);
 80034ba:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <ShowMeasurements+0xa8>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd f81e 	bl	8000500 <__aeabi_f2d>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4638      	mov	r0, r7
 80034ca:	490e      	ldr	r1, [pc, #56]	; (8003504 <ShowMeasurements+0xb4>)
 80034cc:	f00f ff36 	bl	801333c <siprintf>
	GFX_DrawString(0, 32, buff, WHITE, 1);
 80034d0:	463a      	mov	r2, r7
 80034d2:	2301      	movs	r3, #1
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2301      	movs	r3, #1
 80034d8:	2120      	movs	r1, #32
 80034da:	2000      	movs	r0, #0
 80034dc:	f7fe f8ba 	bl	8001654 <GFX_DrawString>
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20001e88 	.word	0x20001e88
 80034ec:	08003451 	.word	0x08003451
 80034f0:	080033cd 	.word	0x080033cd
 80034f4:	20000dc0 	.word	0x20000dc0
 80034f8:	20001e48 	.word	0x20001e48
 80034fc:	08015a10 	.word	0x08015a10
 8003500:	08015a1c 	.word	0x08015a1c
 8003504:	08015a28 	.word	0x08015a28

08003508 <ShowTemperature>:

void ShowTemperature(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af02      	add	r7, sp, #8
	HideMenu();
 800350e:	f7ff ff85 	bl	800341c <HideMenu>
	ActualVisibleFunc = ShowTemperature;
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <ShowTemperature+0x74>)
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <ShowTemperature+0x78>)
 8003516:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 8003518:	491a      	ldr	r1, [pc, #104]	; (8003584 <ShowTemperature+0x7c>)
 800351a:	481b      	ldr	r0, [pc, #108]	; (8003588 <ShowTemperature+0x80>)
 800351c:	f7fe fde3 	bl	80020e6 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8003520:	2000      	movs	r0, #0
 8003522:	f002 f813 	bl	800554c <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "MCU: %.2fC", Measurements.InternalTemperature);
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <ShowTemperature+0x84>)
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fc ffe8 	bl	8000500 <__aeabi_f2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4638      	mov	r0, r7
 8003536:	4916      	ldr	r1, [pc, #88]	; (8003590 <ShowTemperature+0x88>)
 8003538:	f00f ff00 	bl	801333c <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 800353c:	463a      	mov	r2, r7
 800353e:	2301      	movs	r3, #1
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2301      	movs	r3, #1
 8003544:	2100      	movs	r1, #0
 8003546:	2000      	movs	r0, #0
 8003548:	f7fe f884 	bl	8001654 <GFX_DrawString>
	sprintf(buff, "Amb: %.2fC", Temperature);
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <ShowTemperature+0x8c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fc ffd5 	bl	8000500 <__aeabi_f2d>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4638      	mov	r0, r7
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <ShowTemperature+0x90>)
 800355e:	f00f feed 	bl	801333c <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 8003562:	463a      	mov	r2, r7
 8003564:	2301      	movs	r3, #1
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2301      	movs	r3, #1
 800356a:	2110      	movs	r1, #16
 800356c:	2000      	movs	r0, #0
 800356e:	f7fe f871 	bl	8001654 <GFX_DrawString>
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20001e88 	.word	0x20001e88
 8003580:	08003509 	.word	0x08003509
 8003584:	080033cd 	.word	0x080033cd
 8003588:	20000dc0 	.word	0x20000dc0
 800358c:	20001e48 	.word	0x20001e48
 8003590:	08015a34 	.word	0x08015a34
 8003594:	20001e1c 	.word	0x20001e1c
 8003598:	08015a40 	.word	0x08015a40

0800359c <Show8bitIndicators>:

void Show8bitIndicators(uint8_t Data, uint8_t NameNumberStart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	4603      	mov	r3, r0
 80035a4:	460a      	mov	r2, r1
 80035a6:	71fb      	strb	r3, [r7, #7]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71bb      	strb	r3, [r7, #6]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 80035ac:	4941      	ldr	r1, [pc, #260]	; (80036b4 <Show8bitIndicators+0x118>)
 80035ae:	4842      	ldr	r0, [pc, #264]	; (80036b8 <Show8bitIndicators+0x11c>)
 80035b0:	f7fe fd99 	bl	80020e6 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 80035b4:	2000      	movs	r0, #0
 80035b6:	f001 ffc9 	bl	800554c <SSD1306_Clear>

	char buff[4];
	GFX_SetFont(font_8x5);
 80035ba:	4840      	ldr	r0, [pc, #256]	; (80036bc <Show8bitIndicators+0x120>)
 80035bc:	f7fd ff70 	bl	80014a0 <GFX_SetFont>
	GFX_SetFontSize(1);
 80035c0:	2001      	movs	r0, #1
 80035c2:	f7fd ff7b 	bl	80014bc <GFX_SetFontSize>
	for(uint8_t i=0; i<=7; i++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
 80035ca:	e06a      	b.n	80036a2 <Show8bitIndicators+0x106>
	{
		sprintf(buff, "%u.", NameNumberStart + i);
 80035cc:	79ba      	ldrb	r2, [r7, #6]
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	441a      	add	r2, r3
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	493a      	ldr	r1, [pc, #232]	; (80036c0 <Show8bitIndicators+0x124>)
 80035d8:	4618      	mov	r0, r3
 80035da:	f00f feaf 	bl	801333c <siprintf>
		uint8_t y = 20;
 80035de:	2314      	movs	r3, #20
 80035e0:	73bb      	strb	r3, [r7, #14]
		uint8_t y_name = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	737b      	strb	r3, [r7, #13]
		if(i>3)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d903      	bls.n	80035f4 <Show8bitIndicators+0x58>
		{
			y = 43;
 80035ec:	232b      	movs	r3, #43	; 0x2b
 80035ee:	73bb      	strb	r3, [r7, #14]
			y_name = 57;
 80035f0:	2339      	movs	r3, #57	; 0x39
 80035f2:	737b      	strb	r3, [r7, #13]
		}
		GFX_DrawString(15 + (30 * ((i<4)?i:i-4)), y_name, buff, WHITE, 1);
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d807      	bhi.n	800360a <Show8bitIndicators+0x6e>
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	f103 000f 	add.w	r0, r3, #15
 8003608:	e007      	b.n	800361a <Show8bitIndicators+0x7e>
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	1f1a      	subs	r2, r3, #4
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	f103 000f 	add.w	r0, r3, #15
 800361a:	7b79      	ldrb	r1, [r7, #13]
 800361c:	f107 0208 	add.w	r2, r7, #8
 8003620:	2301      	movs	r3, #1
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	f7fe f815 	bl	8001654 <GFX_DrawString>
		if((Data>>i)&1)
 800362a:	79fa      	ldrb	r2, [r7, #7]
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	fa42 f303 	asr.w	r3, r2, r3
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <Show8bitIndicators+0xd0>
		{
			GFX_DrawFillCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d807      	bhi.n	8003650 <Show8bitIndicators+0xb4>
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	f103 0014 	add.w	r0, r3, #20
 800364e:	e007      	b.n	8003660 <Show8bitIndicators+0xc4>
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	1f1a      	subs	r2, r3, #4
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	f103 0014 	add.w	r0, r3, #20
 8003660:	7bb9      	ldrb	r1, [r7, #14]
 8003662:	2301      	movs	r3, #1
 8003664:	220a      	movs	r2, #10
 8003666:	f7fe fafa 	bl	8001c5e <GFX_DrawFillCircle>
 800366a:	e017      	b.n	800369c <Show8bitIndicators+0x100>
		}
		else
		{
			GFX_DrawCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d807      	bhi.n	8003682 <Show8bitIndicators+0xe6>
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	f103 0014 	add.w	r0, r3, #20
 8003680:	e007      	b.n	8003692 <Show8bitIndicators+0xf6>
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	1f1a      	subs	r2, r3, #4
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	f103 0014 	add.w	r0, r3, #20
 8003692:	7bb9      	ldrb	r1, [r7, #14]
 8003694:	2301      	movs	r3, #1
 8003696:	220a      	movs	r2, #10
 8003698:	f7fe f944 	bl	8001924 <GFX_DrawCircle>
	for(uint8_t i=0; i<=7; i++)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3301      	adds	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	d991      	bls.n	80035cc <Show8bitIndicators+0x30>
		}


	}
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	080033cd 	.word	0x080033cd
 80036b8:	20000dc0 	.word	0x20000dc0
 80036bc:	08015c70 	.word	0x08015c70
 80036c0:	08015a4c 	.word	0x08015a4c

080036c4 <ShowOut0to7>:

void ShowOut0to7(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	HideMenu();
 80036c8:	f7ff fea8 	bl	800341c <HideMenu>
	ActualVisibleFunc = ShowOut0to7;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <ShowOut0to7+0x20>)
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <ShowOut0to7+0x24>)
 80036d0:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(GPIOE -> ODR, 0);
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <ShowOut0to7+0x28>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff5e 	bl	800359c <Show8bitIndicators>
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20001e88 	.word	0x20001e88
 80036e8:	080036c5 	.word	0x080036c5
 80036ec:	40011800 	.word	0x40011800

080036f0 <ShowOut8to15>:

void ShowOut8to15(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
	HideMenu();
 80036f4:	f7ff fe92 	bl	800341c <HideMenu>
	ActualVisibleFunc = ShowOut8to15;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <ShowOut8to15+0x24>)
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <ShowOut8to15+0x28>)
 80036fc:	601a      	str	r2, [r3, #0]
	Show8bitIndicators((GPIOE -> ODR) >> 8, 8);
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <ShowOut8to15+0x2c>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2108      	movs	r1, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff47 	bl	800359c <Show8bitIndicators>
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20001e88 	.word	0x20001e88
 8003718:	080036f1 	.word	0x080036f1
 800371c:	40011800 	.word	0x40011800

08003720 <ShowIn0to7>:

void ShowIn0to7(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	HideMenu();
 8003724:	f7ff fe7a 	bl	800341c <HideMenu>
	ActualVisibleFunc = ShowIn0to7;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <ShowIn0to7+0x24>)
 800372a:	4a07      	ldr	r2, [pc, #28]	; (8003748 <ShowIn0to7+0x28>)
 800372c:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~(GPIOG -> IDR), 0);
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <ShowIn0to7+0x2c>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ff2e 	bl	800359c <Show8bitIndicators>
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20001e88 	.word	0x20001e88
 8003748:	08003721 	.word	0x08003721
 800374c:	40012000 	.word	0x40012000

08003750 <ShowIn8to15>:

void ShowIn8to15(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
	HideMenu();
 8003754:	f7ff fe62 	bl	800341c <HideMenu>
	ActualVisibleFunc = ShowIn8to15;
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <ShowIn8to15+0x28>)
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <ShowIn8to15+0x2c>)
 800375c:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~((GPIOG -> IDR) >> 8), 8);
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <ShowIn8to15+0x30>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	b2db      	uxtb	r3, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2108      	movs	r1, #8
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff15 	bl	800359c <Show8bitIndicators>
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20001e88 	.word	0x20001e88
 800377c:	08003751 	.word	0x08003751
 8003780:	40012000 	.word	0x40012000

08003784 <ShowPWMsetMenu>:

void ShowPWMsetMenu(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af02      	add	r7, sp, #8
	char buff[6];
	uint8_t Length;
	HideMenu();
 800378a:	f7ff fe47 	bl	800341c <HideMenu>
	ActualVisibleFunc = ShowPWMsetMenu;
 800378e:	4b48      	ldr	r3, [pc, #288]	; (80038b0 <ShowPWMsetMenu+0x12c>)
 8003790:	4a48      	ldr	r2, [pc, #288]	; (80038b4 <ShowPWMsetMenu+0x130>)
 8003792:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, PwmSetPtrIncrement);
 8003794:	4948      	ldr	r1, [pc, #288]	; (80038b8 <ShowPWMsetMenu+0x134>)
 8003796:	4849      	ldr	r0, [pc, #292]	; (80038bc <ShowPWMsetMenu+0x138>)
 8003798:	f7fe fca5 	bl	80020e6 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 800379c:	2000      	movs	r0, #0
 800379e:	f001 fed5 	bl	800554c <SSD1306_Clear>

	for(uint8_t i = 0; i<4; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	71fb      	strb	r3, [r7, #7]
 80037a6:	e033      	b.n	8003810 <ShowPWMsetMenu+0x8c>
	{
		Length = sprintf(buff, "%u", __HAL_TIM_GET_COMPARE(&htim4, i * 4));
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <ShowPWMsetMenu+0x32>
 80037ae:	4b44      	ldr	r3, [pc, #272]	; (80038c0 <ShowPWMsetMenu+0x13c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	e012      	b.n	80037dc <ShowPWMsetMenu+0x58>
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d103      	bne.n	80037c6 <ShowPWMsetMenu+0x42>
 80037be:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <ShowPWMsetMenu+0x13c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	e00a      	b.n	80037dc <ShowPWMsetMenu+0x58>
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d103      	bne.n	80037d6 <ShowPWMsetMenu+0x52>
 80037ce:	4b3c      	ldr	r3, [pc, #240]	; (80038c0 <ShowPWMsetMenu+0x13c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	e002      	b.n	80037dc <ShowPWMsetMenu+0x58>
 80037d6:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <ShowPWMsetMenu+0x13c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	4638      	mov	r0, r7
 80037de:	461a      	mov	r2, r3
 80037e0:	4938      	ldr	r1, [pc, #224]	; (80038c4 <ShowPWMsetMenu+0x140>)
 80037e2:	f00f fdab 	bl	801333c <siprintf>
 80037e6:	4603      	mov	r3, r0
 80037e8:	71bb      	strb	r3, [r7, #6]
		GFX_DrawString(64-2 - (Length*5), 16*i, buff, WHITE, 1);
 80037ea:	79ba      	ldrb	r2, [r7, #6]
 80037ec:	4613      	mov	r3, r2
 80037ee:	079b      	lsls	r3, r3, #30
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	0119      	lsls	r1, r3, #4
 80037fe:	463a      	mov	r2, r7
 8003800:	2301      	movs	r3, #1
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2301      	movs	r3, #1
 8003806:	f7fd ff25 	bl	8001654 <GFX_DrawString>
	for(uint8_t i = 0; i<4; i++)
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	3301      	adds	r3, #1
 800380e:	71fb      	strb	r3, [r7, #7]
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d9c8      	bls.n	80037a8 <ShowPWMsetMenu+0x24>
	}

	if(PwmSetPtr%2 && PwmSetPtr!=9)
 8003816:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <ShowPWMsetMenu+0x144>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d018      	beq.n	8003856 <ShowPWMsetMenu+0xd2>
 8003824:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <ShowPWMsetMenu+0x144>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b09      	cmp	r3, #9
 800382a:	d014      	beq.n	8003856 <ShowPWMsetMenu+0xd2>
	{
		ButtonRegisterPressCallback(&KeyUp, PwmSetDecrement);
 800382c:	4927      	ldr	r1, [pc, #156]	; (80038cc <ShowPWMsetMenu+0x148>)
 800382e:	4828      	ldr	r0, [pc, #160]	; (80038d0 <ShowPWMsetMenu+0x14c>)
 8003830:	f7fe fc59 	bl	80020e6 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, PwmSetDecrement25);
 8003834:	4927      	ldr	r1, [pc, #156]	; (80038d4 <ShowPWMsetMenu+0x150>)
 8003836:	4826      	ldr	r0, [pc, #152]	; (80038d0 <ShowPWMsetMenu+0x14c>)
 8003838:	f7fe fc62 	bl	8002100 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(25, 16*(PwmSetPtr/2), '-', WHITE, 1);
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <ShowPWMsetMenu+0x144>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	0119      	lsls	r1, r3, #4
 8003846:	2301      	movs	r3, #1
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2301      	movs	r3, #1
 800384c:	222d      	movs	r2, #45	; 0x2d
 800384e:	2019      	movs	r0, #25
 8003850:	f7fd fe46 	bl	80014e0 <GFX_DrawChar>
	else
	{
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
		GFX_DrawString(0, 47, "<<", WHITE, 1);
	}
}
 8003854:	e028      	b.n	80038a8 <ShowPWMsetMenu+0x124>
	else if(!(PwmSetPtr%2))
 8003856:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <ShowPWMsetMenu+0x144>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d115      	bne.n	8003890 <ShowPWMsetMenu+0x10c>
		ButtonRegisterPressCallback(&KeyUp, PwmSetIncrement);
 8003864:	491c      	ldr	r1, [pc, #112]	; (80038d8 <ShowPWMsetMenu+0x154>)
 8003866:	481a      	ldr	r0, [pc, #104]	; (80038d0 <ShowPWMsetMenu+0x14c>)
 8003868:	f7fe fc3d 	bl	80020e6 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, PwmSetIncrement25);
 800386c:	491b      	ldr	r1, [pc, #108]	; (80038dc <ShowPWMsetMenu+0x158>)
 800386e:	4818      	ldr	r0, [pc, #96]	; (80038d0 <ShowPWMsetMenu+0x14c>)
 8003870:	f7fe fc46 	bl	8002100 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(91, 16*((PwmSetPtr/2)-1), '+', WHITE, 1);
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <ShowPWMsetMenu+0x144>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	0119      	lsls	r1, r3, #4
 8003880:	2301      	movs	r3, #1
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2301      	movs	r3, #1
 8003886:	222b      	movs	r2, #43	; 0x2b
 8003888:	205b      	movs	r0, #91	; 0x5b
 800388a:	f7fd fe29 	bl	80014e0 <GFX_DrawChar>
}
 800388e:	e00b      	b.n	80038a8 <ShowPWMsetMenu+0x124>
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
 8003890:	4913      	ldr	r1, [pc, #76]	; (80038e0 <ShowPWMsetMenu+0x15c>)
 8003892:	480f      	ldr	r0, [pc, #60]	; (80038d0 <ShowPWMsetMenu+0x14c>)
 8003894:	f7fe fc27 	bl	80020e6 <ButtonRegisterPressCallback>
		GFX_DrawString(0, 47, "<<", WHITE, 1);
 8003898:	2301      	movs	r3, #1
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2301      	movs	r3, #1
 800389e:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <ShowPWMsetMenu+0x160>)
 80038a0:	212f      	movs	r1, #47	; 0x2f
 80038a2:	2000      	movs	r0, #0
 80038a4:	f7fd fed6 	bl	8001654 <GFX_DrawString>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20001e88 	.word	0x20001e88
 80038b4:	08003785 	.word	0x08003785
 80038b8:	080038e9 	.word	0x080038e9
 80038bc:	20000dc0 	.word	0x20000dc0
 80038c0:	20002738 	.word	0x20002738
 80038c4:	08015a50 	.word	0x08015a50
 80038c8:	20000001 	.word	0x20000001
 80038cc:	08003995 	.word	0x08003995
 80038d0:	20000d94 	.word	0x20000d94
 80038d4:	08003a99 	.word	0x08003a99
 80038d8:	08003915 	.word	0x08003915
 80038dc:	08003a19 	.word	0x08003a19
 80038e0:	080033cd 	.word	0x080033cd
 80038e4:	08015a54 	.word	0x08015a54

080038e8 <PwmSetPtrIncrement>:

	void PwmSetPtrIncrement(void)
	{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
		PwmSetPtr++;
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <PwmSetPtrIncrement+0x28>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <PwmSetPtrIncrement+0x28>)
 80038f6:	701a      	strb	r2, [r3, #0]
		if(PwmSetPtr>=10)PwmSetPtr=1;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <PwmSetPtrIncrement+0x28>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b09      	cmp	r3, #9
 80038fe:	d902      	bls.n	8003906 <PwmSetPtrIncrement+0x1e>
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <PwmSetPtrIncrement+0x28>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
	}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000001 	.word	0x20000001

08003914 <PwmSetIncrement>:
	void PwmSetIncrement(void)
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2;
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <PwmSetIncrement+0x78>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1) * 4);
 8003922:	797b      	ldrb	r3, [r7, #5]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d104      	bne.n	8003932 <PwmSetIncrement+0x1e>
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <PwmSetIncrement+0x7c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	b29b      	uxth	r3, r3
 8003930:	e017      	b.n	8003962 <PwmSetIncrement+0x4e>
 8003932:	797b      	ldrb	r3, [r7, #5]
 8003934:	3b01      	subs	r3, #1
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	2b04      	cmp	r3, #4
 800393a:	d104      	bne.n	8003946 <PwmSetIncrement+0x32>
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <PwmSetIncrement+0x7c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	b29b      	uxth	r3, r3
 8003944:	e00d      	b.n	8003962 <PwmSetIncrement+0x4e>
 8003946:	797b      	ldrb	r3, [r7, #5]
 8003948:	3b01      	subs	r3, #1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	2b08      	cmp	r3, #8
 800394e:	d104      	bne.n	800395a <PwmSetIncrement+0x46>
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <PwmSetIncrement+0x7c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	b29b      	uxth	r3, r3
 8003958:	e003      	b.n	8003962 <PwmSetIncrement+0x4e>
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <PwmSetIncrement+0x7c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	b29b      	uxth	r3, r3
 8003962:	80fb      	strh	r3, [r7, #6]

		PwmValue += 1;
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	3301      	adds	r3, #1
 8003968:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 0;
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003970:	d901      	bls.n	8003976 <PwmSetIncrement+0x62>
 8003972:	2300      	movs	r3, #0
 8003974:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	797b      	ldrb	r3, [r7, #5]
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f9fd 	bl	8002d7c <PwmChannelSet>
	}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000001 	.word	0x20000001
 8003990:	20002738 	.word	0x20002738

08003994 <PwmSetDecrement>:
	void PwmSetDecrement(void)
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2 + 1;
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <PwmSetDecrement+0x7c>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1)*4);
 80039a6:	797b      	ldrb	r3, [r7, #5]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d104      	bne.n	80039b6 <PwmSetDecrement+0x22>
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <PwmSetDecrement+0x80>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	e017      	b.n	80039e6 <PwmSetDecrement+0x52>
 80039b6:	797b      	ldrb	r3, [r7, #5]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <PwmSetDecrement+0x36>
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <PwmSetDecrement+0x80>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	e00d      	b.n	80039e6 <PwmSetDecrement+0x52>
 80039ca:	797b      	ldrb	r3, [r7, #5]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d104      	bne.n	80039de <PwmSetDecrement+0x4a>
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <PwmSetDecrement+0x80>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	b29b      	uxth	r3, r3
 80039dc:	e003      	b.n	80039e6 <PwmSetDecrement+0x52>
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <PwmSetDecrement+0x80>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	80fb      	strh	r3, [r7, #6]

		PwmValue -= 1;
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 1000;
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f4:	d902      	bls.n	80039fc <PwmSetDecrement+0x68>
 80039f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039fa:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	797b      	ldrb	r3, [r7, #5]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f9ba 	bl	8002d7c <PwmChannelSet>
	}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000001 	.word	0x20000001
 8003a14:	20002738 	.word	0x20002738

08003a18 <PwmSetIncrement25>:
	void PwmSetIncrement25(void)
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2;
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <PwmSetIncrement25+0x78>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1) * 4);
 8003a26:	797b      	ldrb	r3, [r7, #5]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d104      	bne.n	8003a36 <PwmSetIncrement25+0x1e>
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <PwmSetIncrement25+0x7c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	e017      	b.n	8003a66 <PwmSetIncrement25+0x4e>
 8003a36:	797b      	ldrb	r3, [r7, #5]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d104      	bne.n	8003a4a <PwmSetIncrement25+0x32>
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <PwmSetIncrement25+0x7c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	e00d      	b.n	8003a66 <PwmSetIncrement25+0x4e>
 8003a4a:	797b      	ldrb	r3, [r7, #5]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d104      	bne.n	8003a5e <PwmSetIncrement25+0x46>
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <PwmSetIncrement25+0x7c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	e003      	b.n	8003a66 <PwmSetIncrement25+0x4e>
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <PwmSetIncrement25+0x7c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	80fb      	strh	r3, [r7, #6]

		PwmValue += 25;
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	3319      	adds	r3, #25
 8003a6c:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 0;
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a74:	d901      	bls.n	8003a7a <PwmSetIncrement25+0x62>
 8003a76:	2300      	movs	r3, #0
 8003a78:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	797b      	ldrb	r3, [r7, #5]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff f97b 	bl	8002d7c <PwmChannelSet>
	}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000001 	.word	0x20000001
 8003a94:	20002738 	.word	0x20002738

08003a98 <PwmSetDecrement25>:
	void PwmSetDecrement25(void)
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2 + 1;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <PwmSetDecrement25+0x7c>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1)*4);
 8003aaa:	797b      	ldrb	r3, [r7, #5]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d104      	bne.n	8003aba <PwmSetDecrement25+0x22>
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <PwmSetDecrement25+0x80>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	e017      	b.n	8003aea <PwmSetDecrement25+0x52>
 8003aba:	797b      	ldrb	r3, [r7, #5]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d104      	bne.n	8003ace <PwmSetDecrement25+0x36>
 8003ac4:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <PwmSetDecrement25+0x80>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	e00d      	b.n	8003aea <PwmSetDecrement25+0x52>
 8003ace:	797b      	ldrb	r3, [r7, #5]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d104      	bne.n	8003ae2 <PwmSetDecrement25+0x4a>
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <PwmSetDecrement25+0x80>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	e003      	b.n	8003aea <PwmSetDecrement25+0x52>
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <PwmSetDecrement25+0x80>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	80fb      	strh	r3, [r7, #6]

		PwmValue -= 25;
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	3b19      	subs	r3, #25
 8003af0:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 1000;
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003af8:	d902      	bls.n	8003b00 <PwmSetDecrement25+0x68>
 8003afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003afe:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	797b      	ldrb	r3, [r7, #5]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff f938 	bl	8002d7c <PwmChannelSet>
	}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000001 	.word	0x20000001
 8003b18:	20002738 	.word	0x20002738

08003b1c <ShowLedLightParam>:

void ShowLedLightParam(LedLightParameter_t *Instance)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	6078      	str	r0, [r7, #4]
	char buff[6];
	uint8_t Length;

	ButtonRegisterPressCallback(&KeyDown, LedLightParamPtrIncrement);
 8003b24:	494d      	ldr	r1, [pc, #308]	; (8003c5c <ShowLedLightParam+0x140>)
 8003b26:	484e      	ldr	r0, [pc, #312]	; (8003c60 <ShowLedLightParam+0x144>)
 8003b28:	f7fe fadd 	bl	80020e6 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f001 fd0d 	bl	800554c <SSD1306_Clear>

	GFX_DrawString(0, 0, "PWM", WHITE, 1);
 8003b32:	2301      	movs	r3, #1
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	2301      	movs	r3, #1
 8003b38:	4a4a      	ldr	r2, [pc, #296]	; (8003c64 <ShowLedLightParam+0x148>)
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f7fd fd89 	bl	8001654 <GFX_DrawString>
	GFX_DrawString(0, 32, "Speed", WHITE, 1);
 8003b42:	2301      	movs	r3, #1
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2301      	movs	r3, #1
 8003b48:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <ShowLedLightParam+0x14c>)
 8003b4a:	2120      	movs	r1, #32
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f7fd fd81 	bl	8001654 <GFX_DrawString>
	Length = sprintf(buff, "%u", Instance ->PwmMax);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	885b      	ldrh	r3, [r3, #2]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f107 0308 	add.w	r3, r7, #8
 8003b5c:	4943      	ldr	r1, [pc, #268]	; (8003c6c <ShowLedLightParam+0x150>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f00f fbec 	bl	801333c <siprintf>
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]
	GFX_DrawString(64-2 - (Length*5), 16, buff, WHITE, 1);
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	079b      	lsls	r3, r3, #30
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8003b78:	f107 0208 	add.w	r2, r7, #8
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2301      	movs	r3, #1
 8003b82:	2110      	movs	r1, #16
 8003b84:	f7fd fd66 	bl	8001654 <GFX_DrawString>
	Length = sprintf(buff, "%u", Instance ->DimmerSpeed);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8a1b      	ldrh	r3, [r3, #16]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	4936      	ldr	r1, [pc, #216]	; (8003c6c <ShowLedLightParam+0x150>)
 8003b94:	4618      	mov	r0, r3
 8003b96:	f00f fbd1 	bl	801333c <siprintf>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]
	GFX_DrawString(64-2 - (Length*5), 48, buff, WHITE, 1);
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	079b      	lsls	r3, r3, #30
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8003bae:	f107 0208 	add.w	r2, r7, #8
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	2130      	movs	r1, #48	; 0x30
 8003bba:	f7fd fd4b 	bl	8001654 <GFX_DrawString>

	if(LedParamSetPtr%2 && LedParamSetPtr!=5)
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	; (8003c70 <ShowLedLightParam+0x154>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <ShowLedLightParam+0xde>
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <ShowLedLightParam+0x154>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	d012      	beq.n	8003bfa <ShowLedLightParam+0xde>
	{
		ButtonRegisterPressCallback(&KeyUp, LedLightParamDecrement);
 8003bd4:	4927      	ldr	r1, [pc, #156]	; (8003c74 <ShowLedLightParam+0x158>)
 8003bd6:	4828      	ldr	r0, [pc, #160]	; (8003c78 <ShowLedLightParam+0x15c>)
 8003bd8:	f7fe fa85 	bl	80020e6 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, LedLightParamDecrement25);
 8003bdc:	4927      	ldr	r1, [pc, #156]	; (8003c7c <ShowLedLightParam+0x160>)
 8003bde:	4826      	ldr	r0, [pc, #152]	; (8003c78 <ShowLedLightParam+0x15c>)
 8003be0:	f7fe fa8e 	bl	8002100 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(25, 16*LedParamSetPtr, '-', WHITE, 1);
 8003be4:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <ShowLedLightParam+0x154>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	0119      	lsls	r1, r3, #4
 8003bea:	2301      	movs	r3, #1
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	222d      	movs	r2, #45	; 0x2d
 8003bf2:	2019      	movs	r0, #25
 8003bf4:	f7fd fc74 	bl	80014e0 <GFX_DrawChar>
 8003bf8:	e02b      	b.n	8003c52 <ShowLedLightParam+0x136>
	}
	else if(!(LedParamSetPtr%2)&& LedParamSetPtr!=5)
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <ShowLedLightParam+0x154>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d117      	bne.n	8003c38 <ShowLedLightParam+0x11c>
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <ShowLedLightParam+0x154>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d013      	beq.n	8003c38 <ShowLedLightParam+0x11c>
	{
		ButtonRegisterPressCallback(&KeyUp, LedLightParamIncrement);
 8003c10:	491b      	ldr	r1, [pc, #108]	; (8003c80 <ShowLedLightParam+0x164>)
 8003c12:	4819      	ldr	r0, [pc, #100]	; (8003c78 <ShowLedLightParam+0x15c>)
 8003c14:	f7fe fa67 	bl	80020e6 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, LedLightParamIncrement25);
 8003c18:	491a      	ldr	r1, [pc, #104]	; (8003c84 <ShowLedLightParam+0x168>)
 8003c1a:	4817      	ldr	r0, [pc, #92]	; (8003c78 <ShowLedLightParam+0x15c>)
 8003c1c:	f7fe fa70 	bl	8002100 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(91, 16*(LedParamSetPtr-1), '+', WHITE, 1);
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <ShowLedLightParam+0x154>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	0119      	lsls	r1, r3, #4
 8003c28:	2301      	movs	r3, #1
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	222b      	movs	r2, #43	; 0x2b
 8003c30:	205b      	movs	r0, #91	; 0x5b
 8003c32:	f7fd fc55 	bl	80014e0 <GFX_DrawChar>
 8003c36:	e00c      	b.n	8003c52 <ShowLedLightParam+0x136>
	}
	else
	{
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
 8003c38:	4913      	ldr	r1, [pc, #76]	; (8003c88 <ShowLedLightParam+0x16c>)
 8003c3a:	480f      	ldr	r0, [pc, #60]	; (8003c78 <ShowLedLightParam+0x15c>)
 8003c3c:	f7fe fa53 	bl	80020e6 <ButtonRegisterPressCallback>
		GFX_DrawString(0, 47, "<<", WHITE, 1);
 8003c40:	2301      	movs	r3, #1
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2301      	movs	r3, #1
 8003c46:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <ShowLedLightParam+0x170>)
 8003c48:	212f      	movs	r1, #47	; 0x2f
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fd fd02 	bl	8001654 <GFX_DrawString>
	}
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	20000dc0 	.word	0x20000dc0
 8003c64:	08015a58 	.word	0x08015a58
 8003c68:	08015a5c 	.word	0x08015a5c
 8003c6c:	08015a50 	.word	0x08015a50
 8003c70:	20000002 	.word	0x20000002
 8003c74:	08003da5 	.word	0x08003da5
 8003c78:	20000d94 	.word	0x20000d94
 8003c7c:	08003e19 	.word	0x08003e19
 8003c80:	08003cbd 	.word	0x08003cbd
 8003c84:	08003d2d 	.word	0x08003d2d
 8003c88:	080033cd 	.word	0x080033cd
 8003c8c:	08015a54 	.word	0x08015a54

08003c90 <LedLightParamPtrIncrement>:
	void LedLightParamPtrIncrement(void)
	{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
		LedParamSetPtr++;
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <LedLightParamPtrIncrement+0x28>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <LedLightParamPtrIncrement+0x28>)
 8003c9e:	701a      	strb	r2, [r3, #0]
		if(LedParamSetPtr >= 6)
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <LedLightParamPtrIncrement+0x28>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d902      	bls.n	8003cae <LedLightParamPtrIncrement+0x1e>
		{
			LedParamSetPtr = 1;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <LedLightParamPtrIncrement+0x28>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
		}
	}
 8003cae:	bf00      	nop
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000002 	.word	0x20000002

08003cbc <LedLightParamIncrement>:
	void LedLightParamIncrement(void)
	{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
		switch(LedParamSetPtr/2)
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <LedLightParamIncrement+0x68>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d002      	beq.n	8003cd2 <LedLightParamIncrement+0x16>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d011      	beq.n	8003cf4 <LedLightParamIncrement+0x38>
		case 2:
			LedLightActualEdit -> DimmerSpeed++;
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
			break;
		}
	}
 8003cd0:	e024      	b.n	8003d1c <LedLightParamIncrement+0x60>
			LedLightActualEdit -> PwmMax++;
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <LedLightParamIncrement+0x6c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	885a      	ldrh	r2, [r3, #2]
 8003cd8:	3201      	adds	r2, #1
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 0;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <LedLightParamIncrement+0x6c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	885b      	ldrh	r3, [r3, #2]
 8003ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce8:	d915      	bls.n	8003d16 <LedLightParamIncrement+0x5a>
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <LedLightParamIncrement+0x6c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	805a      	strh	r2, [r3, #2]
			break;
 8003cf2:	e010      	b.n	8003d16 <LedLightParamIncrement+0x5a>
			LedLightActualEdit -> DimmerSpeed++;
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <LedLightParamIncrement+0x6c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	8a1a      	ldrh	r2, [r3, #16]
 8003cfa:	3201      	adds	r2, #1
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <LedLightParamIncrement+0x6c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	8a1b      	ldrh	r3, [r3, #16]
 8003d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0a:	d906      	bls.n	8003d1a <LedLightParamIncrement+0x5e>
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <LedLightParamIncrement+0x6c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	821a      	strh	r2, [r3, #16]
			break;
 8003d14:	e001      	b.n	8003d1a <LedLightParamIncrement+0x5e>
			break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <LedLightParamIncrement+0x60>
			break;
 8003d1a:	bf00      	nop
	}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	20000002 	.word	0x20000002
 8003d28:	20001e40 	.word	0x20001e40

08003d2c <LedLightParamIncrement25>:
	void LedLightParamIncrement25(void)
	{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
		switch(LedParamSetPtr/2)
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <LedLightParamIncrement25+0x70>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d002      	beq.n	8003d42 <LedLightParamIncrement25+0x16>
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d013      	beq.n	8003d68 <LedLightParamIncrement25+0x3c>
		case 2:
			LedLightActualEdit -> DimmerSpeed += 25;
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
			break;
		}
	}
 8003d40:	e028      	b.n	8003d94 <LedLightParamIncrement25+0x68>
			LedLightActualEdit -> PwmMax += 25;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	885a      	ldrh	r2, [r3, #2]
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3219      	adds	r2, #25
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 0;
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	885b      	ldrh	r3, [r3, #2]
 8003d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d5c:	d917      	bls.n	8003d8e <LedLightParamIncrement25+0x62>
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	805a      	strh	r2, [r3, #2]
			break;
 8003d66:	e012      	b.n	8003d8e <LedLightParamIncrement25+0x62>
			LedLightActualEdit -> DimmerSpeed += 25;
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	8a1a      	ldrh	r2, [r3, #16]
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3219      	adds	r2, #25
 8003d74:	b292      	uxth	r2, r2
 8003d76:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	8a1b      	ldrh	r3, [r3, #16]
 8003d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d82:	d906      	bls.n	8003d92 <LedLightParamIncrement25+0x66>
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <LedLightParamIncrement25+0x74>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	821a      	strh	r2, [r3, #16]
			break;
 8003d8c:	e001      	b.n	8003d92 <LedLightParamIncrement25+0x66>
			break;
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <LedLightParamIncrement25+0x68>
			break;
 8003d92:	bf00      	nop
	}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	20000002 	.word	0x20000002
 8003da0:	20001e40 	.word	0x20001e40

08003da4 <LedLightParamDecrement>:
	void LedLightParamDecrement(void)
	{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
		switch((LedParamSetPtr/2)+1)
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <LedLightParamDecrement+0x6c>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d002      	beq.n	8003dbc <LedLightParamDecrement+0x18>
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d012      	beq.n	8003de0 <LedLightParamDecrement+0x3c>
			break;
		case 2:
			LedLightActualEdit -> DimmerSpeed--;
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
		}
	}
 8003dba:	e024      	b.n	8003e06 <LedLightParamDecrement+0x62>
			LedLightActualEdit -> PwmMax--;
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <LedLightParamDecrement+0x70>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	885a      	ldrh	r2, [r3, #2]
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	b292      	uxth	r2, r2
 8003dc6:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 1000;
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <LedLightParamDecrement+0x70>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	885b      	ldrh	r3, [r3, #2]
 8003dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd2:	d917      	bls.n	8003e04 <LedLightParamDecrement+0x60>
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <LedLightParamDecrement+0x70>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ddc:	805a      	strh	r2, [r3, #2]
			break;
 8003dde:	e011      	b.n	8003e04 <LedLightParamDecrement+0x60>
			LedLightActualEdit -> DimmerSpeed--;
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <LedLightParamDecrement+0x70>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	8a1a      	ldrh	r2, [r3, #16]
 8003de6:	3a01      	subs	r2, #1
 8003de8:	b292      	uxth	r2, r2
 8003dea:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <LedLightParamDecrement+0x70>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	8a1b      	ldrh	r3, [r3, #16]
 8003df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df6:	d906      	bls.n	8003e06 <LedLightParamDecrement+0x62>
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <LedLightParamDecrement+0x70>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e00:	821a      	strh	r2, [r3, #16]
	}
 8003e02:	e000      	b.n	8003e06 <LedLightParamDecrement+0x62>
			break;
 8003e04:	bf00      	nop
	}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000002 	.word	0x20000002
 8003e14:	20001e40 	.word	0x20001e40

08003e18 <LedLightParamDecrement25>:
	void LedLightParamDecrement25(void)
	{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
		switch((LedParamSetPtr/2)+1)
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <LedLightParamDecrement25+0x74>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	3301      	adds	r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d002      	beq.n	8003e30 <LedLightParamDecrement25+0x18>
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d014      	beq.n	8003e58 <LedLightParamDecrement25+0x40>
			break;
		case 2:
			LedLightActualEdit -> DimmerSpeed -= 25;
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
		}
	}
 8003e2e:	e028      	b.n	8003e82 <LedLightParamDecrement25+0x6a>
			LedLightActualEdit -> PwmMax -= 25;
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	885a      	ldrh	r2, [r3, #2]
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3a19      	subs	r2, #25
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 1000;
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	885b      	ldrh	r3, [r3, #2]
 8003e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e4a:	d919      	bls.n	8003e80 <LedLightParamDecrement25+0x68>
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e54:	805a      	strh	r2, [r3, #2]
			break;
 8003e56:	e013      	b.n	8003e80 <LedLightParamDecrement25+0x68>
			LedLightActualEdit -> DimmerSpeed -= 25;
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	8a1a      	ldrh	r2, [r3, #16]
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3a19      	subs	r2, #25
 8003e64:	b292      	uxth	r2, r2
 8003e66:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	8a1b      	ldrh	r3, [r3, #16]
 8003e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e72:	d906      	bls.n	8003e82 <LedLightParamDecrement25+0x6a>
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <LedLightParamDecrement25+0x78>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7c:	821a      	strh	r2, [r3, #16]
	}
 8003e7e:	e000      	b.n	8003e82 <LedLightParamDecrement25+0x6a>
			break;
 8003e80:	bf00      	nop
	}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000002 	.word	0x20000002
 8003e90:	20001e40 	.word	0x20001e40

08003e94 <ShowLedLightParamLogo>:
	void ShowLedLightParamLogo(void)
	{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
		HideMenu();
 8003e98:	f7ff fac0 	bl	800341c <HideMenu>
		ActualVisibleFunc = ShowLedLightParamLogo;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <ShowLedLightParamLogo+0x24>)
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <ShowLedLightParamLogo+0x28>)
 8003ea0:	601a      	str	r2, [r3, #0]
		LedLightActualEdit = &Logo;
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <ShowLedLightParamLogo+0x2c>)
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <ShowLedLightParamLogo+0x30>)
 8003ea6:	601a      	str	r2, [r3, #0]
		ShowLedLightParam(LedLightActualEdit);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <ShowLedLightParamLogo+0x2c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fe35 	bl	8003b1c <ShowLedLightParam>
	}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20001e88 	.word	0x20001e88
 8003ebc:	08003e95 	.word	0x08003e95
 8003ec0:	20001e40 	.word	0x20001e40
 8003ec4:	20001e60 	.word	0x20001e60

08003ec8 <ShowLedLightParamLight>:
	void ShowLedLightParamLight(void)
	{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
		HideMenu();
 8003ecc:	f7ff faa6 	bl	800341c <HideMenu>
		ActualVisibleFunc = ShowLedLightParamLight;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <ShowLedLightParamLight+0x24>)
 8003ed2:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <ShowLedLightParamLight+0x28>)
 8003ed4:	601a      	str	r2, [r3, #0]
		LedLightActualEdit = &Light;
 8003ed6:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <ShowLedLightParamLight+0x2c>)
 8003ed8:	4a07      	ldr	r2, [pc, #28]	; (8003ef8 <ShowLedLightParamLight+0x30>)
 8003eda:	601a      	str	r2, [r3, #0]
		ShowLedLightParam(LedLightActualEdit);
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <ShowLedLightParamLight+0x2c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fe1b 	bl	8003b1c <ShowLedLightParam>
	}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20001e88 	.word	0x20001e88
 8003ef0:	08003ec9 	.word	0x08003ec9
 8003ef4:	20001e40 	.word	0x20001e40
 8003ef8:	20001e74 	.word	0x20001e74

08003efc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	if(hadc ->Instance == ADC1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_ADC_ConvCpltCallback+0x30>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d109      	bne.n	8003f22 <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Measurements.Adc1Value, 4);
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <HAL_ADC_ConvCpltCallback+0x34>)
 8003f12:	4808      	ldr	r0, [pc, #32]	; (8003f34 <HAL_ADC_ConvCpltCallback+0x38>)
 8003f14:	f002 fa7c 	bl	8006410 <HAL_ADC_Start_DMA>
		ITCount++;
 8003f18:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003f20:	6013      	str	r3, [r2, #0]
	}
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40012400 	.word	0x40012400
 8003f30:	20001e48 	.word	0x20001e48
 8003f34:	20000c00 	.word	0x20000c00
 8003f38:	20001e44 	.word	0x20001e44

08003f3c <MeasurementConversion>:

void MeasurementConversion(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
	Measurements.Voltage12 = Measurements.Voltage12Raw /1241.0F * 5;
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <MeasurementConversion+0x94>)
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc fec4 	bl	8000cd4 <__aeabi_i2f>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4921      	ldr	r1, [pc, #132]	; (8003fd4 <MeasurementConversion+0x98>)
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc ffc7 	bl	8000ee4 <__aeabi_fdiv>
 8003f56:	4603      	mov	r3, r0
 8003f58:	491f      	ldr	r1, [pc, #124]	; (8003fd8 <MeasurementConversion+0x9c>)
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc ff0e 	bl	8000d7c <__aeabi_fmul>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <MeasurementConversion+0x94>)
 8003f66:	609a      	str	r2, [r3, #8]
	Measurements.Voltage5 = Measurements.Voltage5Raw /1241.0F*2;
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <MeasurementConversion+0x94>)
 8003f6a:	885b      	ldrh	r3, [r3, #2]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc feb0 	bl	8000cd4 <__aeabi_i2f>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4917      	ldr	r1, [pc, #92]	; (8003fd4 <MeasurementConversion+0x98>)
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc ffb3 	bl	8000ee4 <__aeabi_fdiv>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4619      	mov	r1, r3
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fdf2 	bl	8000b6c <__addsf3>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <MeasurementConversion+0x94>)
 8003f8e:	60da      	str	r2, [r3, #12]
	Measurements.InternalTemperature = ((Measurements.InternalTemperatureRaw /1241.0F) - V25) / AVG_SLOPE + 25;
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <MeasurementConversion+0x94>)
 8003f92:	88db      	ldrh	r3, [r3, #6]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc fe9c 	bl	8000cd4 <__aeabi_i2f>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	490d      	ldr	r1, [pc, #52]	; (8003fd4 <MeasurementConversion+0x98>)
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc ff9f 	bl	8000ee4 <__aeabi_fdiv>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	490c      	ldr	r1, [pc, #48]	; (8003fdc <MeasurementConversion+0xa0>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc fddc 	bl	8000b68 <__aeabi_fsub>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	490b      	ldr	r1, [pc, #44]	; (8003fe0 <MeasurementConversion+0xa4>)
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc ff95 	bl	8000ee4 <__aeabi_fdiv>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <MeasurementConversion+0xa8>)
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fdd4 	bl	8000b6c <__addsf3>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <MeasurementConversion+0x94>)
 8003fca:	615a      	str	r2, [r3, #20]
}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20001e48 	.word	0x20001e48
 8003fd4:	449b2000 	.word	0x449b2000
 8003fd8:	40a00000 	.word	0x40a00000
 8003fdc:	3fb70a3d 	.word	0x3fb70a3d
 8003fe0:	4089999a 	.word	0x4089999a
 8003fe4:	41c80000 	.word	0x41c80000

08003fe8 <IntervalFunc10000ms>:


void IntervalFunc10000ms(void)
{
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b0c2      	sub	sp, #264	; 0x108
 8003fec:	af02      	add	r7, sp, #8
	if(HAL_GetTick() - OldTick10000ms >10000)
 8003fee:	f002 f8fd 	bl	80061ec <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <IntervalFunc10000ms+0x5c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d91b      	bls.n	800403a <IntervalFunc10000ms+0x52>
	{
		char MsgToSend[255];
		EepromRefresh(&M24C02);
 8004002:	4811      	ldr	r0, [pc, #68]	; (8004048 <IntervalFunc10000ms+0x60>)
 8004004:	f7fd fa3e 	bl	8001484 <EepromRefresh>

		sprintf(MsgToSend, "10/0x%lx%lx%lx",
 8004008:	f002 f90e 	bl	8006228 <HAL_GetUIDw2>
 800400c:	4604      	mov	r4, r0
 800400e:	f002 f901 	bl	8006214 <HAL_GetUIDw1>
 8004012:	4605      	mov	r5, r0
 8004014:	f002 f8f4 	bl	8006200 <HAL_GetUIDw0>
 8004018:	4603      	mov	r3, r0
 800401a:	4638      	mov	r0, r7
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	462b      	mov	r3, r5
 8004020:	4622      	mov	r2, r4
 8004022:	490a      	ldr	r1, [pc, #40]	; (800404c <IntervalFunc10000ms+0x64>)
 8004024:	f00f f98a 	bl	801333c <siprintf>
				HAL_GetUIDw2(),
				HAL_GetUIDw1(),
				HAL_GetUIDw0());
		UsbBuffWrite(MsgToSend);
 8004028:	463b      	mov	r3, r7
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f984 	bl	8004338 <UsbBuffWrite>
		OldTick10000ms = HAL_GetTick();
 8004030:	f002 f8dc 	bl	80061ec <HAL_GetTick>
 8004034:	4603      	mov	r3, r0
 8004036:	4a03      	ldr	r2, [pc, #12]	; (8004044 <IntervalFunc10000ms+0x5c>)
 8004038:	6013      	str	r3, [r2, #0]
	}
}
 800403a:	bf00      	nop
 800403c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004040:	46bd      	mov	sp, r7
 8004042:	bdb0      	pop	{r4, r5, r7, pc}
 8004044:	20001e14 	.word	0x20001e14
 8004048:	20001e28 	.word	0x20001e28
 800404c:	08015a64 	.word	0x08015a64

08004050 <IntervalFunc500ms>:


void IntervalFunc500ms(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
	  if(HAL_GetTick() - OldTick500ms >500)
 8004054:	f002 f8ca 	bl	80061ec <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <IntervalFunc500ms+0x74>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004064:	d92b      	bls.n	80040be <IntervalFunc500ms+0x6e>
	  {
		  OldTick500ms = HAL_GetTick();
 8004066:	f002 f8c1 	bl	80061ec <HAL_GetTick>
 800406a:	4603      	mov	r3, r0
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <IntervalFunc500ms+0x74>)
 800406e:	6013      	str	r3, [r2, #0]
//		  }



		  static uint8_t TempMeasureFlag = 0;
		  if(!TempMeasureFlag)
 8004070:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <IntervalFunc500ms+0x78>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <IntervalFunc500ms+0x36>
		  {
			  ds18b20_start_measure(NULL);
 8004078:	2000      	movs	r0, #0
 800407a:	f7fe f9e6 	bl	800244a <ds18b20_start_measure>
			  TempMeasureFlag = 1;
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <IntervalFunc500ms+0x78>)
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
			  Temperature = Temp;
			  Temperature = Temperature/100;
			  TempMeasureFlag = 0;
		  }
	  }
}
 8004084:	e01b      	b.n	80040be <IntervalFunc500ms+0x6e>
			  Temp = ds18b20_get_temp_wo_fp(NULL);
 8004086:	2000      	movs	r0, #0
 8004088:	f7fe fa1d 	bl	80024c6 <ds18b20_get_temp_wo_fp>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <IntervalFunc500ms+0x7c>)
 8004092:	601a      	str	r2, [r3, #0]
			  Temperature = Temp;
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <IntervalFunc500ms+0x7c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7fc fe1b 	bl	8000cd4 <__aeabi_i2f>
 800409e:	4603      	mov	r3, r0
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <IntervalFunc500ms+0x80>)
 80040a2:	6013      	str	r3, [r2, #0]
			  Temperature = Temperature/100;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <IntervalFunc500ms+0x80>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	490a      	ldr	r1, [pc, #40]	; (80040d4 <IntervalFunc500ms+0x84>)
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc ff1a 	bl	8000ee4 <__aeabi_fdiv>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <IntervalFunc500ms+0x80>)
 80040b6:	601a      	str	r2, [r3, #0]
			  TempMeasureFlag = 0;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <IntervalFunc500ms+0x78>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20001e08 	.word	0x20001e08
 80040c8:	20001e8c 	.word	0x20001e8c
 80040cc:	20001e18 	.word	0x20001e18
 80040d0:	20001e1c 	.word	0x20001e1c
 80040d4:	42c80000 	.word	0x42c80000

080040d8 <IntervalFunc100ms>:

void IntervalFunc100ms(void)
{
 80040d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	b0d7      	sub	sp, #348	; 0x15c
 80040de:	af0e      	add	r7, sp, #56	; 0x38
	if(HAL_GetTick() - OldTick100ms >100)
 80040e0:	f002 f884 	bl	80061ec <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <IntervalFunc100ms+0x12c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b64      	cmp	r3, #100	; 0x64
 80040ee:	f240 8082 	bls.w	80041f6 <IntervalFunc100ms+0x11e>
		/*
		 * Message to send id. 0.
		 * 0/Input 16bit/Output 16bit/PWM1/PWM2/PWM3/PWM4/Temperature/12V/5V/Current
		 */
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
									(unsigned int*)((~GPIOG->IDR)&0xff),
 80040f2:	4b45      	ldr	r3, [pc, #276]	; (8004208 <IntervalFunc100ms+0x130>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	b2db      	uxtb	r3, r3
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 80040fa:	61fb      	str	r3, [r7, #28]
									(uint16_t*)GPIOE->ODR,
 80040fc:	4b43      	ldr	r3, [pc, #268]	; (800420c <IntervalFunc100ms+0x134>)
 80040fe:	68db      	ldr	r3, [r3, #12]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004100:	61bb      	str	r3, [r7, #24]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_1),
 8004102:	4b43      	ldr	r3, [pc, #268]	; (8004210 <IntervalFunc100ms+0x138>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004108:	461e      	mov	r6, r3
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_2),
 800410a:	4b41      	ldr	r3, [pc, #260]	; (8004210 <IntervalFunc100ms+0x138>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004110:	617b      	str	r3, [r7, #20]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_3),
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <IntervalFunc100ms+0x138>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004118:	613b      	str	r3, [r7, #16]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_4),
 800411a:	4b3d      	ldr	r3, [pc, #244]	; (8004210 <IntervalFunc100ms+0x138>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b3c      	ldr	r3, [pc, #240]	; (8004214 <IntervalFunc100ms+0x13c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc f9ea 	bl	8000500 <__aeabi_f2d>
 800412c:	4682      	mov	sl, r0
 800412e:	468b      	mov	fp, r1
									Temperature,
									Measurements.InternalTemperature,
 8004130:	4b39      	ldr	r3, [pc, #228]	; (8004218 <IntervalFunc100ms+0x140>)
 8004132:	695b      	ldr	r3, [r3, #20]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004134:	4618      	mov	r0, r3
 8004136:	f7fc f9e3 	bl	8000500 <__aeabi_f2d>
 800413a:	e9c7 0100 	strd	r0, r1, [r7]
									Measurements.Voltage12,
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <IntervalFunc100ms+0x140>)
 8004140:	689b      	ldr	r3, [r3, #8]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc f9dc 	bl	8000500 <__aeabi_f2d>
 8004148:	4680      	mov	r8, r0
 800414a:	4689      	mov	r9, r1
									Measurements.Voltage5,
 800414c:	4b32      	ldr	r3, [pc, #200]	; (8004218 <IntervalFunc100ms+0x140>)
 800414e:	68db      	ldr	r3, [r3, #12]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc f9d5 	bl	8000500 <__aeabi_f2d>
 8004156:	4604      	mov	r4, r0
 8004158:	460d      	mov	r5, r1
									Measurements.Current);
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <IntervalFunc100ms+0x140>)
 800415c:	691b      	ldr	r3, [r3, #16]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc f9ce 	bl	8000500 <__aeabi_f2d>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	f107 0020 	add.w	r0, r7, #32
 800416c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004170:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8004174:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8004178:	e9d7 1200 	ldrd	r1, r2, [r7]
 800417c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004180:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	9103      	str	r1, [sp, #12]
 8004188:	6939      	ldr	r1, [r7, #16]
 800418a:	9102      	str	r1, [sp, #8]
 800418c:	6979      	ldr	r1, [r7, #20]
 800418e:	9101      	str	r1, [sp, #4]
 8004190:	9600      	str	r6, [sp, #0]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	4921      	ldr	r1, [pc, #132]	; (800421c <IntervalFunc100ms+0x144>)
 8004198:	f00f f8d0 	bl	801333c <siprintf>
		UsbBuffWrite(MsgToSend);
 800419c:	f107 0320 	add.w	r3, r7, #32
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f8c9 	bl	8004338 <UsbBuffWrite>

		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u",
				Light.Mode,
 80041a6:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <IntervalFunc100ms+0x148>)
 80041a8:	f993 3000 	ldrsb.w	r3, [r3]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u",
 80041ac:	461d      	mov	r5, r3
				Light.PwmMax,
 80041ae:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <IntervalFunc100ms+0x148>)
 80041b0:	885b      	ldrh	r3, [r3, #2]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u",
 80041b2:	461e      	mov	r6, r3
				Light.DimmerSpeed,
 80041b4:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <IntervalFunc100ms+0x148>)
 80041b6:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u",
 80041b8:	461a      	mov	r2, r3
				Logo.Mode,
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <IntervalFunc100ms+0x14c>)
 80041bc:	f993 3000 	ldrsb.w	r3, [r3]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u",
 80041c0:	4619      	mov	r1, r3
				Logo.PwmMax,
 80041c2:	4b18      	ldr	r3, [pc, #96]	; (8004224 <IntervalFunc100ms+0x14c>)
 80041c4:	885b      	ldrh	r3, [r3, #2]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u",
 80041c6:	461c      	mov	r4, r3
				Logo.DimmerSpeed);
 80041c8:	4b16      	ldr	r3, [pc, #88]	; (8004224 <IntervalFunc100ms+0x14c>)
 80041ca:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u",
 80041cc:	f107 0020 	add.w	r0, r7, #32
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	9402      	str	r4, [sp, #8]
 80041d4:	9101      	str	r1, [sp, #4]
 80041d6:	9200      	str	r2, [sp, #0]
 80041d8:	4633      	mov	r3, r6
 80041da:	462a      	mov	r2, r5
 80041dc:	4912      	ldr	r1, [pc, #72]	; (8004228 <IntervalFunc100ms+0x150>)
 80041de:	f00f f8ad 	bl	801333c <siprintf>
		UsbBuffWrite(MsgToSend);
 80041e2:	f107 0320 	add.w	r3, r7, #32
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f8a6 	bl	8004338 <UsbBuffWrite>
		OldTick100ms = HAL_GetTick();
 80041ec:	f001 fffe 	bl	80061ec <HAL_GetTick>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4a04      	ldr	r2, [pc, #16]	; (8004204 <IntervalFunc100ms+0x12c>)
 80041f4:	6013      	str	r3, [r2, #0]
	}

}
 80041f6:	bf00      	nop
 80041f8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	20001e0c 	.word	0x20001e0c
 8004208:	40012000 	.word	0x40012000
 800420c:	40011800 	.word	0x40011800
 8004210:	20002738 	.word	0x20002738
 8004214:	20001e1c 	.word	0x20001e1c
 8004218:	20001e48 	.word	0x20001e48
 800421c:	08015a74 	.word	0x08015a74
 8004220:	20001e74 	.word	0x20001e74
 8004224:	20001e60 	.word	0x20001e60
 8004228:	08015aa4 	.word	0x08015aa4

0800422c <IntervalFunc50ms>:

void IntervalFunc50ms(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - OldTick50ms >50)
 8004230:	f001 ffdc 	bl	80061ec <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <IntervalFunc50ms+0x58>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b32      	cmp	r3, #50	; 0x32
 800423e:	d91f      	bls.n	8004280 <IntervalFunc50ms+0x54>
	{
		if(ActualVisibleFunc != ShowPWMsetMenu && ActualVisibleFunc != ShowLedLightParamLight && ActualVisibleFunc != ShowLedLightParamLogo)
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <IntervalFunc50ms+0x5c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <IntervalFunc50ms+0x60>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00c      	beq.n	8004264 <IntervalFunc50ms+0x38>
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <IntervalFunc50ms+0x5c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a10      	ldr	r2, [pc, #64]	; (8004290 <IntervalFunc50ms+0x64>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <IntervalFunc50ms+0x38>
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <IntervalFunc50ms+0x5c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <IntervalFunc50ms+0x68>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d002      	beq.n	8004264 <IntervalFunc50ms+0x38>
		{
			EepromBackup(&M24C02);
 800425e:	480e      	ldr	r0, [pc, #56]	; (8004298 <IntervalFunc50ms+0x6c>)
 8004260:	f7fd f8d0 	bl	8001404 <EepromBackup>
		}

		if(ActualVisibleFunc != NULL)
 8004264:	4b08      	ldr	r3, [pc, #32]	; (8004288 <IntervalFunc50ms+0x5c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <IntervalFunc50ms+0x46>
		{
			ActualVisibleFunc();
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <IntervalFunc50ms+0x5c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4798      	blx	r3
		}

		SSD1306_Display();
 8004272:	f001 f989 	bl	8005588 <SSD1306_Display>

		OldTick50ms = HAL_GetTick();
 8004276:	f001 ffb9 	bl	80061ec <HAL_GetTick>
 800427a:	4603      	mov	r3, r0
 800427c:	4a01      	ldr	r2, [pc, #4]	; (8004284 <IntervalFunc50ms+0x58>)
 800427e:	6013      	str	r3, [r2, #0]
	}

}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20001e10 	.word	0x20001e10
 8004288:	20001e88 	.word	0x20001e88
 800428c:	08003785 	.word	0x08003785
 8004290:	08003ec9 	.word	0x08003ec9
 8004294:	08003e95 	.word	0x08003e95
 8004298:	20001e28 	.word	0x20001e28

0800429c <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	m24cxxWcSetIt(&M24C02, hi2c);
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4803      	ldr	r0, [pc, #12]	; (80042b4 <HAL_I2C_MemTxCpltCallback+0x18>)
 80042a8:	f7fd fdf4 	bl	8001e94 <m24cxxWcSetIt>
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20001e28 	.word	0x20001e28

080042b8 <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
	if(Length > 0)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d02a      	beq.n	8004320 <CDC_ReveiveCallback+0x68>
	{
		uint8_t i = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
		LedBlinkOne(&CommPcUsb); //Control Led
 80042ce:	4816      	ldr	r0, [pc, #88]	; (8004328 <CDC_ReveiveCallback+0x70>)
 80042d0:	f7fe faf1 	bl	80028b6 <LedBlinkOne>
		while(i < Length)
 80042d4:	e020      	b.n	8004318 <CDC_ReveiveCallback+0x60>
		{
		if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, Buffer[i]))
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	4619      	mov	r1, r3
 80042e0:	4812      	ldr	r0, [pc, #72]	; (800432c <CDC_ReveiveCallback+0x74>)
 80042e2:	f001 f833 	bl	800534c <Ring_Buffer_Write>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10c      	bne.n	8004306 <CDC_ReveiveCallback+0x4e>
		{
			if(Buffer[i] == ENDLINE)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b5e      	cmp	r3, #94	; 0x5e
 80042f6:	d10c      	bne.n	8004312 <CDC_ReveiveCallback+0x5a>
			{
				LineCounter++;
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <CDC_ReveiveCallback+0x78>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <CDC_ReveiveCallback+0x78>)
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e005      	b.n	8004312 <CDC_ReveiveCallback+0x5a>
			}
		}
		else
		{
			Ring_Buffer_Flush(&ReceiveBuffer);
 8004306:	4809      	ldr	r0, [pc, #36]	; (800432c <CDC_ReveiveCallback+0x74>)
 8004308:	f001 f848 	bl	800539c <Ring_Buffer_Flush>
			UsbBuffWrite("ERROR");
 800430c:	4809      	ldr	r0, [pc, #36]	; (8004334 <CDC_ReveiveCallback+0x7c>)
 800430e:	f000 f813 	bl	8004338 <UsbBuffWrite>
		}
		i++;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	3301      	adds	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 8004318:	7bfa      	ldrb	r2, [r7, #15]
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	429a      	cmp	r2, r3
 800431e:	d3da      	bcc.n	80042d6 <CDC_ReveiveCallback+0x1e>
		}
	}
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000dec 	.word	0x20000dec
 800432c:	20000df8 	.word	0x20000df8
 8004330:	20001600 	.word	0x20001600
 8004334:	08015ab8 	.word	0x08015ab8

08004338 <UsbBuffWrite>:

void UsbBuffWrite(char * Message)
{
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

	DataToTransmit++;
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <UsbBuffWrite+0x80>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <UsbBuffWrite+0x80>)
 800434a:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]
 8004350:	e016      	b.n	8004380 <UsbBuffWrite+0x48>
	{
		if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, Message[y]))
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	4817      	ldr	r0, [pc, #92]	; (80043bc <UsbBuffWrite+0x84>)
 800435e:	f000 fff5 	bl	800534c <Ring_Buffer_Write>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <UsbBuffWrite+0x42>
		{

		}
		else
		{
			Ring_Buffer_Flush(&TransmitBuffer);
 8004368:	4814      	ldr	r0, [pc, #80]	; (80043bc <UsbBuffWrite+0x84>)
 800436a:	f001 f817 	bl	800539c <Ring_Buffer_Flush>
			DataToTransmit--;
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <UsbBuffWrite+0x80>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <UsbBuffWrite+0x80>)
 8004378:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3301      	adds	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	7bfc      	ldrb	r4, [r7, #15]
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fb ff50 	bl	8000228 <strlen>
 8004388:	4603      	mov	r3, r0
 800438a:	429c      	cmp	r4, r3
 800438c:	d3e1      	bcc.n	8004352 <UsbBuffWrite+0x1a>
		}
	}

	if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, '^'))
 800438e:	215e      	movs	r1, #94	; 0x5e
 8004390:	480a      	ldr	r0, [pc, #40]	; (80043bc <UsbBuffWrite+0x84>)
 8004392:	f000 ffdb 	bl	800534c <Ring_Buffer_Write>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <UsbBuffWrite+0x76>
	{

	}
	else
	{
		Ring_Buffer_Flush(&TransmitBuffer);
 800439c:	4807      	ldr	r0, [pc, #28]	; (80043bc <UsbBuffWrite+0x84>)
 800439e:	f000 fffd 	bl	800539c <Ring_Buffer_Flush>
		DataToTransmit--;
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <UsbBuffWrite+0x80>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <UsbBuffWrite+0x80>)
 80043ac:	701a      	strb	r2, [r3, #0]
	}

}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd90      	pop	{r4, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20001e04 	.word	0x20001e04
 80043bc:	200011fc 	.word	0x200011fc

080043c0 <UsbTransmitTask>:

void UsbTransmitTask(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	71bb      	strb	r3, [r7, #6]
		do
		{
			if(Ring_Buffer_Read(&TransmitBuffer, &tmp) == RB_OK)
 80043ce:	1dbb      	adds	r3, r7, #6
 80043d0:	4619      	mov	r1, r3
 80043d2:	480e      	ldr	r0, [pc, #56]	; (800440c <UsbTransmitTask+0x4c>)
 80043d4:	f000 ff92 	bl	80052fc <Ring_Buffer_Read>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <UsbTransmitTask+0x34>
			{
			TransmitData[i] = tmp;
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	79b9      	ldrb	r1, [r7, #6]
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <UsbTransmitTask+0x50>)
 80043e4:	54d1      	strb	r1, [r2, r3]
			i++;
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	3301      	adds	r3, #1
 80043ea:	71fb      	strb	r3, [r7, #7]
			else
			{
				break;
			}

		} while(tmp != '^');
 80043ec:	79bb      	ldrb	r3, [r7, #6]
 80043ee:	2b5e      	cmp	r3, #94	; 0x5e
 80043f0:	d1ed      	bne.n	80043ce <UsbTransmitTask+0xe>
 80043f2:	e000      	b.n	80043f6 <UsbTransmitTask+0x36>
				break;
 80043f4:	bf00      	nop

		CDC_Transmit_FS(TransmitData, i);
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	4804      	ldr	r0, [pc, #16]	; (8004410 <UsbTransmitTask+0x50>)
 80043fe:	f00d ff31 	bl	8012264 <CDC_Transmit_FS>
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200011fc 	.word	0x200011fc
 8004410:	20001a04 	.word	0x20001a04

08004414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004418:	b672      	cpsid	i
}
 800441a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800441c:	e7fe      	b.n	800441c <Error_Handler+0x8>
	...

08004420 <HeaderDraw>:
	menu_t sub_menu4_3 = { BackStr, NULL, &sub_menu4_2, NULL, &menu4, MenuBack };


static void HeaderDraw(char *header)

{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	; 0x30
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
	  GFX_SetFont(font_8x5);
 8004428:	4857      	ldr	r0, [pc, #348]	; (8004588 <HeaderDraw+0x168>)
 800442a:	f7fd f839 	bl	80014a0 <GFX_SetFont>
	  GFX_SetFontSize(1);
 800442e:	2001      	movs	r0, #1
 8004430:	f7fd f844 	bl	80014bc <GFX_SetFontSize>
	  size_t headerLen = strlen(header);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fb fef7 	bl	8000228 <strlen>
 800443a:	6238      	str	r0, [r7, #32]
	  char buff[20];
	  if(headerLen % 2)
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d04e      	beq.n	80044e4 <HeaderDraw+0xc4>
	  {
		  for(uint8_t i = 0; i<19; i++)
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800444c:	e03a      	b.n	80044c4 <HeaderDraw+0xa4>
		  {
			  if(i<9-(headerLen/2))
 800444e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	f1c3 0309 	rsb	r3, r3, #9
 800445a:	429a      	cmp	r2, r3
 800445c:	d207      	bcs.n	800446e <HeaderDraw+0x4e>
			  {
				  buff[i] = '-';
 800445e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004462:	3328      	adds	r3, #40	; 0x28
 8004464:	443b      	add	r3, r7
 8004466:	222d      	movs	r2, #45	; 0x2d
 8004468:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800446c:	e025      	b.n	80044ba <HeaderDraw+0x9a>
			  }
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2) + 1)
 800446e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	f1c3 0309 	rsb	r3, r3, #9
 800447a:	429a      	cmp	r2, r3
 800447c:	d316      	bcc.n	80044ac <HeaderDraw+0x8c>
 800447e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	330a      	adds	r3, #10
 8004488:	429a      	cmp	r2, r3
 800448a:	d20f      	bcs.n	80044ac <HeaderDraw+0x8c>
			  {
				  buff[i] = header[i-9+(headerLen/2)];
 800448c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	3b09      	subs	r3, #9
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	441a      	add	r2, r3
 800449c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	3328      	adds	r3, #40	; 0x28
 80044a4:	443b      	add	r3, r7
 80044a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80044aa:	e006      	b.n	80044ba <HeaderDraw+0x9a>
			  }
			  else
			  {
				  buff[i] = '-';
 80044ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044b0:	3328      	adds	r3, #40	; 0x28
 80044b2:	443b      	add	r3, r7
 80044b4:	222d      	movs	r2, #45	; 0x2d
 80044b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<19; i++)
 80044ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044be:	3301      	adds	r3, #1
 80044c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044c8:	2b12      	cmp	r3, #18
 80044ca:	d9c0      	bls.n	800444e <HeaderDraw+0x2e>
			  }
		  }
		  buff[19] = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	77fb      	strb	r3, [r7, #31]
		  GFX_DrawString(9, 0, buff, WHITE, 0);
 80044d0:	f107 020c 	add.w	r2, r7, #12
 80044d4:	2300      	movs	r3, #0
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2301      	movs	r3, #1
 80044da:	2100      	movs	r1, #0
 80044dc:	2009      	movs	r0, #9
 80044de:	f7fd f8b9 	bl	8001654 <GFX_DrawString>
			  }
		  }
		  buff[18] = 0;
		  GFX_DrawString(11, 0, buff, WHITE, 0);
	  }
}
 80044e2:	e04d      	b.n	8004580 <HeaderDraw+0x160>
		  for(uint8_t i = 0; i<18; i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80044ea:	e03a      	b.n	8004562 <HeaderDraw+0x142>
			  if(i<9-(headerLen/2))
 80044ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	f1c3 0309 	rsb	r3, r3, #9
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d207      	bcs.n	800450c <HeaderDraw+0xec>
				  buff[i] = '-';
 80044fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004500:	3328      	adds	r3, #40	; 0x28
 8004502:	443b      	add	r3, r7
 8004504:	222d      	movs	r2, #45	; 0x2d
 8004506:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800450a:	e025      	b.n	8004558 <HeaderDraw+0x138>
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2))
 800450c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	f1c3 0309 	rsb	r3, r3, #9
 8004518:	429a      	cmp	r2, r3
 800451a:	d316      	bcc.n	800454a <HeaderDraw+0x12a>
 800451c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	3309      	adds	r3, #9
 8004526:	429a      	cmp	r2, r3
 8004528:	d20f      	bcs.n	800454a <HeaderDraw+0x12a>
				  buff[i] = header[i-9+(headerLen/2)];
 800452a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	3b09      	subs	r3, #9
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	441a      	add	r2, r3
 800453a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800453e:	7812      	ldrb	r2, [r2, #0]
 8004540:	3328      	adds	r3, #40	; 0x28
 8004542:	443b      	add	r3, r7
 8004544:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8004548:	e006      	b.n	8004558 <HeaderDraw+0x138>
				  buff[i] = '-';
 800454a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800454e:	3328      	adds	r3, #40	; 0x28
 8004550:	443b      	add	r3, r7
 8004552:	222d      	movs	r2, #45	; 0x2d
 8004554:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<18; i++)
 8004558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800455c:	3301      	adds	r3, #1
 800455e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004566:	2b11      	cmp	r3, #17
 8004568:	d9c0      	bls.n	80044ec <HeaderDraw+0xcc>
		  buff[18] = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	77bb      	strb	r3, [r7, #30]
		  GFX_DrawString(11, 0, buff, WHITE, 0);
 800456e:	f107 020c 	add.w	r2, r7, #12
 8004572:	2300      	movs	r3, #0
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2301      	movs	r3, #1
 8004578:	2100      	movs	r1, #0
 800457a:	200b      	movs	r0, #11
 800457c:	f7fd f86a 	bl	8001654 <GFX_DrawString>
}
 8004580:	bf00      	nop
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	08015c70 	.word	0x08015c70

0800458c <MenuNext>:

void MenuNext(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
	if(CurrentPointer->next)
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <MenuNext+0x74>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <MenuNext+0x40>
	{
		CurrentPointer = CurrentPointer->next;
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <MenuNext+0x74>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a17      	ldr	r2, [pc, #92]	; (8004600 <MenuNext+0x74>)
 80045a2:	6013      	str	r3, [r2, #0]
		MenuIndex++;
 80045a4:	4b17      	ldr	r3, [pc, #92]	; (8004604 <MenuNext+0x78>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <MenuNext+0x78>)
 80045ae:	701a      	strb	r2, [r3, #0]
		if(++OledRowPos > OLED_ROWS - 1)
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <MenuNext+0x7c>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <MenuNext+0x7c>)
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <MenuNext+0x7c>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d918      	bls.n	80045f6 <MenuNext+0x6a>
		{
			OledRowPos = OLED_ROWS - 1;
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <MenuNext+0x7c>)
 80045c6:	2202      	movs	r2, #2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e014      	b.n	80045f6 <MenuNext+0x6a>
		}
	}
	else
	{
		MenuIndex = 0;
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <MenuNext+0x78>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <MenuNext+0x7c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
		if(CurrentPointer->parent)
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <MenuNext+0x74>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d006      	beq.n	80045f0 <MenuNext+0x64>
		{
			CurrentPointer = (CurrentPointer -> parent) -> child;
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <MenuNext+0x74>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4a05      	ldr	r2, [pc, #20]	; (8004600 <MenuNext+0x74>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e002      	b.n	80045f6 <MenuNext+0x6a>
		}
		else
		{
			CurrentPointer = &menu1;
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <MenuNext+0x74>)
 80045f2:	4a06      	ldr	r2, [pc, #24]	; (800460c <MenuNext+0x80>)
 80045f4:	601a      	str	r2, [r3, #0]
		}
	}
	MenuRefresh();
 80045f6:	f000 f907 	bl	8004808 <MenuRefresh>
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000004 	.word	0x20000004
 8004604:	20001e8d 	.word	0x20001e8d
 8004608:	20001e8e 	.word	0x20001e8e
 800460c:	20000008 	.word	0x20000008

08004610 <MenuPrev>:

void MenuPrev(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	CurrentPointer = CurrentPointer -> prev;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <MenuPrev+0x6c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4a18      	ldr	r2, [pc, #96]	; (800467c <MenuPrev+0x6c>)
 800461c:	6013      	str	r3, [r2, #0]

	if(MenuIndex)
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <MenuPrev+0x70>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d010      	beq.n	8004648 <MenuPrev+0x38>
	{
		MenuIndex--;
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <MenuPrev+0x70>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	3b01      	subs	r3, #1
 800462c:	b2da      	uxtb	r2, r3
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <MenuPrev+0x70>)
 8004630:	701a      	strb	r2, [r3, #0]
		if(OledRowPos > 0)
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <MenuPrev+0x74>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01b      	beq.n	8004672 <MenuPrev+0x62>
		{
			OledRowPos--;
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <MenuPrev+0x74>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <MenuPrev+0x74>)
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e014      	b.n	8004672 <MenuPrev+0x62>
		}
	}
	else
	{
		MenuIndex = MenuGetIndex(CurrentPointer);
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <MenuPrev+0x6c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f899 	bl	8004784 <MenuGetIndex>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <MenuPrev+0x70>)
 8004658:	701a      	strb	r2, [r3, #0]
		{
			if(MenuIndex >= OLED_ROWS)
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <MenuPrev+0x70>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d903      	bls.n	800466a <MenuPrev+0x5a>
			{
				OledRowPos = OLED_ROWS - 1;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <MenuPrev+0x74>)
 8004664:	2202      	movs	r2, #2
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e003      	b.n	8004672 <MenuPrev+0x62>
			}
			else
			{
				OledRowPos = MenuIndex;
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <MenuPrev+0x70>)
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <MenuPrev+0x74>)
 8004670:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	MenuRefresh();
 8004672:	f000 f8c9 	bl	8004808 <MenuRefresh>
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000004 	.word	0x20000004
 8004680:	20001e8d 	.word	0x20001e8d
 8004684:	20001e8e 	.word	0x20001e8e

08004688 <MenuEnter>:

void MenuEnter(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	uint8_t Back = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	71fb      	strb	r3, [r7, #7]

	if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function !=MenuBack)
 8004692:	4b21      	ldr	r3, [pc, #132]	; (8004718 <MenuEnter+0x90>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <MenuEnter+0x2a>
 800469c:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <MenuEnter+0x90>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4a1e      	ldr	r2, [pc, #120]	; (800471c <MenuEnter+0x94>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <MenuEnter+0x2a>
	{
		CurrentPointer -> menu_function();
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <MenuEnter+0x90>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4798      	blx	r3
 80046b0:	e00c      	b.n	80046cc <MenuEnter+0x44>
	}
	else if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function == MenuBack)
 80046b2:	4b19      	ldr	r3, [pc, #100]	; (8004718 <MenuEnter+0x90>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <MenuEnter+0x44>
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <MenuEnter+0x90>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4a16      	ldr	r2, [pc, #88]	; (800471c <MenuEnter+0x94>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <MenuEnter+0x44>
	{
		Back = 1;
 80046c8:	2301      	movs	r3, #1
 80046ca:	71fb      	strb	r3, [r7, #7]
	}

	if(CurrentPointer->child != NULL)
 80046cc:	4b12      	ldr	r3, [pc, #72]	; (8004718 <MenuEnter+0x90>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d015      	beq.n	8004702 <MenuEnter+0x7a>
	{

			OledRowPosLevel[MenuGetLevel(CurrentPointer)] = OledRowPos;
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <MenuEnter+0x90>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f876 	bl	80047cc <MenuGetLevel>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <MenuEnter+0x98>)
 80046e6:	7819      	ldrb	r1, [r3, #0]
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MenuEnter+0x9c>)
 80046ea:	5499      	strb	r1, [r3, r2]

		MenuIndex = 0;
 80046ec:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <MenuEnter+0xa0>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <MenuEnter+0x98>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
		CurrentPointer = CurrentPointer -> child;
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <MenuEnter+0x90>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4a06      	ldr	r2, [pc, #24]	; (8004718 <MenuEnter+0x90>)
 8004700:	6013      	str	r3, [r2, #0]
	}

	if(Back == 1)
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <MenuEnter+0x84>
	{
		MenuBack();
 8004708:	f000 f810 	bl	800472c <MenuBack>
	}

	MenuRefresh();
 800470c:	f000 f87c 	bl	8004808 <MenuRefresh>
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000004 	.word	0x20000004
 800471c:	0800472d 	.word	0x0800472d
 8004720:	20001e8e 	.word	0x20001e8e
 8004724:	20001e90 	.word	0x20001e90
 8004728:	20001e8d 	.word	0x20001e8d

0800472c <MenuBack>:

void MenuBack(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
	if(CurrentPointer->parent != NULL)
 8004730:	4b10      	ldr	r3, [pc, #64]	; (8004774 <MenuBack+0x48>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00f      	beq.n	800475a <MenuBack+0x2e>
	{
		CurrentPointer = CurrentPointer -> parent;
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <MenuBack+0x48>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <MenuBack+0x48>)
 8004742:	6013      	str	r3, [r2, #0]
		OledRowPos = OledRowPosLevel[MenuGetLevel(CurrentPointer)];
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <MenuBack+0x48>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f83f 	bl	80047cc <MenuGetLevel>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <MenuBack+0x4c>)
 8004754:	5c9a      	ldrb	r2, [r3, r2]
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <MenuBack+0x50>)
 8004758:	701a      	strb	r2, [r3, #0]
	}

//	CurrentPointer = CurrentPointer -> parent;
	MenuIndex = MenuGetIndex(CurrentPointer);
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <MenuBack+0x48>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f810 	bl	8004784 <MenuGetIndex>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <MenuBack+0x54>)
 800476a:	701a      	strb	r2, [r3, #0]

	MenuRefresh();
 800476c:	f000 f84c 	bl	8004808 <MenuRefresh>
}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000004 	.word	0x20000004
 8004778:	20001e90 	.word	0x20001e90
 800477c:	20001e8e 	.word	0x20001e8e
 8004780:	20001e8d 	.word	0x20001e8d

08004784 <MenuGetIndex>:

static uint8_t MenuGetIndex(menu_t *menu)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	menu_t *temp;
	uint8_t i = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	72fb      	strb	r3, [r7, #11]

	if(menu->parent)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <MenuGetIndex+0x1e>
	{
		temp = (menu->parent) -> child;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e008      	b.n	80047b4 <MenuGetIndex+0x30>
	}
	else
	{
		temp = &menu1;
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <MenuGetIndex+0x44>)
 80047a4:	60fb      	str	r3, [r7, #12]
	}

	while(temp != menu)
 80047a6:	e005      	b.n	80047b4 <MenuGetIndex+0x30>
	{
		temp = temp -> next;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
		i++;
 80047ae:	7afb      	ldrb	r3, [r7, #11]
 80047b0:	3301      	adds	r3, #1
 80047b2:	72fb      	strb	r3, [r7, #11]
	while(temp != menu)
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1f5      	bne.n	80047a8 <MenuGetIndex+0x24>
	}

	return i;
 80047bc:	7afb      	ldrb	r3, [r7, #11]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	20000008 	.word	0x20000008

080047cc <MenuGetLevel>:

uint8_t MenuGetLevel(menu_t *menu)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	menu_t *temp = menu;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	72fb      	strb	r3, [r7, #11]

	if(menu->parent == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <MenuGetLevel+0x28>
	{
		return 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e00a      	b.n	80047fe <MenuGetLevel+0x32>
	}

	while(temp->parent != NULL)
	{
		temp = temp -> parent;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	60fb      	str	r3, [r7, #12]
		i++;
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	3301      	adds	r3, #1
 80047f2:	72fb      	strb	r3, [r7, #11]
	while(temp->parent != NULL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f5      	bne.n	80047e8 <MenuGetLevel+0x1c>
	}
	return i;
 80047fc:	7afb      	ldrb	r3, [r7, #11]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <MenuRefresh>:

void MenuRefresh(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af02      	add	r7, sp, #8
	menu_t *temp;
	uint8_t i;

	if( CurrentPointer->parent == &sub_menu1_6 ||
 800480e:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <MenuRefresh+0x19c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	4a64      	ldr	r2, [pc, #400]	; (80049a8 <MenuRefresh+0x1a0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d011      	beq.n	800483e <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_1_1 ||
 800481a:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <MenuRefresh+0x19c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
	if( CurrentPointer->parent == &sub_menu1_6 ||
 8004820:	4a62      	ldr	r2, [pc, #392]	; (80049ac <MenuRefresh+0x1a4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_2_1 ||
 8004826:	4b5f      	ldr	r3, [pc, #380]	; (80049a4 <MenuRefresh+0x19c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
		CurrentPointer->parent == &sub_menu3_1_1 ||
 800482c:	4a60      	ldr	r2, [pc, #384]	; (80049b0 <MenuRefresh+0x1a8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d005      	beq.n	800483e <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_3)
 8004832:	4b5c      	ldr	r3, [pc, #368]	; (80049a4 <MenuRefresh+0x19c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
		CurrentPointer->parent == &sub_menu3_2_1 ||
 8004838:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <MenuRefresh+0x1ac>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <MenuRefresh+0x3a>
	{
		MenuIndicatorRefresh();
 800483e:	f000 fa59 	bl	8004cf4 <MenuIndicatorRefresh>
	}

	SSD1306_Clear(BLACK);
 8004842:	2000      	movs	r0, #0
 8004844:	f000 fe82 	bl	800554c <SSD1306_Clear>

	if(CurrentPointer->parent)
 8004848:	4b56      	ldr	r3, [pc, #344]	; (80049a4 <MenuRefresh+0x19c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <MenuRefresh+0x64>
	{
		temp = (CurrentPointer->parent) -> child;
 8004852:	4b54      	ldr	r3, [pc, #336]	; (80049a4 <MenuRefresh+0x19c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	607b      	str	r3, [r7, #4]
		HeaderDraw((CurrentPointer->parent) -> name);
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <MenuRefresh+0x19c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fddb 	bl	8004420 <HeaderDraw>
 800486a:	e004      	b.n	8004876 <MenuRefresh+0x6e>
	}
	else
	{
		temp = &menu1;
 800486c:	4b52      	ldr	r3, [pc, #328]	; (80049b8 <MenuRefresh+0x1b0>)
 800486e:	607b      	str	r3, [r7, #4]
		HeaderDraw("Menu");
 8004870:	4852      	ldr	r0, [pc, #328]	; (80049bc <MenuRefresh+0x1b4>)
 8004872:	f7ff fdd5 	bl	8004420 <HeaderDraw>
	}

	for(i=0; i!=MenuIndex - OledRowPos; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	70fb      	strb	r3, [r7, #3]
 800487a:	e009      	b.n	8004890 <MenuRefresh+0x88>
	{
		if(temp -> next == NULL) break; // Hard fault protection
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00f      	beq.n	80048a4 <MenuRefresh+0x9c>

		temp = temp -> next;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	607b      	str	r3, [r7, #4]
	for(i=0; i!=MenuIndex - OledRowPos; i++)
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	3301      	adds	r3, #1
 800488e:	70fb      	strb	r3, [r7, #3]
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <MenuRefresh+0x1b8>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <MenuRefresh+0x1bc>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	1acb      	subs	r3, r1, r3
 800489e:	429a      	cmp	r2, r3
 80048a0:	d1ec      	bne.n	800487c <MenuRefresh+0x74>
 80048a2:	e000      	b.n	80048a6 <MenuRefresh+0x9e>
		if(temp -> next == NULL) break; // Hard fault protection
 80048a4:	bf00      	nop
	}

	GFX_SetFont(font_8x5);
 80048a6:	4848      	ldr	r0, [pc, #288]	; (80049c8 <MenuRefresh+0x1c0>)
 80048a8:	f7fc fdfa 	bl	80014a0 <GFX_SetFont>
	GFX_SetFontSize(2);
 80048ac:	2002      	movs	r0, #2
 80048ae:	f7fc fe05 	bl	80014bc <GFX_SetFontSize>
	for(i=0; i<OLED_ROWS; i++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	70fb      	strb	r3, [r7, #3]
 80048b6:	e06c      	b.n	8004992 <MenuRefresh+0x18a>
	{
		if(temp == CurrentPointer)
 80048b8:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <MenuRefresh+0x19c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d14a      	bne.n	8004958 <MenuRefresh+0x150>
		{
//			GFX_DrawFillRectangle(5, (i*20) + OLED_MENU_Y_OFFSET, 123, 16, WHITE);
//			GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//			GFX_DrawString(20, (i*20) + OLED_MENU_Y_OFFSET + 1, temp->name, BLACK, 1);

			TempStr = temp->name;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a41      	ldr	r2, [pc, #260]	; (80049cc <MenuRefresh+0x1c4>)
 80048c8:	6013      	str	r3, [r2, #0]
			uint8_t TempStrLength = strlen(TempStr);
 80048ca:	4b40      	ldr	r3, [pc, #256]	; (80049cc <MenuRefresh+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fcaa 	bl	8000228 <strlen>
 80048d4:	4603      	mov	r3, r0
 80048d6:	70bb      	strb	r3, [r7, #2]
			TempStrLengthVar = -(TempStrLength * 5);
 80048d8:	78bb      	ldrb	r3, [r7, #2]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	0392      	lsls	r2, r2, #14
 80048e0:	1ad2      	subs	r2, r2, r3
 80048e2:	0092      	lsls	r2, r2, #2
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	b21a      	sxth	r2, r3
 80048ea:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <MenuRefresh+0x1c8>)
 80048ec:	801a      	strh	r2, [r3, #0]
			TempId = i;
 80048ee:	4a39      	ldr	r2, [pc, #228]	; (80049d4 <MenuRefresh+0x1cc>)
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	7013      	strb	r3, [r2, #0]

			if(TempStrLength >= 10)
 80048f4:	78bb      	ldrb	r3, [r7, #2]
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	d908      	bls.n	800490c <MenuRefresh+0x104>
			{
				ScrollEn = 1;
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <MenuRefresh+0x1d0>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
				ScrollFirst =1;
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <MenuRefresh+0x1d4>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
				ScrollString();
 8004906:	f000 f86b 	bl	80049e0 <ScrollString>
 800490a:	e039      	b.n	8004980 <MenuRefresh+0x178>
			}
			else
			{
				ScrollEn = 0;
 800490c:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <MenuRefresh+0x1d0>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
				GFX_DrawRectangle(17, ((i*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f103 0108 	add.w	r1, r3, #8
 8004920:	2301      	movs	r3, #1
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2312      	movs	r3, #18
 8004926:	226f      	movs	r2, #111	; 0x6f
 8004928:	2011      	movs	r0, #17
 800492a:	f7fc ffab 	bl	8001884 <GFX_DrawRectangle>
//				GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//				GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
				StateIndicator(temp, i);
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f91c 	bl	8004b70 <StateIndicator>
				GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, temp->name, WHITE, 1);
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	4613      	mov	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f103 010a 	add.w	r1, r3, #10
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2301      	movs	r3, #1
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	2301      	movs	r3, #1
 8004950:	2014      	movs	r0, #20
 8004952:	f7fc fe7f 	bl	8001654 <GFX_DrawString>
 8004956:	e013      	b.n	8004980 <MenuRefresh+0x178>

		}
		else
		{
//			GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
			StateIndicator(temp, i);
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	4619      	mov	r1, r3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f907 	bl	8004b70 <StateIndicator>
			GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET, temp->name, WHITE, 0);
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	f103 0109 	add.w	r1, r3, #9
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2301      	movs	r3, #1
 800497a:	2014      	movs	r0, #20
 800497c:	f7fc fe6a 	bl	8001654 <GFX_DrawString>
		}

		temp = temp -> next;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	607b      	str	r3, [r7, #4]
		if(!temp) break;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d006      	beq.n	800499a <MenuRefresh+0x192>
	for(i=0; i<OLED_ROWS; i++)
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	3301      	adds	r3, #1
 8004990:	70fb      	strb	r3, [r7, #3]
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d98f      	bls.n	80048b8 <MenuRefresh+0xb0>
	}
}
 8004998:	e000      	b.n	800499c <MenuRefresh+0x194>
		if(!temp) break;
 800499a:	bf00      	nop
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000004 	.word	0x20000004
 80049a8:	200000b0 	.word	0x200000b0
 80049ac:	20000318 	.word	0x20000318
 80049b0:	20000414 	.word	0x20000414
 80049b4:	200004f4 	.word	0x200004f4
 80049b8:	20000008 	.word	0x20000008
 80049bc:	08015c20 	.word	0x08015c20
 80049c0:	20001e8d 	.word	0x20001e8d
 80049c4:	20001e8e 	.word	0x20001e8e
 80049c8:	08015c70 	.word	0x08015c70
 80049cc:	20001e98 	.word	0x20001e98
 80049d0:	20001e96 	.word	0x20001e96
 80049d4:	20001e9c 	.word	0x20001e9c
 80049d8:	20001e9d 	.word	0x20001e9d
 80049dc:	20001e9e 	.word	0x20001e9e

080049e0 <ScrollString>:

void ScrollString(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af02      	add	r7, sp, #8
	  static int16_t ScrollVar = 20;
	  static int16_t ScrollVar2 = 123;

	  static uint32_t OldTick = 0;

	  if(ScrollFirst)
 80049e6:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <ScrollString+0x16c>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <ScrollString+0x2a>
	  {
		  ScrollFirst = 0;
 80049ee:	4b57      	ldr	r3, [pc, #348]	; (8004b4c <ScrollString+0x16c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
		  ScrollVar = 20;
 80049f4:	4b56      	ldr	r3, [pc, #344]	; (8004b50 <ScrollString+0x170>)
 80049f6:	2214      	movs	r2, #20
 80049f8:	801a      	strh	r2, [r3, #0]
		  ScrollVar2 = 123;
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <ScrollString+0x174>)
 80049fc:	227b      	movs	r2, #123	; 0x7b
 80049fe:	801a      	strh	r2, [r3, #0]
		  OldTick = HAL_GetTick();
 8004a00:	f001 fbf4 	bl	80061ec <HAL_GetTick>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4a54      	ldr	r2, [pc, #336]	; (8004b58 <ScrollString+0x178>)
 8004a08:	6013      	str	r3, [r2, #0]
	  }

	  if(ScrollEn)
 8004a0a:	4b54      	ldr	r3, [pc, #336]	; (8004b5c <ScrollString+0x17c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8098 	beq.w	8004b44 <ScrollString+0x164>
	  {

	  int16_t var = TempStrLengthVar;
 8004a14:	4b52      	ldr	r3, [pc, #328]	; (8004b60 <ScrollString+0x180>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	80fb      	strh	r3, [r7, #6]

	  	GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 128, 18, BLACK);
 8004a1a:	4b52      	ldr	r3, [pc, #328]	; (8004b64 <ScrollString+0x184>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4613      	mov	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4413      	add	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	f103 0108 	add.w	r1, r3, #8
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2312      	movs	r3, #18
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	2000      	movs	r0, #0
 8004a36:	f7fc ff52 	bl	80018de <GFX_DrawFillRectangle>
		if(ScrollVar>var-75)
 8004a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a3e:	3b4a      	subs	r3, #74	; 0x4a
 8004a40:	4a43      	ldr	r2, [pc, #268]	; (8004b50 <ScrollString+0x170>)
 8004a42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a46:	4293      	cmp	r3, r2
 8004a48:	dc13      	bgt.n	8004a72 <ScrollString+0x92>
		{
		GFX_DrawString(ScrollVar, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 8004a4a:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <ScrollString+0x170>)
 8004a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a50:	4618      	mov	r0, r3
 8004a52:	4b44      	ldr	r3, [pc, #272]	; (8004b64 <ScrollString+0x184>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	f103 010a 	add.w	r1, r3, #10
 8004a64:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <ScrollString+0x188>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2301      	movs	r3, #1
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f7fc fdf1 	bl	8001654 <GFX_DrawString>
		}

		GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 17, 18, BLACK);
 8004a72:	4b3c      	ldr	r3, [pc, #240]	; (8004b64 <ScrollString+0x184>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	f103 0108 	add.w	r1, r3, #8
 8004a84:	2300      	movs	r3, #0
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	2312      	movs	r3, #18
 8004a8a:	2211      	movs	r2, #17
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f7fc ff26 	bl	80018de <GFX_DrawFillRectangle>
//		GFX_DrawFillCircle(10, (TempId*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//		GFX_DrawChar(5, (TempId*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
		StateIndicator(CurrentPointer, TempId);
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <ScrollString+0x18c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a33      	ldr	r2, [pc, #204]	; (8004b64 <ScrollString+0x184>)
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f867 	bl	8004b70 <StateIndicator>
		GFX_DrawRectangle(17, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <ScrollString+0x184>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4413      	add	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	f103 0108 	add.w	r1, r3, #8
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2312      	movs	r3, #18
 8004aba:	226f      	movs	r2, #111	; 0x6f
 8004abc:	2011      	movs	r0, #17
 8004abe:	f7fc fee1 	bl	8001884 <GFX_DrawRectangle>

		if(HAL_GetTick() - OldTick >= SCROLL_FREEZE) ScrollVar--;
 8004ac2:	f001 fb93 	bl	80061ec <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <ScrollString+0x178>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ad2:	d308      	bcc.n	8004ae6 <ScrollString+0x106>
 8004ad4:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <ScrollString+0x170>)
 8004ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	b21a      	sxth	r2, r3
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <ScrollString+0x170>)
 8004ae4:	801a      	strh	r2, [r3, #0]

		  if(ScrollVar < var)
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <ScrollString+0x170>)
 8004ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	dd27      	ble.n	8004b44 <ScrollString+0x164>
		  {
			  GFX_DrawString(ScrollVar2, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 8004af4:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <ScrollString+0x174>)
 8004af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004afa:	4618      	mov	r0, r3
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <ScrollString+0x184>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	f103 010a 	add.w	r1, r3, #10
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <ScrollString+0x188>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2301      	movs	r3, #1
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2301      	movs	r3, #1
 8004b18:	f7fc fd9c 	bl	8001654 <GFX_DrawString>
			  ScrollVar2--;
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <ScrollString+0x174>)
 8004b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	b21a      	sxth	r2, r3
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <ScrollString+0x174>)
 8004b2c:	801a      	strh	r2, [r3, #0]
			  if(ScrollVar2 == 20)
 8004b2e:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <ScrollString+0x174>)
 8004b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b34:	2b14      	cmp	r3, #20
 8004b36:	d105      	bne.n	8004b44 <ScrollString+0x164>
			  {
				  ScrollVar = 20;
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <ScrollString+0x170>)
 8004b3a:	2214      	movs	r2, #20
 8004b3c:	801a      	strh	r2, [r3, #0]
				  ScrollVar2 = 123;
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <ScrollString+0x174>)
 8004b40:	227b      	movs	r2, #123	; 0x7b
 8004b42:	801a      	strh	r2, [r3, #0]
			  }
		  }

	  }

}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20001e9e 	.word	0x20001e9e
 8004b50:	20000628 	.word	0x20000628
 8004b54:	2000062a 	.word	0x2000062a
 8004b58:	20001ea0 	.word	0x20001ea0
 8004b5c:	20001e9d 	.word	0x20001e9d
 8004b60:	20001e96 	.word	0x20001e96
 8004b64:	20001e9c 	.word	0x20001e9c
 8004b68:	20001e98 	.word	0x20001e98
 8004b6c:	20000004 	.word	0x20000004

08004b70 <StateIndicator>:

static void StateIndicator(menu_t *menu, uint8_t pos)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
	if(menu == CurrentPointer)
 8004b7c:	4b5b      	ldr	r3, [pc, #364]	; (8004cec <StateIndicator+0x17c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d156      	bne.n	8004c34 <StateIndicator+0xc4>
	{
		if(menu->menu_state == 0 && menu->name != BackStr)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d113      	bne.n	8004bb8 <StateIndicator+0x48>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a56      	ldr	r2, [pc, #344]	; (8004cf0 <StateIndicator+0x180>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00e      	beq.n	8004bb8 <StateIndicator+0x48>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	f103 010a 	add.w	r1, r3, #10
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2301      	movs	r3, #1
 8004bae:	223e      	movs	r2, #62	; 0x3e
 8004bb0:	2005      	movs	r0, #5
 8004bb2:	f7fc fc95 	bl	80014e0 <GFX_DrawChar>
 8004bb6:	e094      	b.n	8004ce2 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 0 && menu->name == BackStr)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d113      	bne.n	8004bea <StateIndicator+0x7a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4a      	ldr	r2, [pc, #296]	; (8004cf0 <StateIndicator+0x180>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d10e      	bne.n	8004bea <StateIndicator+0x7a>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	f103 010a 	add.w	r1, r3, #10
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2301      	movs	r3, #1
 8004be0:	223c      	movs	r2, #60	; 0x3c
 8004be2:	2005      	movs	r0, #5
 8004be4:	f7fc fc7c 	bl	80014e0 <GFX_DrawChar>
 8004be8:	e07b      	b.n	8004ce2 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10c      	bne.n	8004c0e <StateIndicator+0x9e>
		{
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	f103 0111 	add.w	r1, r3, #17
 8004c02:	2301      	movs	r3, #1
 8004c04:	2204      	movs	r2, #4
 8004c06:	200a      	movs	r0, #10
 8004c08:	f7fd f829 	bl	8001c5e <GFX_DrawFillCircle>
		else if(menu->menu_state == -1)
		{
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
		}
	}
}
 8004c0c:	e069      	b.n	8004ce2 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d163      	bne.n	8004ce2 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	f103 0111 	add.w	r1, r3, #17
 8004c28:	2301      	movs	r3, #1
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	200a      	movs	r0, #10
 8004c2e:	f7fc fe79 	bl	8001924 <GFX_DrawCircle>
}
 8004c32:	e056      	b.n	8004ce2 <StateIndicator+0x172>
		if(menu->menu_state == 0 && menu->name != BackStr)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d113      	bne.n	8004c66 <StateIndicator+0xf6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <StateIndicator+0x180>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00e      	beq.n	8004c66 <StateIndicator+0xf6>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4413      	add	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	f103 010a 	add.w	r1, r3, #10
 8004c56:	2300      	movs	r3, #0
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	223e      	movs	r2, #62	; 0x3e
 8004c5e:	2005      	movs	r0, #5
 8004c60:	f7fc fc3e 	bl	80014e0 <GFX_DrawChar>
 8004c64:	e03d      	b.n	8004ce2 <StateIndicator+0x172>
		else if(menu->menu_state == 0 && menu->name == BackStr)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d113      	bne.n	8004c98 <StateIndicator+0x128>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <StateIndicator+0x180>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10e      	bne.n	8004c98 <StateIndicator+0x128>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4413      	add	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	f103 010a 	add.w	r1, r3, #10
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	223c      	movs	r2, #60	; 0x3c
 8004c90:	2005      	movs	r0, #5
 8004c92:	f7fc fc25 	bl	80014e0 <GFX_DrawChar>
 8004c96:	e024      	b.n	8004ce2 <StateIndicator+0x172>
		else if(menu->menu_state == 1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10c      	bne.n	8004cbc <StateIndicator+0x14c>
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	f103 0111 	add.w	r1, r3, #17
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	200a      	movs	r0, #10
 8004cb6:	f7fc ffd2 	bl	8001c5e <GFX_DrawFillCircle>
}
 8004cba:	e012      	b.n	8004ce2 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d10c      	bne.n	8004ce2 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	f103 0111 	add.w	r1, r3, #17
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	2204      	movs	r2, #4
 8004cda:	200a      	movs	r0, #10
 8004cdc:	f7fc fe22 	bl	8001924 <GFX_DrawCircle>
}
 8004ce0:	e7ff      	b.n	8004ce2 <StateIndicator+0x172>
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000004 	.word	0x20000004
 8004cf0:	08015e50 	.word	0x08015e50

08004cf4 <MenuIndicatorRefresh>:
extern TIM_HandleTypeDef htim4;

extern enum PwmFreqency;

void MenuIndicatorRefresh(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
	sub_menu1_6_1.menu_state =  ((GPIOE -> ODR >> 0)  & 1)? 1 : -1;
 8004cf8:	4bac      	ldr	r3, [pc, #688]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <MenuIndicatorRefresh+0x14>
 8004d04:	2201      	movs	r2, #1
 8004d06:	e001      	b.n	8004d0c <MenuIndicatorRefresh+0x18>
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0c:	4ba8      	ldr	r3, [pc, #672]	; (8004fb0 <MenuIndicatorRefresh+0x2bc>)
 8004d0e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_2.menu_state =  ((GPIOE -> ODR >> 1)  & 1)? 1 : -1;
 8004d10:	4ba6      	ldr	r3, [pc, #664]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <MenuIndicatorRefresh+0x2e>
 8004d1e:	2201      	movs	r2, #1
 8004d20:	e001      	b.n	8004d26 <MenuIndicatorRefresh+0x32>
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	4ba3      	ldr	r3, [pc, #652]	; (8004fb4 <MenuIndicatorRefresh+0x2c0>)
 8004d28:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_3.menu_state =  ((GPIOE -> ODR >> 2)  & 1)? 1 : -1;
 8004d2a:	4ba0      	ldr	r3, [pc, #640]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <MenuIndicatorRefresh+0x48>
 8004d38:	2201      	movs	r2, #1
 8004d3a:	e001      	b.n	8004d40 <MenuIndicatorRefresh+0x4c>
 8004d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d40:	4b9d      	ldr	r3, [pc, #628]	; (8004fb8 <MenuIndicatorRefresh+0x2c4>)
 8004d42:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_4.menu_state =  ((GPIOE -> ODR >> 3)  & 1)? 1 : -1;
 8004d44:	4b99      	ldr	r3, [pc, #612]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <MenuIndicatorRefresh+0x62>
 8004d52:	2201      	movs	r2, #1
 8004d54:	e001      	b.n	8004d5a <MenuIndicatorRefresh+0x66>
 8004d56:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5a:	4b98      	ldr	r3, [pc, #608]	; (8004fbc <MenuIndicatorRefresh+0x2c8>)
 8004d5c:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_5.menu_state =  ((GPIOE -> ODR >> 4)  & 1)? 1 : -1;
 8004d5e:	4b93      	ldr	r3, [pc, #588]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MenuIndicatorRefresh+0x7c>
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	e001      	b.n	8004d74 <MenuIndicatorRefresh+0x80>
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295
 8004d74:	4b92      	ldr	r3, [pc, #584]	; (8004fc0 <MenuIndicatorRefresh+0x2cc>)
 8004d76:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_6.menu_state =  ((GPIOE -> ODR >> 5)  & 1)? 1 : -1;
 8004d78:	4b8c      	ldr	r3, [pc, #560]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <MenuIndicatorRefresh+0x96>
 8004d86:	2201      	movs	r2, #1
 8004d88:	e001      	b.n	8004d8e <MenuIndicatorRefresh+0x9a>
 8004d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8e:	4b8d      	ldr	r3, [pc, #564]	; (8004fc4 <MenuIndicatorRefresh+0x2d0>)
 8004d90:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_7.menu_state =  ((GPIOE -> ODR >> 6)  & 1)? 1 : -1;
 8004d92:	4b86      	ldr	r3, [pc, #536]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MenuIndicatorRefresh+0xb0>
 8004da0:	2201      	movs	r2, #1
 8004da2:	e001      	b.n	8004da8 <MenuIndicatorRefresh+0xb4>
 8004da4:	f04f 32ff 	mov.w	r2, #4294967295
 8004da8:	4b87      	ldr	r3, [pc, #540]	; (8004fc8 <MenuIndicatorRefresh+0x2d4>)
 8004daa:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_8.menu_state =  ((GPIOE -> ODR >> 7)  & 1)? 1 : -1;
 8004dac:	4b7f      	ldr	r3, [pc, #508]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	09db      	lsrs	r3, r3, #7
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MenuIndicatorRefresh+0xca>
 8004dba:	2201      	movs	r2, #1
 8004dbc:	e001      	b.n	8004dc2 <MenuIndicatorRefresh+0xce>
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	4b82      	ldr	r3, [pc, #520]	; (8004fcc <MenuIndicatorRefresh+0x2d8>)
 8004dc4:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_9.menu_state =  ((GPIOE -> ODR >> 8)  & 1)? 1 : -1;
 8004dc6:	4b79      	ldr	r3, [pc, #484]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MenuIndicatorRefresh+0xe4>
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	e001      	b.n	8004ddc <MenuIndicatorRefresh+0xe8>
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ddc:	4b7c      	ldr	r3, [pc, #496]	; (8004fd0 <MenuIndicatorRefresh+0x2dc>)
 8004dde:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_10.menu_state = ((GPIOE -> ODR >> 9)  & 1)? 1 : -1;
 8004de0:	4b72      	ldr	r3, [pc, #456]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	0a5b      	lsrs	r3, r3, #9
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <MenuIndicatorRefresh+0xfe>
 8004dee:	2201      	movs	r2, #1
 8004df0:	e001      	b.n	8004df6 <MenuIndicatorRefresh+0x102>
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295
 8004df6:	4b77      	ldr	r3, [pc, #476]	; (8004fd4 <MenuIndicatorRefresh+0x2e0>)
 8004df8:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_11.menu_state = ((GPIOE -> ODR >> 10) & 1)? 1 : -1;
 8004dfa:	4b6c      	ldr	r3, [pc, #432]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	0a9b      	lsrs	r3, r3, #10
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <MenuIndicatorRefresh+0x118>
 8004e08:	2201      	movs	r2, #1
 8004e0a:	e001      	b.n	8004e10 <MenuIndicatorRefresh+0x11c>
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	4b71      	ldr	r3, [pc, #452]	; (8004fd8 <MenuIndicatorRefresh+0x2e4>)
 8004e12:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_12.menu_state = ((GPIOE -> ODR >> 11) & 1)? 1 : -1;
 8004e14:	4b65      	ldr	r3, [pc, #404]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	0adb      	lsrs	r3, r3, #11
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MenuIndicatorRefresh+0x132>
 8004e22:	2201      	movs	r2, #1
 8004e24:	e001      	b.n	8004e2a <MenuIndicatorRefresh+0x136>
 8004e26:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2a:	4b6c      	ldr	r3, [pc, #432]	; (8004fdc <MenuIndicatorRefresh+0x2e8>)
 8004e2c:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_13.menu_state = ((GPIOE -> ODR >> 12) & 1)? 1 : -1;
 8004e2e:	4b5f      	ldr	r3, [pc, #380]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	0b1b      	lsrs	r3, r3, #12
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <MenuIndicatorRefresh+0x14c>
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	e001      	b.n	8004e44 <MenuIndicatorRefresh+0x150>
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	4b66      	ldr	r3, [pc, #408]	; (8004fe0 <MenuIndicatorRefresh+0x2ec>)
 8004e46:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_14.menu_state = ((GPIOE -> ODR >> 13) & 1)? 1 : -1;
 8004e48:	4b58      	ldr	r3, [pc, #352]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	0b5b      	lsrs	r3, r3, #13
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MenuIndicatorRefresh+0x166>
 8004e56:	2201      	movs	r2, #1
 8004e58:	e001      	b.n	8004e5e <MenuIndicatorRefresh+0x16a>
 8004e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5e:	4b61      	ldr	r3, [pc, #388]	; (8004fe4 <MenuIndicatorRefresh+0x2f0>)
 8004e60:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_15.menu_state = ((GPIOE -> ODR >> 14) & 1)? 1 : -1;
 8004e62:	4b52      	ldr	r3, [pc, #328]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	0b9b      	lsrs	r3, r3, #14
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MenuIndicatorRefresh+0x180>
 8004e70:	2201      	movs	r2, #1
 8004e72:	e001      	b.n	8004e78 <MenuIndicatorRefresh+0x184>
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295
 8004e78:	4b5b      	ldr	r3, [pc, #364]	; (8004fe8 <MenuIndicatorRefresh+0x2f4>)
 8004e7a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_16.menu_state = ((GPIOE -> ODR >> 15) & 1)? 1 : -1;
 8004e7c:	4b4b      	ldr	r3, [pc, #300]	; (8004fac <MenuIndicatorRefresh+0x2b8>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	0bdb      	lsrs	r3, r3, #15
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <MenuIndicatorRefresh+0x19a>
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	e001      	b.n	8004e92 <MenuIndicatorRefresh+0x19e>
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	4b56      	ldr	r3, [pc, #344]	; (8004fec <MenuIndicatorRefresh+0x2f8>)
 8004e94:	761a      	strb	r2, [r3, #24]

	sub_menu3_1_1_1.menu_state = (Logo.Mode == 0)? 1 : -1;
 8004e96:	4b56      	ldr	r3, [pc, #344]	; (8004ff0 <MenuIndicatorRefresh+0x2fc>)
 8004e98:	f993 3000 	ldrsb.w	r3, [r3]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <MenuIndicatorRefresh+0x1b0>
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	e001      	b.n	8004ea8 <MenuIndicatorRefresh+0x1b4>
 8004ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea8:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <MenuIndicatorRefresh+0x300>)
 8004eaa:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_2.menu_state = (Logo.Mode == 1)? 1 : -1;
 8004eac:	4b50      	ldr	r3, [pc, #320]	; (8004ff0 <MenuIndicatorRefresh+0x2fc>)
 8004eae:	f993 3000 	ldrsb.w	r3, [r3]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <MenuIndicatorRefresh+0x1c6>
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	e001      	b.n	8004ebe <MenuIndicatorRefresh+0x1ca>
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	4b4e      	ldr	r3, [pc, #312]	; (8004ff8 <MenuIndicatorRefresh+0x304>)
 8004ec0:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_3.menu_state = (Logo.Mode == 2)? 1 : -1;
 8004ec2:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <MenuIndicatorRefresh+0x2fc>)
 8004ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d101      	bne.n	8004ed0 <MenuIndicatorRefresh+0x1dc>
 8004ecc:	2201      	movs	r2, #1
 8004ece:	e001      	b.n	8004ed4 <MenuIndicatorRefresh+0x1e0>
 8004ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed4:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <MenuIndicatorRefresh+0x308>)
 8004ed6:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_4.menu_state = (Logo.Mode == 3)? 1 : -1;
 8004ed8:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <MenuIndicatorRefresh+0x2fc>)
 8004eda:	f993 3000 	ldrsb.w	r3, [r3]
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d101      	bne.n	8004ee6 <MenuIndicatorRefresh+0x1f2>
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	e001      	b.n	8004eea <MenuIndicatorRefresh+0x1f6>
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	4b45      	ldr	r3, [pc, #276]	; (8005000 <MenuIndicatorRefresh+0x30c>)
 8004eec:	761a      	strb	r2, [r3, #24]

	sub_menu3_2_1_1.menu_state = (Light.Mode == 0)? 1 : -1;
 8004eee:	4b45      	ldr	r3, [pc, #276]	; (8005004 <MenuIndicatorRefresh+0x310>)
 8004ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <MenuIndicatorRefresh+0x208>
 8004ef8:	2201      	movs	r2, #1
 8004efa:	e001      	b.n	8004f00 <MenuIndicatorRefresh+0x20c>
 8004efc:	f04f 32ff 	mov.w	r2, #4294967295
 8004f00:	4b41      	ldr	r3, [pc, #260]	; (8005008 <MenuIndicatorRefresh+0x314>)
 8004f02:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_2.menu_state = (Light.Mode == 1)? 1 : -1;
 8004f04:	4b3f      	ldr	r3, [pc, #252]	; (8005004 <MenuIndicatorRefresh+0x310>)
 8004f06:	f993 3000 	ldrsb.w	r3, [r3]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <MenuIndicatorRefresh+0x21e>
 8004f0e:	2201      	movs	r2, #1
 8004f10:	e001      	b.n	8004f16 <MenuIndicatorRefresh+0x222>
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	4b3d      	ldr	r3, [pc, #244]	; (800500c <MenuIndicatorRefresh+0x318>)
 8004f18:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_3.menu_state = (Light.Mode == 2)? 1 : -1;
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <MenuIndicatorRefresh+0x310>)
 8004f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d101      	bne.n	8004f28 <MenuIndicatorRefresh+0x234>
 8004f24:	2201      	movs	r2, #1
 8004f26:	e001      	b.n	8004f2c <MenuIndicatorRefresh+0x238>
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	4b38      	ldr	r3, [pc, #224]	; (8005010 <MenuIndicatorRefresh+0x31c>)
 8004f2e:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_4.menu_state = (Light.Mode == 3)? 1 : -1;
 8004f30:	4b34      	ldr	r3, [pc, #208]	; (8005004 <MenuIndicatorRefresh+0x310>)
 8004f32:	f993 3000 	ldrsb.w	r3, [r3]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d101      	bne.n	8004f3e <MenuIndicatorRefresh+0x24a>
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	e001      	b.n	8004f42 <MenuIndicatorRefresh+0x24e>
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	4b34      	ldr	r3, [pc, #208]	; (8005014 <MenuIndicatorRefresh+0x320>)
 8004f44:	761a      	strb	r2, [r3, #24]

	sub_menu3_3_1.menu_state = (htim4.Init.Prescaler ==  HZ60)? 1 : -1;
 8004f46:	4b34      	ldr	r3, [pc, #208]	; (8005018 <MenuIndicatorRefresh+0x324>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f240 42af 	movw	r2, #1199	; 0x4af
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d101      	bne.n	8004f56 <MenuIndicatorRefresh+0x262>
 8004f52:	2201      	movs	r2, #1
 8004f54:	e001      	b.n	8004f5a <MenuIndicatorRefresh+0x266>
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5a:	4b30      	ldr	r3, [pc, #192]	; (800501c <MenuIndicatorRefresh+0x328>)
 8004f5c:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_2.menu_state = (htim4.Init.Prescaler == HZ100)? 1 : -1;
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <MenuIndicatorRefresh+0x324>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <MenuIndicatorRefresh+0x27a>
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	e001      	b.n	8004f72 <MenuIndicatorRefresh+0x27e>
 8004f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <MenuIndicatorRefresh+0x32c>)
 8004f74:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_3.menu_state = (htim4.Init.Prescaler == HZ200)? 1 : -1;
 8004f76:	4b28      	ldr	r3, [pc, #160]	; (8005018 <MenuIndicatorRefresh+0x324>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f240 1267 	movw	r2, #359	; 0x167
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <MenuIndicatorRefresh+0x292>
 8004f82:	2201      	movs	r2, #1
 8004f84:	e001      	b.n	8004f8a <MenuIndicatorRefresh+0x296>
 8004f86:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8a:	4b26      	ldr	r3, [pc, #152]	; (8005024 <MenuIndicatorRefresh+0x330>)
 8004f8c:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_4.menu_state = (htim4.Init.Prescaler == HZ300)? 1 : -1;
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <MenuIndicatorRefresh+0x324>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2bef      	cmp	r3, #239	; 0xef
 8004f94:	d101      	bne.n	8004f9a <MenuIndicatorRefresh+0x2a6>
 8004f96:	2201      	movs	r2, #1
 8004f98:	e001      	b.n	8004f9e <MenuIndicatorRefresh+0x2aa>
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9e:	4b22      	ldr	r3, [pc, #136]	; (8005028 <MenuIndicatorRefresh+0x334>)
 8004fa0:	761a      	strb	r2, [r3, #24]
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40011800 	.word	0x40011800
 8004fb0:	200000cc 	.word	0x200000cc
 8004fb4:	200000e8 	.word	0x200000e8
 8004fb8:	20000104 	.word	0x20000104
 8004fbc:	20000120 	.word	0x20000120
 8004fc0:	2000013c 	.word	0x2000013c
 8004fc4:	20000158 	.word	0x20000158
 8004fc8:	20000174 	.word	0x20000174
 8004fcc:	20000190 	.word	0x20000190
 8004fd0:	200001ac 	.word	0x200001ac
 8004fd4:	200001c8 	.word	0x200001c8
 8004fd8:	200001e4 	.word	0x200001e4
 8004fdc:	20000200 	.word	0x20000200
 8004fe0:	2000021c 	.word	0x2000021c
 8004fe4:	20000238 	.word	0x20000238
 8004fe8:	20000254 	.word	0x20000254
 8004fec:	20000270 	.word	0x20000270
 8004ff0:	20001e60 	.word	0x20001e60
 8004ff4:	20000334 	.word	0x20000334
 8004ff8:	20000350 	.word	0x20000350
 8004ffc:	2000036c 	.word	0x2000036c
 8005000:	20000388 	.word	0x20000388
 8005004:	20001e74 	.word	0x20001e74
 8005008:	20000430 	.word	0x20000430
 800500c:	2000044c 	.word	0x2000044c
 8005010:	20000468 	.word	0x20000468
 8005014:	20000484 	.word	0x20000484
 8005018:	20002738 	.word	0x20002738
 800501c:	20000510 	.word	0x20000510
 8005020:	2000052c 	.word	0x2000052c
 8005024:	20000548 	.word	0x20000548
 8005028:	20000564 	.word	0x20000564

0800502c <SetOut0>:

void SetOut0(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
	OutputPinToggle(0);
 8005030:	2000      	movs	r0, #0
 8005032:	f7fd fe67 	bl	8002d04 <OutputPinToggle>
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}

0800503a <SetOut1>:

void SetOut1(void)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	af00      	add	r7, sp, #0
	OutputPinToggle(1);
 800503e:	2001      	movs	r0, #1
 8005040:	f7fd fe60 	bl	8002d04 <OutputPinToggle>
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}

08005048 <SetOut2>:

void SetOut2(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
	OutputPinToggle(2);
 800504c:	2002      	movs	r0, #2
 800504e:	f7fd fe59 	bl	8002d04 <OutputPinToggle>
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}

08005056 <SetOut3>:

void SetOut3(void)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	af00      	add	r7, sp, #0
	OutputPinToggle(3);
 800505a:	2003      	movs	r0, #3
 800505c:	f7fd fe52 	bl	8002d04 <OutputPinToggle>
}
 8005060:	bf00      	nop
 8005062:	bd80      	pop	{r7, pc}

08005064 <SetOut4>:

void SetOut4(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
	OutputPinToggle(4);
 8005068:	2004      	movs	r0, #4
 800506a:	f7fd fe4b 	bl	8002d04 <OutputPinToggle>
}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}

08005072 <SetOut5>:

void SetOut5(void)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	af00      	add	r7, sp, #0
	OutputPinToggle(5);
 8005076:	2005      	movs	r0, #5
 8005078:	f7fd fe44 	bl	8002d04 <OutputPinToggle>
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}

08005080 <SetOut6>:

void SetOut6(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
	OutputPinToggle(6);
 8005084:	2006      	movs	r0, #6
 8005086:	f7fd fe3d 	bl	8002d04 <OutputPinToggle>
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}

0800508e <SetOut7>:

void SetOut7(void)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	af00      	add	r7, sp, #0
	OutputPinToggle(7);
 8005092:	2007      	movs	r0, #7
 8005094:	f7fd fe36 	bl	8002d04 <OutputPinToggle>
}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}

0800509c <SetOut8>:

void SetOut8(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	OutputPinToggle(8);
 80050a0:	2008      	movs	r0, #8
 80050a2:	f7fd fe2f 	bl	8002d04 <OutputPinToggle>
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}

080050aa <SetOut9>:

void SetOut9(void)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	af00      	add	r7, sp, #0
	OutputPinToggle(9);
 80050ae:	2009      	movs	r0, #9
 80050b0:	f7fd fe28 	bl	8002d04 <OutputPinToggle>
}
 80050b4:	bf00      	nop
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <SetOut10>:

void SetOut10(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
	OutputPinToggle(10);
 80050bc:	200a      	movs	r0, #10
 80050be:	f7fd fe21 	bl	8002d04 <OutputPinToggle>
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <SetOut11>:

void SetOut11(void)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	af00      	add	r7, sp, #0
	OutputPinToggle(11);
 80050ca:	200b      	movs	r0, #11
 80050cc:	f7fd fe1a 	bl	8002d04 <OutputPinToggle>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SetOut12>:

void SetOut12(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	OutputPinToggle(12);
 80050d8:	200c      	movs	r0, #12
 80050da:	f7fd fe13 	bl	8002d04 <OutputPinToggle>
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <SetOut13>:

void SetOut13(void)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	af00      	add	r7, sp, #0
	OutputPinToggle(13);
 80050e6:	200d      	movs	r0, #13
 80050e8:	f7fd fe0c 	bl	8002d04 <OutputPinToggle>
}
 80050ec:	bf00      	nop
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <SetOut14>:

void SetOut14(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	OutputPinToggle(14);
 80050f4:	200e      	movs	r0, #14
 80050f6:	f7fd fe05 	bl	8002d04 <OutputPinToggle>
}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}

080050fe <SetOut15>:

void SetOut15(void)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	af00      	add	r7, sp, #0
	OutputPinToggle(15);
 8005102:	200f      	movs	r0, #15
 8005104:	f7fd fdfe 	bl	8002d04 <OutputPinToggle>
}
 8005108:	bf00      	nop
 800510a:	bd80      	pop	{r7, pc}

0800510c <SetModeLogo0>:

void SetModeLogo0(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	LogoLedSetParameter(0, 0, 0);
 8005110:	2200      	movs	r2, #0
 8005112:	2100      	movs	r1, #0
 8005114:	2000      	movs	r0, #0
 8005116:	f7fd fe71 	bl	8002dfc <LogoLedSetParameter>
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}

0800511e <SetModeLogo1>:

void SetModeLogo1(void)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	af00      	add	r7, sp, #0
	LogoLedSetParameter(1, 0, 0);
 8005122:	2200      	movs	r2, #0
 8005124:	2100      	movs	r1, #0
 8005126:	2001      	movs	r0, #1
 8005128:	f7fd fe68 	bl	8002dfc <LogoLedSetParameter>
}
 800512c:	bf00      	nop
 800512e:	bd80      	pop	{r7, pc}

08005130 <SetModeLogo2>:

void SetModeLogo2(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
	LogoLedSetParameter(2, 0, 0);
 8005134:	2200      	movs	r2, #0
 8005136:	2100      	movs	r1, #0
 8005138:	2002      	movs	r0, #2
 800513a:	f7fd fe5f 	bl	8002dfc <LogoLedSetParameter>
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}

08005142 <SetModeLogo3>:

void SetModeLogo3(void)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	af00      	add	r7, sp, #0
	LogoLedSetParameter(3, 0, 0);
 8005146:	2200      	movs	r2, #0
 8005148:	2100      	movs	r1, #0
 800514a:	2003      	movs	r0, #3
 800514c:	f7fd fe56 	bl	8002dfc <LogoLedSetParameter>
}
 8005150:	bf00      	nop
 8005152:	bd80      	pop	{r7, pc}

08005154 <SetModeLight0>:

void SetModeLight0(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
	LightLedSetParameter(0, 0, 0);
 8005158:	2200      	movs	r2, #0
 800515a:	2100      	movs	r1, #0
 800515c:	2000      	movs	r0, #0
 800515e:	f7fd fe6d 	bl	8002e3c <LightLedSetParameter>
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}

08005166 <SetModeLight1>:
void SetModeLight1(void)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	af00      	add	r7, sp, #0
	LightLedSetParameter(1, 0, 0);
 800516a:	2200      	movs	r2, #0
 800516c:	2100      	movs	r1, #0
 800516e:	2001      	movs	r0, #1
 8005170:	f7fd fe64 	bl	8002e3c <LightLedSetParameter>
}
 8005174:	bf00      	nop
 8005176:	bd80      	pop	{r7, pc}

08005178 <SetModeLight2>:
void SetModeLight2(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
	LightLedSetParameter(2, 0, 0);
 800517c:	2200      	movs	r2, #0
 800517e:	2100      	movs	r1, #0
 8005180:	2002      	movs	r0, #2
 8005182:	f7fd fe5b 	bl	8002e3c <LightLedSetParameter>
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}

0800518a <SetModeLight3>:
void SetModeLight3(void)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	af00      	add	r7, sp, #0
	LightLedSetParameter(3, 0, 0);
 800518e:	2200      	movs	r2, #0
 8005190:	2100      	movs	r1, #0
 8005192:	2003      	movs	r0, #3
 8005194:	f7fd fe52 	bl	8002e3c <LightLedSetParameter>
}
 8005198:	bf00      	nop
 800519a:	bd80      	pop	{r7, pc}

0800519c <SetPwmFreq60>:

void SetPwmFreq60(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ60);
 80051a0:	f240 40af 	movw	r0, #1199	; 0x4af
 80051a4:	f7fd fd5c 	bl	8002c60 <PwmFreqSet>
}
 80051a8:	bf00      	nop
 80051aa:	bd80      	pop	{r7, pc}

080051ac <SetPwmFreq100>:

void SetPwmFreq100(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ100);
 80051b0:	f240 20cf 	movw	r0, #719	; 0x2cf
 80051b4:	f7fd fd54 	bl	8002c60 <PwmFreqSet>
}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}

080051bc <SetPwmFreq200>:

void SetPwmFreq200(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ200);
 80051c0:	f240 1067 	movw	r0, #359	; 0x167
 80051c4:	f7fd fd4c 	bl	8002c60 <PwmFreqSet>
}
 80051c8:	bf00      	nop
 80051ca:	bd80      	pop	{r7, pc}

080051cc <SetPwmFreq300>:

void SetPwmFreq300(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ300);
 80051d0:	20ef      	movs	r0, #239	; 0xef
 80051d2:	f7fd fd45 	bl	8002c60 <PwmFreqSet>
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}

080051da <Parser_TakeLine>:
		{LIGHT_PARAM, LightLedSetParameter, 3},
		{LOGO_PARAM, LogoLedSetParameter, 3}
};

void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]
	  uint8_t tmp = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	73bb      	strb	r3, [r7, #14]
	do
	{
		 Ring_Buffer_Read(Buff, &tmp);
 80051ec:	f107 030e 	add.w	r3, r7, #14
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f882 	bl	80052fc <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	2b5e      	cmp	r3, #94	; 0x5e
 80051fc:	d105      	bne.n	800520a <Parser_TakeLine+0x30>
			{
			 Destination[i] = 0;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	4413      	add	r3, r2
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e004      	b.n	8005214 <Parser_TakeLine+0x3a>
			}
		else
			{
			Destination[i] = tmp;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	4413      	add	r3, r2
 8005210:	7bba      	ldrb	r2, [r7, #14]
 8005212:	701a      	strb	r2, [r3, #0]
			}

			i++;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	3301      	adds	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]

	} while(tmp != ENDLINE);
 800521a:	7bbb      	ldrb	r3, [r7, #14]
 800521c:	2b5e      	cmp	r3, #94	; 0x5e
 800521e:	d1e5      	bne.n	80051ec <Parser_TakeLine+0x12>
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <Parser_parse>:




void Parser_parse(uint8_t * DataToParse)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	char * ParsePointer = strtok((char*)DataToParse, "/");
 8005234:	492d      	ldr	r1, [pc, #180]	; (80052ec <Parser_parse+0xc0>)
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f00e f8a0 	bl	801337c <strtok>
 800523c:	6138      	str	r0, [r7, #16]
	uint8_t CommandID = atoi(ParsePointer);
 800523e:	6938      	ldr	r0, [r7, #16]
 8005240:	f00d fbe6 	bl	8012a10 <atoi>
 8005244:	4603      	mov	r3, r0
 8005246:	73fb      	strb	r3, [r7, #15]

	if(CommandMapper[CommandID].Action != NULL)
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	4929      	ldr	r1, [pc, #164]	; (80052f0 <Parser_parse+0xc4>)
 800524c:	4613      	mov	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	3304      	adds	r3, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d041      	beq.n	80052e2 <Parser_parse+0xb6>
	{
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]
 8005262:	e00f      	b.n	8005284 <Parser_parse+0x58>
		{
			char * ParsePointer = strtok(NULL, "/");
 8005264:	4921      	ldr	r1, [pc, #132]	; (80052ec <Parser_parse+0xc0>)
 8005266:	2000      	movs	r0, #0
 8005268:	f00e f888 	bl	801337c <strtok>
 800526c:	60b8      	str	r0, [r7, #8]
			ReceivedCommandArgument[i] = atoi(ParsePointer);
 800526e:	7dfc      	ldrb	r4, [r7, #23]
 8005270:	68b8      	ldr	r0, [r7, #8]
 8005272:	f00d fbcd 	bl	8012a10 <atoi>
 8005276:	4603      	mov	r3, r0
 8005278:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <Parser_parse+0xc8>)
 800527a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	3301      	adds	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	491a      	ldr	r1, [pc, #104]	; (80052f0 <Parser_parse+0xc4>)
 8005288:	4613      	mov	r3, r2
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	3308      	adds	r3, #8
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	7dfa      	ldrb	r2, [r7, #23]
 8005298:	429a      	cmp	r2, r3
 800529a:	d3e3      	bcc.n	8005264 <Parser_parse+0x38>
		}

 		CommandMapper[CommandID].Action(ReceivedCommandArgument[0], ReceivedCommandArgument[1], ReceivedCommandArgument[2], ReceivedCommandArgument[3]);
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	4914      	ldr	r1, [pc, #80]	; (80052f0 <Parser_parse+0xc4>)
 80052a0:	4613      	mov	r3, r2
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	3304      	adds	r3, #4
 80052ac:	681c      	ldr	r4, [r3, #0]
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <Parser_parse+0xc8>)
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <Parser_parse+0xc8>)
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <Parser_parse+0xc8>)
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <Parser_parse+0xc8>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	47a0      	blx	r4

 		//Earising argument buffer
 		for(uint8_t i=0; i<ReceivedArgumentSize; i++)
 80052c0:	2300      	movs	r3, #0
 80052c2:	75bb      	strb	r3, [r7, #22]
 80052c4:	e007      	b.n	80052d6 <Parser_parse+0xaa>
 		{
 			ReceivedCommandArgument[i] = 0;
 80052c6:	7dbb      	ldrb	r3, [r7, #22]
 80052c8:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <Parser_parse+0xc8>)
 80052ca:	2100      	movs	r1, #0
 80052cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 		for(uint8_t i=0; i<ReceivedArgumentSize; i++)
 80052d0:	7dbb      	ldrb	r3, [r7, #22]
 80052d2:	3301      	adds	r3, #1
 80052d4:	75bb      	strb	r3, [r7, #22]
 80052d6:	7dbb      	ldrb	r3, [r7, #22]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	d9f4      	bls.n	80052c6 <Parser_parse+0x9a>
 		}
 		UsbBuffWrite("OK");
 80052dc:	4806      	ldr	r0, [pc, #24]	; (80052f8 <Parser_parse+0xcc>)
 80052de:	f7ff f82b 	bl	8004338 <UsbBuffWrite>
	}
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	08015c28 	.word	0x08015c28
 80052f0:	2000062c 	.word	0x2000062c
 80052f4:	20001ea4 	.word	0x20001ea4
 80052f8:	08015c2c 	.word	0x08015c2c

080052fc <Ring_Buffer_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	885b      	ldrh	r3, [r3, #2]
 800530e:	429a      	cmp	r2, r3
 8005310:	d101      	bne.n	8005316 <Ring_Buffer_Read+0x1a>
	{
		return RB_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e015      	b.n	8005342 <Ring_Buffer_Read+0x46>
	}
	*value = Buff->Buffer[Buff->Tail];
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	885b      	ldrh	r3, [r3, #2]
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	791a      	ldrb	r2, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	701a      	strb	r2, [r3, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	885b      	ldrh	r3, [r3, #2]
 800532a:	3301      	adds	r3, #1
 800532c:	425a      	negs	r2, r3
 800532e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005332:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005336:	bf58      	it	pl
 8005338:	4253      	negpl	r3, r2
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	425a      	negs	r2, r3
 8005360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005364:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005368:	bf58      	it	pl
 800536a:	4253      	negpl	r3, r2
 800536c:	81fb      	strh	r3, [r7, #14]

	if(Head_tmp == Buff->Tail)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	885b      	ldrh	r3, [r3, #2]
 8005372:	89fa      	ldrh	r2, [r7, #14]
 8005374:	429a      	cmp	r2, r3
 8005376:	d101      	bne.n	800537c <Ring_Buffer_Write+0x30>
	{
		return RB_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e00a      	b.n	8005392 <Ring_Buffer_Write+0x46>
	}
	Buff->Buffer[Buff->Head] = value;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	711a      	strb	r2, [r3, #4]
	Buff->Head = Head_tmp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	89fa      	ldrh	r2, [r7, #14]
 800538e:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <Ring_Buffer_Flush>:

void Ring_Buffer_Flush(RingBuffer_t * Buff)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	801a      	strh	r2, [r3, #0]
	Buff->Tail = 0;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	805a      	strh	r2, [r3, #2]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
	...

080053bc <SSD1306_Command>:

static uint8_t buffer[SSD1306_BUFFER_SIZE];
static uint8_t buffer_disp[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af04      	add	r7, sp, #16
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <SSD1306_Command+0x30>)
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ce:	9302      	str	r3, [sp, #8]
 80053d0:	2301      	movs	r3, #1
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	1dfb      	adds	r3, r7, #7
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2301      	movs	r3, #1
 80053da:	2200      	movs	r2, #0
 80053dc:	2178      	movs	r1, #120	; 0x78
 80053de:	f002 fc4f 	bl	8007c80 <HAL_I2C_Mem_Write>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20001ee4 	.word	0x20001ee4

080053f0 <SSD1306_Data>:

static void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA

	if(oled_i2c -> hdmatx -> State == HAL_DMA_STATE_READY)
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <SSD1306_Data+0x3c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10a      	bne.n	8005422 <SSD1306_Data+0x32>
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size);
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <SSD1306_Data+0x3c>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	887b      	ldrh	r3, [r7, #2]
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2301      	movs	r3, #1
 800541a:	2240      	movs	r2, #64	; 0x40
 800541c:	2178      	movs	r1, #120	; 0x78
 800541e:	f002 ff91 	bl	8008344 <HAL_I2C_Mem_Write_DMA>
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20001ee4 	.word	0x20001ee4

08005430 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	80fb      	strh	r3, [r7, #6]
 800543a:	460b      	mov	r3, r1
 800543c:	80bb      	strh	r3, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8005442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db79      	blt.n	800553e <SSD1306_DrawPixel+0x10e>
 800544a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800544e:	2b7f      	cmp	r3, #127	; 0x7f
 8005450:	dc75      	bgt.n	800553e <SSD1306_DrawPixel+0x10e>
 8005452:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db71      	blt.n	800553e <SSD1306_DrawPixel+0x10e>
 800545a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800545e:	2b3f      	cmp	r3, #63	; 0x3f
 8005460:	dc6d      	bgt.n	800553e <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d049      	beq.n	80054fc <SSD1306_DrawPixel+0xcc>
 8005468:	2b02      	cmp	r3, #2
 800546a:	dc69      	bgt.n	8005540 <SSD1306_DrawPixel+0x110>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d022      	beq.n	80054b6 <SSD1306_DrawPixel+0x86>
 8005470:	2b01      	cmp	r3, #1
 8005472:	d165      	bne.n	8005540 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8005474:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005478:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	da00      	bge.n	8005482 <SSD1306_DrawPixel+0x52>
 8005480:	3307      	adds	r3, #7
 8005482:	10db      	asrs	r3, r3, #3
 8005484:	b218      	sxth	r0, r3
 8005486:	4603      	mov	r3, r0
 8005488:	01db      	lsls	r3, r3, #7
 800548a:	4413      	add	r3, r2
 800548c:	4a2e      	ldr	r2, [pc, #184]	; (8005548 <SSD1306_DrawPixel+0x118>)
 800548e:	5cd3      	ldrb	r3, [r2, r3]
 8005490:	b25a      	sxtb	r2, r3
 8005492:	88bb      	ldrh	r3, [r7, #4]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	2101      	movs	r1, #1
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	b25b      	sxtb	r3, r3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	b259      	sxtb	r1, r3
 80054a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054a8:	4603      	mov	r3, r0
 80054aa:	01db      	lsls	r3, r3, #7
 80054ac:	4413      	add	r3, r2
 80054ae:	b2c9      	uxtb	r1, r1
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <SSD1306_DrawPixel+0x118>)
 80054b2:	54d1      	strb	r1, [r2, r3]
      break;
 80054b4:	e044      	b.n	8005540 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 80054b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	da00      	bge.n	80054c4 <SSD1306_DrawPixel+0x94>
 80054c2:	3307      	adds	r3, #7
 80054c4:	10db      	asrs	r3, r3, #3
 80054c6:	b218      	sxth	r0, r3
 80054c8:	4603      	mov	r3, r0
 80054ca:	01db      	lsls	r3, r3, #7
 80054cc:	4413      	add	r3, r2
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <SSD1306_DrawPixel+0x118>)
 80054d0:	5cd3      	ldrb	r3, [r2, r3]
 80054d2:	b25a      	sxtb	r2, r3
 80054d4:	88bb      	ldrh	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2101      	movs	r1, #1
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	b25b      	sxtb	r3, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	b25b      	sxtb	r3, r3
 80054e6:	4013      	ands	r3, r2
 80054e8:	b259      	sxtb	r1, r3
 80054ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054ee:	4603      	mov	r3, r0
 80054f0:	01db      	lsls	r3, r3, #7
 80054f2:	4413      	add	r3, r2
 80054f4:	b2c9      	uxtb	r1, r1
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <SSD1306_DrawPixel+0x118>)
 80054f8:	54d1      	strb	r1, [r2, r3]
      break;
 80054fa:	e021      	b.n	8005540 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80054fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005500:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	da00      	bge.n	800550a <SSD1306_DrawPixel+0xda>
 8005508:	3307      	adds	r3, #7
 800550a:	10db      	asrs	r3, r3, #3
 800550c:	b218      	sxth	r0, r3
 800550e:	4603      	mov	r3, r0
 8005510:	01db      	lsls	r3, r3, #7
 8005512:	4413      	add	r3, r2
 8005514:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <SSD1306_DrawPixel+0x118>)
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	b25a      	sxtb	r2, r3
 800551a:	88bb      	ldrh	r3, [r7, #4]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f303 	lsl.w	r3, r1, r3
 8005526:	b25b      	sxtb	r3, r3
 8005528:	4053      	eors	r3, r2
 800552a:	b259      	sxtb	r1, r3
 800552c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005530:	4603      	mov	r3, r0
 8005532:	01db      	lsls	r3, r3, #7
 8005534:	4413      	add	r3, r2
 8005536:	b2c9      	uxtb	r1, r1
 8005538:	4a03      	ldr	r2, [pc, #12]	; (8005548 <SSD1306_DrawPixel+0x118>)
 800553a:	54d1      	strb	r1, [r2, r3]
      break;
 800553c:	e000      	b.n	8005540 <SSD1306_DrawPixel+0x110>
	  return;
 800553e:	bf00      	nop
    }
}
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	20001eec 	.word	0x20001eec

0800554c <SSD1306_Clear>:


void SSD1306_Clear(uint8_t Color)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <SSD1306_Clear+0x22>
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10d      	bne.n	800557c <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xff, SSD1306_BUFFER_SIZE);
 8005560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005564:	21ff      	movs	r1, #255	; 0xff
 8005566:	4807      	ldr	r0, [pc, #28]	; (8005584 <SSD1306_Clear+0x38>)
 8005568:	f00d fa80 	bl	8012a6c <memset>
		break;
 800556c:	e006      	b.n	800557c <SSD1306_Clear+0x30>
	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800556e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005572:	2100      	movs	r1, #0
 8005574:	4803      	ldr	r0, [pc, #12]	; (8005584 <SSD1306_Clear+0x38>)
 8005576:	f00d fa79 	bl	8012a6c <memset>
		break;
 800557a:	bf00      	nop
	}
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20001eec 	.word	0x20001eec

08005588 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 800558c:	2022      	movs	r0, #34	; 0x22
 800558e:	f7ff ff15 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8005592:	2000      	movs	r0, #0
 8005594:	f7ff ff12 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8005598:	20ff      	movs	r0, #255	; 0xff
 800559a:	f7ff ff0f 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800559e:	2021      	movs	r0, #33	; 0x21
 80055a0:	f7ff ff0c 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7ff ff09 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 80055aa:	207f      	movs	r0, #127	; 0x7f
 80055ac:	f7ff ff06 	bl	80053bc <SSD1306_Command>

#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_channel1, (uint32_t*)buffer, (uint32_t*)buffer_disp, SSD1306_BUFFER_SIZE);
 80055b0:	4904      	ldr	r1, [pc, #16]	; (80055c4 <SSD1306_Display+0x3c>)
 80055b2:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <SSD1306_Display+0x40>)
 80055b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b8:	4804      	ldr	r0, [pc, #16]	; (80055cc <SSD1306_Display+0x44>)
 80055ba:	f001 fc67 	bl	8006e8c <HAL_DMA_Start_IT>

	SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
#endif


}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20001eec 	.word	0x20001eec
 80055c8:	200022ec 	.word	0x200022ec
 80055cc:	20000c74 	.word	0x20000c74

080055d0 <XferCpltCallback>:
#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
static void XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	if(hdma->Instance == oled_buff_dma->Instance)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <XferCpltCallback+0x28>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d104      	bne.n	80055f0 <XferCpltCallback+0x20>
	{
		SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
 80055e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055ea:	4804      	ldr	r0, [pc, #16]	; (80055fc <XferCpltCallback+0x2c>)
 80055ec:	f7ff ff00 	bl	80053f0 <SSD1306_Data>
	}
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20001ee8 	.word	0x20001ee8
 80055fc:	200022ec 	.word	0x200022ec

08005600 <SSD1306_Init>:
#endif


#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
HAL_StatusTypeDef SSD1306_Init(I2C_HandleTypeDef *i2c, DMA_HandleTypeDef *dma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	oled_i2c = i2c;
 800560a:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <SSD1306_Init+0xe0>)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6013      	str	r3, [r2, #0]
	oled_buff_dma = dma;
 8005610:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <SSD1306_Init+0xe4>)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6013      	str	r3, [r2, #0]

	if(HAL_I2C_IsDeviceReady(oled_i2c, (SSD1306_ADRESS<<1), OLED_TRIALS, 10) != HAL_OK)
 8005616:	4b32      	ldr	r3, [pc, #200]	; (80056e0 <SSD1306_Init+0xe0>)
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	230a      	movs	r3, #10
 800561c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005620:	2178      	movs	r1, #120	; 0x78
 8005622:	f003 f96b 	bl	80088fc <HAL_I2C_IsDeviceReady>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <SSD1306_Init+0x30>
	{
		return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e052      	b.n	80056d6 <SSD1306_Init+0xd6>
	}


	SSD1306_Command(SSD1306_DISPLAYOFF);
 8005630:	20ae      	movs	r0, #174	; 0xae
 8005632:	f7ff fec3 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8005636:	20d5      	movs	r0, #213	; 0xd5
 8005638:	f7ff fec0 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0x80);
 800563c:	2080      	movs	r0, #128	; 0x80
 800563e:	f7ff febd 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8005642:	20a8      	movs	r0, #168	; 0xa8
 8005644:	f7ff feba 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8005648:	203f      	movs	r0, #63	; 0x3f
 800564a:	f7ff feb7 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800564e:	20d3      	movs	r0, #211	; 0xd3
 8005650:	f7ff feb4 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0x00);
 8005654:	2000      	movs	r0, #0
 8005656:	f7ff feb1 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800565a:	2040      	movs	r0, #64	; 0x40
 800565c:	f7ff feae 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8005660:	208d      	movs	r0, #141	; 0x8d
 8005662:	f7ff feab 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0x14);
 8005666:	2014      	movs	r0, #20
 8005668:	f7ff fea8 	bl	80053bc <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800566c:	2020      	movs	r0, #32
 800566e:	f7ff fea5 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8005672:	2000      	movs	r0, #0
 8005674:	f7ff fea2 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8005678:	20a1      	movs	r0, #161	; 0xa1
 800567a:	f7ff fe9f 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800567e:	20c8      	movs	r0, #200	; 0xc8
 8005680:	f7ff fe9c 	bl	80053bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8005684:	20da      	movs	r0, #218	; 0xda
 8005686:	f7ff fe99 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0x12);
 800568a:	2012      	movs	r0, #18
 800568c:	f7ff fe96 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8005690:	2081      	movs	r0, #129	; 0x81
 8005692:	f7ff fe93 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0x10);
 8005696:	2010      	movs	r0, #16
 8005698:	f7ff fe90 	bl	80053bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 800569c:	20d9      	movs	r0, #217	; 0xd9
 800569e:	f7ff fe8d 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0xF1);
 80056a2:	20f1      	movs	r0, #241	; 0xf1
 80056a4:	f7ff fe8a 	bl	80053bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80056a8:	20db      	movs	r0, #219	; 0xdb
 80056aa:	f7ff fe87 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(0x40);
 80056ae:	2040      	movs	r0, #64	; 0x40
 80056b0:	f7ff fe84 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80056b4:	20a4      	movs	r0, #164	; 0xa4
 80056b6:	f7ff fe81 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80056ba:	20a6      	movs	r0, #166	; 0xa6
 80056bc:	f7ff fe7e 	bl	80053bc <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80056c0:	202e      	movs	r0, #46	; 0x2e
 80056c2:	f7ff fe7b 	bl	80053bc <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 80056c6:	20af      	movs	r0, #175	; 0xaf
 80056c8:	f7ff fe78 	bl	80053bc <SSD1306_Command>

	/*
	 * Bufforing DMA Cplt Callback
	 */
	oled_buff_dma->XferCpltCallback = XferCpltCallback;
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <SSD1306_Init+0xe4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a05      	ldr	r2, [pc, #20]	; (80056e8 <SSD1306_Init+0xe8>)
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
	return HAL_OK;
 80056d4:	2300      	movs	r3, #0

}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20001ee4 	.word	0x20001ee4
 80056e4:	20001ee8 	.word	0x20001ee8
 80056e8:	080055d1 	.word	0x080055d1

080056ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <HAL_MspInit+0x5c>)
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_MspInit+0x5c>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6193      	str	r3, [r2, #24]
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <HAL_MspInit+0x5c>)
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800570a:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <HAL_MspInit+0x5c>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <HAL_MspInit+0x5c>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	61d3      	str	r3, [r2, #28]
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <HAL_MspInit+0x5c>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_MspInit+0x60>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	4a04      	ldr	r2, [pc, #16]	; (800574c <HAL_MspInit+0x60>)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr
 8005748:	40021000 	.word	0x40021000
 800574c:	40010000 	.word	0x40010000

08005750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005754:	e7fe      	b.n	8005754 <NMI_Handler+0x4>

08005756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800575a:	e7fe      	b.n	800575a <HardFault_Handler+0x4>

0800575c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005760:	e7fe      	b.n	8005760 <MemManage_Handler+0x4>

08005762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005766:	e7fe      	b.n	8005766 <BusFault_Handler+0x4>

08005768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800576c:	e7fe      	b.n	800576c <UsageFault_Handler+0x4>

0800576e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800577a:	b480      	push	{r7}
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005786:	b480      	push	{r7}
 8005788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005796:	f000 fd17 	bl	80061c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800579a:	bf00      	nop
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80057a4:	4802      	ldr	r0, [pc, #8]	; (80057b0 <DMA1_Channel1_IRQHandler+0x10>)
 80057a6:	f001 fcd9 	bl	800715c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000c30 	.word	0x20000c30

080057b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80057b8:	4802      	ldr	r0, [pc, #8]	; (80057c4 <DMA1_Channel6_IRQHandler+0x10>)
 80057ba:	f001 fccf 	bl	800715c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000d50 	.word	0x20000d50

080057c8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80057cc:	4802      	ldr	r0, [pc, #8]	; (80057d8 <DMA1_Channel7_IRQHandler+0x10>)
 80057ce:	f001 fcc5 	bl	800715c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000d0c 	.word	0x20000d0c

080057dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80057e0:	4802      	ldr	r0, [pc, #8]	; (80057ec <ADC1_2_IRQHandler+0x10>)
 80057e2:	f000 fef3 	bl	80065cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000c00 	.word	0x20000c00

080057f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80057f4:	4802      	ldr	r0, [pc, #8]	; (8005800 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80057f6:	f005 fb4d 	bl	800ae94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2000356c 	.word	0x2000356c

08005804 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005808:	4802      	ldr	r0, [pc, #8]	; (8005814 <I2C1_EV_IRQHandler+0x10>)
 800580a:	f003 f9a5 	bl	8008b58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000cb8 	.word	0x20000cb8

08005818 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_channel1);
 800581c:	4802      	ldr	r0, [pc, #8]	; (8005828 <DMA2_Channel1_IRQHandler+0x10>)
 800581e:	f001 fc9d 	bl	800715c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000c74 	.word	0x20000c74

0800582c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  return 1;
 8005830:	2301      	movs	r3, #1
}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <_kill>:

int _kill(int pid, int sig)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005844:	f00d f8e8 	bl	8012a18 <__errno>
 8005848:	4603      	mov	r3, r0
 800584a:	2216      	movs	r2, #22
 800584c:	601a      	str	r2, [r3, #0]
  return -1;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <_exit>:

void _exit (int status)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005862:	f04f 31ff 	mov.w	r1, #4294967295
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ffe7 	bl	800583a <_kill>
  while (1) {}    /* Make sure we hang here */
 800586c:	e7fe      	b.n	800586c <_exit+0x12>

0800586e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e00a      	b.n	8005896 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005880:	f3af 8000 	nop.w
 8005884:	4601      	mov	r1, r0
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	60ba      	str	r2, [r7, #8]
 800588c:	b2ca      	uxtb	r2, r1
 800588e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	3301      	adds	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	dbf0      	blt.n	8005880 <_read+0x12>
  }

  return len;
 800589e:	687b      	ldr	r3, [r7, #4]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e009      	b.n	80058ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	60ba      	str	r2, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	3301      	adds	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	dbf1      	blt.n	80058ba <_write+0x12>
  }
  return len;
 80058d6:	687b      	ldr	r3, [r7, #4]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <_close>:

int _close(int file)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr

080058f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005906:	605a      	str	r2, [r3, #4]
  return 0;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <_isatty>:

int _isatty(int file)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800591c:	2301      	movs	r3, #1
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005948:	4a14      	ldr	r2, [pc, #80]	; (800599c <_sbrk+0x5c>)
 800594a:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <_sbrk+0x60>)
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005954:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <_sbrk+0x64>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <_sbrk+0x64>)
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <_sbrk+0x68>)
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <_sbrk+0x64>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	429a      	cmp	r2, r3
 800596e:	d207      	bcs.n	8005980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005970:	f00d f852 	bl	8012a18 <__errno>
 8005974:	4603      	mov	r3, r0
 8005976:	220c      	movs	r2, #12
 8005978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	e009      	b.n	8005994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <_sbrk+0x64>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <_sbrk+0x64>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <_sbrk+0x64>)
 8005990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005992:	68fb      	ldr	r3, [r7, #12]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20010000 	.word	0x20010000
 80059a0:	00001000 	.word	0x00001000
 80059a4:	200026ec 	.word	0x200026ec
 80059a8:	20003a90 	.word	0x20003a90

080059ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08e      	sub	sp, #56	; 0x38
 80059bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	605a      	str	r2, [r3, #4]
 80059c8:	609a      	str	r2, [r3, #8]
 80059ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059cc:	f107 0320 	add.w	r3, r7, #32
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	611a      	str	r2, [r3, #16]
 80059e4:	615a      	str	r2, [r3, #20]
 80059e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80059e8:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 80059ea:	4a2e      	ldr	r2, [pc, #184]	; (8005aa4 <MX_TIM3_Init+0xec>)
 80059ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 80059ee:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 80059f0:	f240 1267 	movw	r2, #359	; 0x167
 80059f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059f6:	4b2a      	ldr	r3, [pc, #168]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80059fc:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 80059fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a04:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a0a:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a10:	4823      	ldr	r0, [pc, #140]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a12:	f007 fb51 	bl	800d0b8 <HAL_TIM_Base_Init>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005a1c:	f7fe fcfa 	bl	8004414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	481c      	ldr	r0, [pc, #112]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a2e:	f007 fd67 	bl	800d500 <HAL_TIM_ConfigClockSource>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005a38:	f7fe fcec 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a3c:	4818      	ldr	r0, [pc, #96]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a3e:	f007 fb8a 	bl	800d156 <HAL_TIM_PWM_Init>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005a48:	f7fe fce4 	bl	8004414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a54:	f107 0320 	add.w	r3, r7, #32
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4811      	ldr	r0, [pc, #68]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a5c:	f008 f8f8 	bl	800dc50 <HAL_TIMEx_MasterConfigSynchronization>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005a66:	f7fe fcd5 	bl	8004414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a6a:	2360      	movs	r3, #96	; 0x60
 8005a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4807      	ldr	r0, [pc, #28]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a82:	f007 fc7b 	bl	800d37c <HAL_TIM_PWM_ConfigChannel>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005a8c:	f7fe fcc2 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005a90:	4803      	ldr	r0, [pc, #12]	; (8005aa0 <MX_TIM3_Init+0xe8>)
 8005a92:	f000 f961 	bl	8005d58 <HAL_TIM_MspPostInit>

}
 8005a96:	bf00      	nop
 8005a98:	3738      	adds	r7, #56	; 0x38
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200026f0 	.word	0x200026f0
 8005aa4:	40000400 	.word	0x40000400

08005aa8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005abc:	f107 0320 	add.w	r3, r7, #32
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	611a      	str	r2, [r3, #16]
 8005ad4:	615a      	str	r2, [r3, #20]
 8005ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005ad8:	4b3e      	ldr	r3, [pc, #248]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005ada:	4a3f      	ldr	r2, [pc, #252]	; (8005bd8 <MX_TIM4_Init+0x130>)
 8005adc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8005ade:	4b3d      	ldr	r3, [pc, #244]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005ae0:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005ae4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ae6:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005aec:	4b39      	ldr	r3, [pc, #228]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005af2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005af4:	4b37      	ldr	r3, [pc, #220]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005afa:	4b36      	ldr	r3, [pc, #216]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005b00:	4834      	ldr	r0, [pc, #208]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005b02:	f007 fad9 	bl	800d0b8 <HAL_TIM_Base_Init>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005b0c:	f7fe fc82 	bl	8004414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	482d      	ldr	r0, [pc, #180]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005b1e:	f007 fcef 	bl	800d500 <HAL_TIM_ConfigClockSource>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005b28:	f7fe fc74 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005b2c:	4829      	ldr	r0, [pc, #164]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005b2e:	f007 fb12 	bl	800d156 <HAL_TIM_PWM_Init>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005b38:	f7fe fc6c 	bl	8004414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005b44:	f107 0320 	add.w	r3, r7, #32
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4822      	ldr	r0, [pc, #136]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005b4c:	f008 f880 	bl	800dc50 <HAL_TIMEx_MasterConfigSynchronization>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005b56:	f7fe fc5d 	bl	8004414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b5a:	2360      	movs	r3, #96	; 0x60
 8005b5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8005b5e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005b62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4619      	mov	r1, r3
 8005b72:	4818      	ldr	r0, [pc, #96]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005b74:	f007 fc02 	bl	800d37c <HAL_TIM_PWM_ConfigChannel>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8005b7e:	f7fe fc49 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b82:	1d3b      	adds	r3, r7, #4
 8005b84:	2204      	movs	r2, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4812      	ldr	r0, [pc, #72]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005b8a:	f007 fbf7 	bl	800d37c <HAL_TIM_PWM_ConfigChannel>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8005b94:	f7fe fc3e 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	480d      	ldr	r0, [pc, #52]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005ba0:	f007 fbec 	bl	800d37c <HAL_TIM_PWM_ConfigChannel>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8005baa:	f7fe fc33 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	220c      	movs	r2, #12
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4807      	ldr	r0, [pc, #28]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005bb6:	f007 fbe1 	bl	800d37c <HAL_TIM_PWM_ConfigChannel>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8005bc0:	f7fe fc28 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005bc4:	4803      	ldr	r0, [pc, #12]	; (8005bd4 <MX_TIM4_Init+0x12c>)
 8005bc6:	f000 f8c7 	bl	8005d58 <HAL_TIM_MspPostInit>

}
 8005bca:	bf00      	nop
 8005bcc:	3738      	adds	r7, #56	; 0x38
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20002738 	.word	0x20002738
 8005bd8:	40000800 	.word	0x40000800

08005bdc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
 8005bec:	609a      	str	r2, [r3, #8]
 8005bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf0:	f107 0320 	add.w	r3, r7, #32
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	611a      	str	r2, [r3, #16]
 8005c08:	615a      	str	r2, [r3, #20]
 8005c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c0e:	4a2e      	ldr	r2, [pc, #184]	; (8005cc8 <MX_TIM5_Init+0xec>)
 8005c10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 719;
 8005c12:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c14:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005c18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c1a:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8005c20:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c28:	4b26      	ldr	r3, [pc, #152]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c2e:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c34:	4823      	ldr	r0, [pc, #140]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c36:	f007 fa3f 	bl	800d0b8 <HAL_TIM_Base_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8005c40:	f7fe fbe8 	bl	8004414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c4e:	4619      	mov	r1, r3
 8005c50:	481c      	ldr	r0, [pc, #112]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c52:	f007 fc55 	bl	800d500 <HAL_TIM_ConfigClockSource>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8005c5c:	f7fe fbda 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005c60:	4818      	ldr	r0, [pc, #96]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c62:	f007 fa78 	bl	800d156 <HAL_TIM_PWM_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8005c6c:	f7fe fbd2 	bl	8004414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c70:	2300      	movs	r3, #0
 8005c72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c78:	f107 0320 	add.w	r3, r7, #32
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4811      	ldr	r0, [pc, #68]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005c80:	f007 ffe6 	bl	800dc50 <HAL_TIMEx_MasterConfigSynchronization>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8005c8a:	f7fe fbc3 	bl	8004414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c8e:	2360      	movs	r3, #96	; 0x60
 8005c90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005ca6:	f007 fb69 	bl	800d37c <HAL_TIM_PWM_ConfigChannel>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8005cb0:	f7fe fbb0 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <MX_TIM5_Init+0xe8>)
 8005cb6:	f000 f84f 	bl	8005d58 <HAL_TIM_MspPostInit>

}
 8005cba:	bf00      	nop
 8005cbc:	3738      	adds	r7, #56	; 0x38
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20002780 	.word	0x20002780
 8005cc8:	40000c00 	.word	0x40000c00

08005ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_TIM_Base_MspInit+0x7c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cde:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	61d3      	str	r3, [r2, #28]
 8005cea:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005cf6:	e022      	b.n	8005d3e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <HAL_TIM_Base_MspInit+0x84>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d10c      	bne.n	8005d1c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005d08:	f043 0304 	orr.w	r3, r3, #4
 8005d0c:	61d3      	str	r3, [r2, #28]
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]
}
 8005d1a:	e010      	b.n	8005d3e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM5)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <HAL_TIM_Base_MspInit+0x88>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d10b      	bne.n	8005d3e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d26:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	4a08      	ldr	r2, [pc, #32]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005d2c:	f043 0308 	orr.w	r3, r3, #8
 8005d30:	61d3      	str	r3, [r2, #28]
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_TIM_Base_MspInit+0x80>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr
 8005d48:	40000400 	.word	0x40000400
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00

08005d58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08c      	sub	sp, #48	; 0x30
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d60:	f107 0318 	add.w	r3, r7, #24
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a3e      	ldr	r2, [pc, #248]	; (8005e6c <HAL_TIM_MspPostInit+0x114>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d12a      	bne.n	8005dce <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d78:	4b3d      	ldr	r3, [pc, #244]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005d7e:	f043 0310 	orr.w	r3, r3, #16
 8005d82:	6193      	str	r3, [r2, #24]
 8005d84:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d94:	2302      	movs	r3, #2
 8005d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d9c:	f107 0318 	add.w	r3, r7, #24
 8005da0:	4619      	mov	r1, r3
 8005da2:	4834      	ldr	r0, [pc, #208]	; (8005e74 <HAL_TIM_MspPostInit+0x11c>)
 8005da4:	f001 fc50 	bl	8007648 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8005da8:	4b33      	ldr	r3, [pc, #204]	; (8005e78 <HAL_TIM_MspPostInit+0x120>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dc6:	4a2c      	ldr	r2, [pc, #176]	; (8005e78 <HAL_TIM_MspPostInit+0x120>)
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8005dcc:	e049      	b.n	8005e62 <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM4)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_TIM_MspPostInit+0x124>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d127      	bne.n	8005e28 <HAL_TIM_MspPostInit+0xd0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dd8:	4b25      	ldr	r3, [pc, #148]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005dde:	f043 0320 	orr.w	r3, r3, #32
 8005de2:	6193      	str	r3, [r2, #24]
 8005de4:	4b22      	ldr	r3, [pc, #136]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005df0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df6:	2302      	movs	r3, #2
 8005df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005dfe:	f107 0318 	add.w	r3, r7, #24
 8005e02:	4619      	mov	r1, r3
 8005e04:	481e      	ldr	r0, [pc, #120]	; (8005e80 <HAL_TIM_MspPostInit+0x128>)
 8005e06:	f001 fc1f 	bl	8007648 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <HAL_TIM_MspPostInit+0x120>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e20:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <HAL_TIM_MspPostInit+0x120>)
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	6053      	str	r3, [r2, #4]
}
 8005e26:	e01c      	b.n	8005e62 <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM5)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <HAL_TIM_MspPostInit+0x12c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d117      	bne.n	8005e62 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	4a0e      	ldr	r2, [pc, #56]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005e38:	f043 0304 	orr.w	r3, r3, #4
 8005e3c:	6193      	str	r3, [r2, #24]
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <HAL_TIM_MspPostInit+0x118>)
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e52:	2302      	movs	r3, #2
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e56:	f107 0318 	add.w	r3, r7, #24
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	480a      	ldr	r0, [pc, #40]	; (8005e88 <HAL_TIM_MspPostInit+0x130>)
 8005e5e:	f001 fbf3 	bl	8007648 <HAL_GPIO_Init>
}
 8005e62:	bf00      	nop
 8005e64:	3730      	adds	r7, #48	; 0x30
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40011000 	.word	0x40011000
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40011400 	.word	0x40011400
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010800 	.word	0x40010800

08005e8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e90:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005e92:	4a12      	ldr	r2, [pc, #72]	; (8005edc <MX_USART1_UART_Init+0x50>)
 8005e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005eb2:	220c      	movs	r2, #12
 8005eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ec2:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <MX_USART1_UART_Init+0x4c>)
 8005ec4:	f007 ff30 	bl	800dd28 <HAL_UART_Init>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005ece:	f7fe faa1 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005ed2:	bf00      	nop
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200027c8 	.word	0x200027c8
 8005edc:	40013800 	.word	0x40013800

08005ee0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <MX_USART2_UART_Init+0x50>)
 8005ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f04:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005f06:	220c      	movs	r2, #12
 8005f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f0a:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f16:	4805      	ldr	r0, [pc, #20]	; (8005f2c <MX_USART2_UART_Init+0x4c>)
 8005f18:	f007 ff06 	bl	800dd28 <HAL_UART_Init>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f22:	f7fe fa77 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005f26:	bf00      	nop
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20002810 	.word	0x20002810
 8005f30:	40004400 	.word	0x40004400

08005f34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f3a:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <MX_USART3_UART_Init+0x50>)
 8005f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005f3e:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f46:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f4c:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f5a:	220c      	movs	r2, #12
 8005f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8005f6a:	4805      	ldr	r0, [pc, #20]	; (8005f80 <MX_USART3_UART_Init+0x4c>)
 8005f6c:	f007 ff2c 	bl	800ddc8 <HAL_HalfDuplex_Init>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005f76:	f7fe fa4d 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f7a:	bf00      	nop
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20002858 	.word	0x20002858
 8005f84:	40004800 	.word	0x40004800

08005f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08c      	sub	sp, #48	; 0x30
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f90:	f107 0320 	add.w	r3, r7, #32
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
 8005f9c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a4d      	ldr	r2, [pc, #308]	; (80060d8 <HAL_UART_MspInit+0x150>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d132      	bne.n	800600e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fa8:	4b4c      	ldr	r3, [pc, #304]	; (80060dc <HAL_UART_MspInit+0x154>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	4a4b      	ldr	r2, [pc, #300]	; (80060dc <HAL_UART_MspInit+0x154>)
 8005fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fb2:	6193      	str	r3, [r2, #24]
 8005fb4:	4b49      	ldr	r3, [pc, #292]	; (80060dc <HAL_UART_MspInit+0x154>)
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fc0:	4b46      	ldr	r3, [pc, #280]	; (80060dc <HAL_UART_MspInit+0x154>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	4a45      	ldr	r2, [pc, #276]	; (80060dc <HAL_UART_MspInit+0x154>)
 8005fc6:	f043 0304 	orr.w	r3, r3, #4
 8005fca:	6193      	str	r3, [r2, #24]
 8005fcc:	4b43      	ldr	r3, [pc, #268]	; (80060dc <HAL_UART_MspInit+0x154>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fe6:	f107 0320 	add.w	r3, r7, #32
 8005fea:	4619      	mov	r1, r3
 8005fec:	483c      	ldr	r0, [pc, #240]	; (80060e0 <HAL_UART_MspInit+0x158>)
 8005fee:	f001 fb2b 	bl	8007648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006000:	f107 0320 	add.w	r3, r7, #32
 8006004:	4619      	mov	r1, r3
 8006006:	4836      	ldr	r0, [pc, #216]	; (80060e0 <HAL_UART_MspInit+0x158>)
 8006008:	f001 fb1e 	bl	8007648 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800600c:	e05f      	b.n	80060ce <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a34      	ldr	r2, [pc, #208]	; (80060e4 <HAL_UART_MspInit+0x15c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d130      	bne.n	800607a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006018:	4b30      	ldr	r3, [pc, #192]	; (80060dc <HAL_UART_MspInit+0x154>)
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <HAL_UART_MspInit+0x154>)
 800601e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006022:	61d3      	str	r3, [r2, #28]
 8006024:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <HAL_UART_MspInit+0x154>)
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006030:	4b2a      	ldr	r3, [pc, #168]	; (80060dc <HAL_UART_MspInit+0x154>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	4a29      	ldr	r2, [pc, #164]	; (80060dc <HAL_UART_MspInit+0x154>)
 8006036:	f043 0304 	orr.w	r3, r3, #4
 800603a:	6193      	str	r3, [r2, #24]
 800603c:	4b27      	ldr	r3, [pc, #156]	; (80060dc <HAL_UART_MspInit+0x154>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006048:	2304      	movs	r3, #4
 800604a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604c:	2302      	movs	r3, #2
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006050:	2303      	movs	r3, #3
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006054:	f107 0320 	add.w	r3, r7, #32
 8006058:	4619      	mov	r1, r3
 800605a:	4821      	ldr	r0, [pc, #132]	; (80060e0 <HAL_UART_MspInit+0x158>)
 800605c:	f001 faf4 	bl	8007648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006060:	2308      	movs	r3, #8
 8006062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006064:	2300      	movs	r3, #0
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006068:	2300      	movs	r3, #0
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800606c:	f107 0320 	add.w	r3, r7, #32
 8006070:	4619      	mov	r1, r3
 8006072:	481b      	ldr	r0, [pc, #108]	; (80060e0 <HAL_UART_MspInit+0x158>)
 8006074:	f001 fae8 	bl	8007648 <HAL_GPIO_Init>
}
 8006078:	e029      	b.n	80060ce <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1a      	ldr	r2, [pc, #104]	; (80060e8 <HAL_UART_MspInit+0x160>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d124      	bne.n	80060ce <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006084:	4b15      	ldr	r3, [pc, #84]	; (80060dc <HAL_UART_MspInit+0x154>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4a14      	ldr	r2, [pc, #80]	; (80060dc <HAL_UART_MspInit+0x154>)
 800608a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800608e:	61d3      	str	r3, [r2, #28]
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_UART_MspInit+0x154>)
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <HAL_UART_MspInit+0x154>)
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <HAL_UART_MspInit+0x154>)
 80060a2:	f043 0308 	orr.w	r3, r3, #8
 80060a6:	6193      	str	r3, [r2, #24]
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <HAL_UART_MspInit+0x154>)
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80060b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060ba:	2312      	movs	r3, #18
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060be:	2303      	movs	r3, #3
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c2:	f107 0320 	add.w	r3, r7, #32
 80060c6:	4619      	mov	r1, r3
 80060c8:	4808      	ldr	r0, [pc, #32]	; (80060ec <HAL_UART_MspInit+0x164>)
 80060ca:	f001 fabd 	bl	8007648 <HAL_GPIO_Init>
}
 80060ce:	bf00      	nop
 80060d0:	3730      	adds	r7, #48	; 0x30
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40013800 	.word	0x40013800
 80060dc:	40021000 	.word	0x40021000
 80060e0:	40010800 	.word	0x40010800
 80060e4:	40004400 	.word	0x40004400
 80060e8:	40004800 	.word	0x40004800
 80060ec:	40010c00 	.word	0x40010c00

080060f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80060f0:	f7ff fc5c 	bl	80059ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80060f4:	480b      	ldr	r0, [pc, #44]	; (8006124 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80060f6:	490c      	ldr	r1, [pc, #48]	; (8006128 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80060f8:	4a0c      	ldr	r2, [pc, #48]	; (800612c <LoopFillZerobss+0x16>)
  movs r3, #0
 80060fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060fc:	e002      	b.n	8006104 <LoopCopyDataInit>

080060fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006102:	3304      	adds	r3, #4

08006104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006108:	d3f9      	bcc.n	80060fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800610a:	4a09      	ldr	r2, [pc, #36]	; (8006130 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800610c:	4c09      	ldr	r4, [pc, #36]	; (8006134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800610e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006110:	e001      	b.n	8006116 <LoopFillZerobss>

08006112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006114:	3204      	adds	r2, #4

08006116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006118:	d3fb      	bcc.n	8006112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800611a:	f00c fc83 	bl	8012a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800611e:	f7fc fbf9 	bl	8002914 <main>
  bx lr
 8006122:	4770      	bx	lr
  ldr r0, =_sdata
 8006124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006128:	200009e0 	.word	0x200009e0
  ldr r2, =_sidata
 800612c:	080162cc 	.word	0x080162cc
  ldr r2, =_sbss
 8006130:	200009e0 	.word	0x200009e0
  ldr r4, =_ebss
 8006134:	20003a8c 	.word	0x20003a8c

08006138 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006138:	e7fe      	b.n	8006138 <ADC3_IRQHandler>
	...

0800613c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006140:	4b08      	ldr	r3, [pc, #32]	; (8006164 <HAL_Init+0x28>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a07      	ldr	r2, [pc, #28]	; (8006164 <HAL_Init+0x28>)
 8006146:	f043 0310 	orr.w	r3, r3, #16
 800614a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800614c:	2003      	movs	r0, #3
 800614e:	f000 fde5 	bl	8006d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006152:	200f      	movs	r0, #15
 8006154:	f000 f808 	bl	8006168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006158:	f7ff fac8 	bl	80056ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40022000 	.word	0x40022000

08006168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <HAL_InitTick+0x54>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <HAL_InitTick+0x58>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	4619      	mov	r1, r3
 800617a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800617e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fdfd 	bl	8006d86 <HAL_SYSTICK_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e00e      	b.n	80061b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b0f      	cmp	r3, #15
 800619a:	d80a      	bhi.n	80061b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800619c:	2200      	movs	r2, #0
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	f000 fdc5 	bl	8006d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061a8:	4a06      	ldr	r2, [pc, #24]	; (80061c4 <HAL_InitTick+0x5c>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	2000068c 	.word	0x2000068c
 80061c0:	20000694 	.word	0x20000694
 80061c4:	20000690 	.word	0x20000690

080061c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_IncTick+0x1c>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <HAL_IncTick+0x20>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4413      	add	r3, r2
 80061d8:	4a03      	ldr	r2, [pc, #12]	; (80061e8 <HAL_IncTick+0x20>)
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr
 80061e4:	20000694 	.word	0x20000694
 80061e8:	200028a0 	.word	0x200028a0

080061ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return uwTick;
 80061f0:	4b02      	ldr	r3, [pc, #8]	; (80061fc <HAL_GetTick+0x10>)
 80061f2:	681b      	ldr	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr
 80061fc:	200028a0 	.word	0x200028a0

08006200 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <HAL_GetUIDw0+0x10>)
 8006206:	681b      	ldr	r3, [r3, #0]
}
 8006208:	4618      	mov	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	1ffff7e8 	.word	0x1ffff7e8

08006214 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006218:	4b02      	ldr	r3, [pc, #8]	; (8006224 <HAL_GetUIDw1+0x10>)
 800621a:	681b      	ldr	r3, [r3, #0]
}
 800621c:	4618      	mov	r0, r3
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr
 8006224:	1ffff7ec 	.word	0x1ffff7ec

08006228 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <HAL_GetUIDw2+0x10>)
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	4618      	mov	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	1ffff7f0 	.word	0x1ffff7f0

0800623c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e0ce      	b.n	80063fc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fb fe94 	bl	8001fa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fbcf 	bl	8006a24 <ADC_ConversionStop_Disable>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 80a9 	bne.w	80063ea <HAL_ADC_Init+0x1ae>
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f040 80a5 	bne.w	80063ea <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80062a8:	f023 0302 	bic.w	r3, r3, #2
 80062ac:	f043 0202 	orr.w	r2, r3, #2
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4951      	ldr	r1, [pc, #324]	; (8006404 <HAL_ADC_Init+0x1c8>)
 80062be:	428b      	cmp	r3, r1
 80062c0:	d10a      	bne.n	80062d8 <HAL_ADC_Init+0x9c>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80062ca:	d002      	beq.n	80062d2 <HAL_ADC_Init+0x96>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	e004      	b.n	80062dc <HAL_ADC_Init+0xa0>
 80062d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062d6:	e001      	b.n	80062dc <HAL_ADC_Init+0xa0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80062dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	7b1b      	ldrb	r3, [r3, #12]
 80062e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80062e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f4:	d003      	beq.n	80062fe <HAL_ADC_Init+0xc2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d102      	bne.n	8006304 <HAL_ADC_Init+0xc8>
 80062fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006302:	e000      	b.n	8006306 <HAL_ADC_Init+0xca>
 8006304:	2300      	movs	r3, #0
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	7d1b      	ldrb	r3, [r3, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d119      	bne.n	8006348 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7b1b      	ldrb	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	3b01      	subs	r3, #1
 8006322:	035a      	lsls	r2, r3, #13
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	e00b      	b.n	8006348 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	f043 0201 	orr.w	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	4b29      	ldr	r3, [pc, #164]	; (8006408 <HAL_ADC_Init+0x1cc>)
 8006364:	4013      	ands	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	430b      	orrs	r3, r1
 800636e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006378:	d003      	beq.n	8006382 <HAL_ADC_Init+0x146>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d104      	bne.n	800638c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	3b01      	subs	r3, #1
 8006388:	051b      	lsls	r3, r3, #20
 800638a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	430a      	orrs	r2, r1
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_ADC_Init+0x1d0>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d10b      	bne.n	80063c8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80063c6:	e018      	b.n	80063fa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	f023 0312 	bic.w	r3, r3, #18
 80063d0:	f043 0210 	orr.w	r2, r3, #16
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f043 0201 	orr.w	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80063e8:	e007      	b.n	80063fa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	f043 0210 	orr.w	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80063fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40013c00 	.word	0x40013c00
 8006408:	ffe1f7fd 	.word	0xffe1f7fd
 800640c:	ff1f0efe 	.word	0xff1f0efe

08006410 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <HAL_ADC_Start_DMA+0x1a8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_ADC_Start_DMA+0x24>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a63      	ldr	r2, [pc, #396]	; (80065bc <HAL_ADC_Start_DMA+0x1ac>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d106      	bne.n	8006442 <HAL_ADC_Start_DMA+0x32>
 8006434:	4b60      	ldr	r3, [pc, #384]	; (80065b8 <HAL_ADC_Start_DMA+0x1a8>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800643c:	2b00      	cmp	r3, #0
 800643e:	f040 80b3 	bne.w	80065a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_ADC_Start_DMA+0x40>
 800644c:	2302      	movs	r3, #2
 800644e:	e0ae      	b.n	80065ae <HAL_ADC_Start_DMA+0x19e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fa89 	bl	8006970 <ADC_Enable>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 809a 	bne.w	800659e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a4e      	ldr	r2, [pc, #312]	; (80065bc <HAL_ADC_Start_DMA+0x1ac>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d105      	bne.n	8006494 <HAL_ADC_Start_DMA+0x84>
 8006488:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <HAL_ADC_Start_DMA+0x1a8>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d115      	bne.n	80064c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d026      	beq.n	80064fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80064be:	e01d      	b.n	80064fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a39      	ldr	r2, [pc, #228]	; (80065b8 <HAL_ADC_Start_DMA+0x1a8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_ADC_Start_DMA+0xd0>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a38      	ldr	r2, [pc, #224]	; (80065bc <HAL_ADC_Start_DMA+0x1ac>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10d      	bne.n	80064fc <HAL_ADC_Start_DMA+0xec>
 80064e0:	4b35      	ldr	r3, [pc, #212]	; (80065b8 <HAL_ADC_Start_DMA+0x1a8>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d006      	beq.n	8006516 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	f023 0206 	bic.w	r2, r3, #6
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	62da      	str	r2, [r3, #44]	; 0x2c
 8006514:	e002      	b.n	800651c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <HAL_ADC_Start_DMA+0x1b0>)
 800652a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <HAL_ADC_Start_DMA+0x1b4>)
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <HAL_ADC_Start_DMA+0x1b8>)
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0202 	mvn.w	r2, #2
 8006544:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006554:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a18      	ldr	r0, [r3, #32]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	334c      	adds	r3, #76	; 0x4c
 8006560:	4619      	mov	r1, r3
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f000 fc91 	bl	8006e8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006574:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006578:	d108      	bne.n	800658c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006588:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800658a:	e00f      	b.n	80065ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800659a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800659c:	e006      	b.n	80065ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80065a6:	e001      	b.n	80065ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40012400 	.word	0x40012400
 80065bc:	40012800 	.word	0x40012800
 80065c0:	08006aa7 	.word	0x08006aa7
 80065c4:	08006b23 	.word	0x08006b23
 80065c8:	08006b3f 	.word	0x08006b3f

080065cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d03e      	beq.n	800666c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d039      	beq.n	800666c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	d105      	bne.n	8006610 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800661a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800661e:	d11d      	bne.n	800665c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006624:	2b00      	cmp	r3, #0
 8006626:	d119      	bne.n	800665c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0220 	bic.w	r2, r2, #32
 8006636:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f043 0201 	orr.w	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fd fc4d 	bl	8003efc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f06f 0212 	mvn.w	r2, #18
 800666a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04d      	beq.n	8006712 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d048      	beq.n	8006712 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80066a2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80066a6:	d012      	beq.n	80066ce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d125      	bne.n	8006702 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80066c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80066c4:	d11d      	bne.n	8006702 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d119      	bne.n	8006702 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066dc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	f043 0201 	orr.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa35 	bl	8006b72 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 020c 	mvn.w	r2, #12
 8006710:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d012      	beq.n	8006742 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f812 	bl	800675c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0201 	mvn.w	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_ADC_ConfigChannel+0x20>
 800679c:	2302      	movs	r3, #2
 800679e:	e0dc      	b.n	800695a <HAL_ADC_ConfigChannel+0x1da>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b06      	cmp	r3, #6
 80067ae:	d81c      	bhi.n	80067ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	3b05      	subs	r3, #5
 80067c2:	221f      	movs	r2, #31
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	43db      	mvns	r3, r3
 80067ca:	4019      	ands	r1, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	3b05      	subs	r3, #5
 80067dc:	fa00 f203 	lsl.w	r2, r0, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	635a      	str	r2, [r3, #52]	; 0x34
 80067e8:	e03c      	b.n	8006864 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b0c      	cmp	r3, #12
 80067f0:	d81c      	bhi.n	800682c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	3b23      	subs	r3, #35	; 0x23
 8006804:	221f      	movs	r2, #31
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	4019      	ands	r1, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	3b23      	subs	r3, #35	; 0x23
 800681e:	fa00 f203 	lsl.w	r2, r0, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	631a      	str	r2, [r3, #48]	; 0x30
 800682a:	e01b      	b.n	8006864 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	3b41      	subs	r3, #65	; 0x41
 800683e:	221f      	movs	r2, #31
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	43db      	mvns	r3, r3
 8006846:	4019      	ands	r1, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	3b41      	subs	r3, #65	; 0x41
 8006858:	fa00 f203 	lsl.w	r2, r0, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b09      	cmp	r3, #9
 800686a:	d91c      	bls.n	80068a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68d9      	ldr	r1, [r3, #12]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	3b1e      	subs	r3, #30
 800687e:	2207      	movs	r2, #7
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	4019      	ands	r1, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	6898      	ldr	r0, [r3, #8]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	4413      	add	r3, r2
 8006896:	3b1e      	subs	r3, #30
 8006898:	fa00 f203 	lsl.w	r2, r0, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	60da      	str	r2, [r3, #12]
 80068a4:	e019      	b.n	80068da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6919      	ldr	r1, [r3, #16]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	2207      	movs	r2, #7
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	43db      	mvns	r3, r3
 80068be:	4019      	ands	r1, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	6898      	ldr	r0, [r3, #8]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	fa00 f203 	lsl.w	r2, r0, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b10      	cmp	r3, #16
 80068e0:	d003      	beq.n	80068ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80068e6:	2b11      	cmp	r3, #17
 80068e8:	d132      	bne.n	8006950 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <HAL_ADC_ConfigChannel+0x1e4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d125      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d126      	bne.n	8006950 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006910:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b10      	cmp	r3, #16
 8006918:	d11a      	bne.n	8006950 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <HAL_ADC_ConfigChannel+0x1e8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a13      	ldr	r2, [pc, #76]	; (800696c <HAL_ADC_ConfigChannel+0x1ec>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	0c9a      	lsrs	r2, r3, #18
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006930:	e002      	b.n	8006938 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3b01      	subs	r3, #1
 8006936:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f9      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x1b2>
 800693e:	e007      	b.n	8006950 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr
 8006964:	40012400 	.word	0x40012400
 8006968:	2000068c 	.word	0x2000068c
 800696c:	431bde83 	.word	0x431bde83

08006970 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b01      	cmp	r3, #1
 800698c:	d040      	beq.n	8006a10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800699e:	4b1f      	ldr	r3, [pc, #124]	; (8006a1c <ADC_Enable+0xac>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <ADC_Enable+0xb0>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	0c9b      	lsrs	r3, r3, #18
 80069aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80069ac:	e002      	b.n	80069b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f9      	bne.n	80069ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069ba:	f7ff fc17 	bl	80061ec <HAL_GetTick>
 80069be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80069c0:	e01f      	b.n	8006a02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069c2:	f7ff fc13 	bl	80061ec <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d918      	bls.n	8006a02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d011      	beq.n	8006a02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	f043 0210 	orr.w	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	f043 0201 	orr.w	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e007      	b.n	8006a12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d1d8      	bne.n	80069c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	2000068c 	.word	0x2000068c
 8006a20:	431bde83 	.word	0x431bde83

08006a24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d12e      	bne.n	8006a9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a4e:	f7ff fbcd 	bl	80061ec <HAL_GetTick>
 8006a52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006a54:	e01b      	b.n	8006a8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a56:	f7ff fbc9 	bl	80061ec <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d914      	bls.n	8006a8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d10d      	bne.n	8006a8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	f043 0210 	orr.w	r2, r3, #16
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	f043 0201 	orr.w	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e007      	b.n	8006a9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d0dc      	beq.n	8006a56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d127      	bne.n	8006b10 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006ad6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006ada:	d115      	bne.n	8006b08 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d111      	bne.n	8006b08 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f043 0201 	orr.w	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7fd f9f7 	bl	8003efc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006b0e:	e004      	b.n	8006b1a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff fe0a 	bl	800674a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	f043 0204 	orr.w	r2, r3, #4
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fe02 	bl	800676e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bb6:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	60d3      	str	r3, [r2, #12]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	e000ed00 	.word	0xe000ed00

08006bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <__NVIC_GetPriorityGrouping+0x18>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	f003 0307 	and.w	r3, r3, #7
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	e000ed00 	.word	0xe000ed00

08006be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	db0b      	blt.n	8006c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	f003 021f 	and.w	r2, r3, #31
 8006c00:	4906      	ldr	r1, [pc, #24]	; (8006c1c <__NVIC_EnableIRQ+0x34>)
 8006c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	2001      	movs	r0, #1
 8006c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr
 8006c1c:	e000e100 	.word	0xe000e100

08006c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	db0a      	blt.n	8006c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	490c      	ldr	r1, [pc, #48]	; (8006c6c <__NVIC_SetPriority+0x4c>)
 8006c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3e:	0112      	lsls	r2, r2, #4
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	440b      	add	r3, r1
 8006c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c48:	e00a      	b.n	8006c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	4908      	ldr	r1, [pc, #32]	; (8006c70 <__NVIC_SetPriority+0x50>)
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	3b04      	subs	r3, #4
 8006c58:	0112      	lsls	r2, r2, #4
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	761a      	strb	r2, [r3, #24]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	e000e100 	.word	0xe000e100
 8006c70:	e000ed00 	.word	0xe000ed00

08006c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b089      	sub	sp, #36	; 0x24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f1c3 0307 	rsb	r3, r3, #7
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	bf28      	it	cs
 8006c92:	2304      	movcs	r3, #4
 8006c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	2b06      	cmp	r3, #6
 8006c9c:	d902      	bls.n	8006ca4 <NVIC_EncodePriority+0x30>
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3b03      	subs	r3, #3
 8006ca2:	e000      	b.n	8006ca6 <NVIC_EncodePriority+0x32>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	43da      	mvns	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	43d9      	mvns	r1, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ccc:	4313      	orrs	r3, r2
         );
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3724      	adds	r7, #36	; 0x24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ce8:	d301      	bcc.n	8006cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cea:	2301      	movs	r3, #1
 8006cec:	e00f      	b.n	8006d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cee:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <SysTick_Config+0x40>)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cf6:	210f      	movs	r1, #15
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	f7ff ff90 	bl	8006c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <SysTick_Config+0x40>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d06:	4b04      	ldr	r3, [pc, #16]	; (8006d18 <SysTick_Config+0x40>)
 8006d08:	2207      	movs	r2, #7
 8006d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	e000e010 	.word	0xe000e010

08006d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ff2d 	bl	8006b84 <__NVIC_SetPriorityGrouping>
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b086      	sub	sp, #24
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	4603      	mov	r3, r0
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d44:	f7ff ff42 	bl	8006bcc <__NVIC_GetPriorityGrouping>
 8006d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f7ff ff90 	bl	8006c74 <NVIC_EncodePriority>
 8006d54:	4602      	mov	r2, r0
 8006d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff ff5f 	bl	8006c20 <__NVIC_SetPriority>
}
 8006d62:	bf00      	nop
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	4603      	mov	r3, r0
 8006d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff ff35 	bl	8006be8 <__NVIC_EnableIRQ>
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff ffa2 	bl	8006cd8 <SysTick_Config>
 8006d94:	4603      	mov	r3, r0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e059      	b.n	8006e6a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <HAL_DMA_Init+0xd4>)
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d80f      	bhi.n	8006de2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	; (8006e78 <HAL_DMA_Init+0xd8>)
 8006dca:	4413      	add	r3, r2
 8006dcc:	4a2b      	ldr	r2, [pc, #172]	; (8006e7c <HAL_DMA_Init+0xdc>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	009a      	lsls	r2, r3, #2
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a28      	ldr	r2, [pc, #160]	; (8006e80 <HAL_DMA_Init+0xe0>)
 8006dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8006de0:	e00e      	b.n	8006e00 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <HAL_DMA_Init+0xe4>)
 8006dea:	4413      	add	r3, r2
 8006dec:	4a23      	ldr	r2, [pc, #140]	; (8006e7c <HAL_DMA_Init+0xdc>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	091b      	lsrs	r3, r3, #4
 8006df4:	009a      	lsls	r2, r3, #2
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a22      	ldr	r2, [pc, #136]	; (8006e88 <HAL_DMA_Init+0xe8>)
 8006dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006e16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006e1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr
 8006e74:	40020407 	.word	0x40020407
 8006e78:	bffdfff8 	.word	0xbffdfff8
 8006e7c:	cccccccd 	.word	0xcccccccd
 8006e80:	40020000 	.word	0x40020000
 8006e84:	bffdfbf8 	.word	0xbffdfbf8
 8006e88:	40020400 	.word	0x40020400

08006e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_DMA_Start_IT+0x20>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e04b      	b.n	8006f44 <HAL_DMA_Start_IT+0xb8>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d13a      	bne.n	8006f36 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	68b9      	ldr	r1, [r7, #8]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fb82 	bl	80075ee <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 020e 	orr.w	r2, r2, #14
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e00f      	b.n	8006f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0204 	bic.w	r2, r2, #4
 8006f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 020a 	orr.w	r2, r2, #10
 8006f22:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e005      	b.n	8006f42 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d005      	beq.n	8006f70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2204      	movs	r2, #4
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
 8006f6e:	e0d6      	b.n	800711e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 020e 	bic.w	r2, r2, #14
 8006f7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b64      	ldr	r3, [pc, #400]	; (8007128 <HAL_DMA_Abort_IT+0x1dc>)
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d958      	bls.n	800704e <HAL_DMA_Abort_IT+0x102>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a62      	ldr	r2, [pc, #392]	; (800712c <HAL_DMA_Abort_IT+0x1e0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d04f      	beq.n	8007046 <HAL_DMA_Abort_IT+0xfa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a61      	ldr	r2, [pc, #388]	; (8007130 <HAL_DMA_Abort_IT+0x1e4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d048      	beq.n	8007042 <HAL_DMA_Abort_IT+0xf6>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5f      	ldr	r2, [pc, #380]	; (8007134 <HAL_DMA_Abort_IT+0x1e8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d040      	beq.n	800703c <HAL_DMA_Abort_IT+0xf0>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a5e      	ldr	r2, [pc, #376]	; (8007138 <HAL_DMA_Abort_IT+0x1ec>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d038      	beq.n	8007036 <HAL_DMA_Abort_IT+0xea>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5c      	ldr	r2, [pc, #368]	; (800713c <HAL_DMA_Abort_IT+0x1f0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d030      	beq.n	8007030 <HAL_DMA_Abort_IT+0xe4>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a5b      	ldr	r2, [pc, #364]	; (8007140 <HAL_DMA_Abort_IT+0x1f4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d028      	beq.n	800702a <HAL_DMA_Abort_IT+0xde>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a52      	ldr	r2, [pc, #328]	; (8007128 <HAL_DMA_Abort_IT+0x1dc>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d020      	beq.n	8007024 <HAL_DMA_Abort_IT+0xd8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a57      	ldr	r2, [pc, #348]	; (8007144 <HAL_DMA_Abort_IT+0x1f8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d019      	beq.n	8007020 <HAL_DMA_Abort_IT+0xd4>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a55      	ldr	r2, [pc, #340]	; (8007148 <HAL_DMA_Abort_IT+0x1fc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d012      	beq.n	800701c <HAL_DMA_Abort_IT+0xd0>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a54      	ldr	r2, [pc, #336]	; (800714c <HAL_DMA_Abort_IT+0x200>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00a      	beq.n	8007016 <HAL_DMA_Abort_IT+0xca>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a52      	ldr	r2, [pc, #328]	; (8007150 <HAL_DMA_Abort_IT+0x204>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d102      	bne.n	8007010 <HAL_DMA_Abort_IT+0xc4>
 800700a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800700e:	e01b      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007014:	e018      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800701a:	e015      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 800701c:	2310      	movs	r3, #16
 800701e:	e013      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007020:	2301      	movs	r3, #1
 8007022:	e011      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007028:	e00e      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 800702a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800702e:	e00b      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007034:	e008      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800703a:	e005      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 800703c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007040:	e002      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007042:	2310      	movs	r3, #16
 8007044:	e000      	b.n	8007048 <HAL_DMA_Abort_IT+0xfc>
 8007046:	2301      	movs	r3, #1
 8007048:	4a42      	ldr	r2, [pc, #264]	; (8007154 <HAL_DMA_Abort_IT+0x208>)
 800704a:	6053      	str	r3, [r2, #4]
 800704c:	e057      	b.n	80070fe <HAL_DMA_Abort_IT+0x1b2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a36      	ldr	r2, [pc, #216]	; (800712c <HAL_DMA_Abort_IT+0x1e0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d04f      	beq.n	80070f8 <HAL_DMA_Abort_IT+0x1ac>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a34      	ldr	r2, [pc, #208]	; (8007130 <HAL_DMA_Abort_IT+0x1e4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d048      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x1a8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a33      	ldr	r2, [pc, #204]	; (8007134 <HAL_DMA_Abort_IT+0x1e8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d040      	beq.n	80070ee <HAL_DMA_Abort_IT+0x1a2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a31      	ldr	r2, [pc, #196]	; (8007138 <HAL_DMA_Abort_IT+0x1ec>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d038      	beq.n	80070e8 <HAL_DMA_Abort_IT+0x19c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a30      	ldr	r2, [pc, #192]	; (800713c <HAL_DMA_Abort_IT+0x1f0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d030      	beq.n	80070e2 <HAL_DMA_Abort_IT+0x196>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2e      	ldr	r2, [pc, #184]	; (8007140 <HAL_DMA_Abort_IT+0x1f4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d028      	beq.n	80070dc <HAL_DMA_Abort_IT+0x190>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a26      	ldr	r2, [pc, #152]	; (8007128 <HAL_DMA_Abort_IT+0x1dc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d020      	beq.n	80070d6 <HAL_DMA_Abort_IT+0x18a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2a      	ldr	r2, [pc, #168]	; (8007144 <HAL_DMA_Abort_IT+0x1f8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d019      	beq.n	80070d2 <HAL_DMA_Abort_IT+0x186>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a29      	ldr	r2, [pc, #164]	; (8007148 <HAL_DMA_Abort_IT+0x1fc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d012      	beq.n	80070ce <HAL_DMA_Abort_IT+0x182>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a27      	ldr	r2, [pc, #156]	; (800714c <HAL_DMA_Abort_IT+0x200>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00a      	beq.n	80070c8 <HAL_DMA_Abort_IT+0x17c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a26      	ldr	r2, [pc, #152]	; (8007150 <HAL_DMA_Abort_IT+0x204>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d102      	bne.n	80070c2 <HAL_DMA_Abort_IT+0x176>
 80070bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070c0:	e01b      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070c6:	e018      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070cc:	e015      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070ce:	2310      	movs	r3, #16
 80070d0:	e013      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e011      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070da:	e00e      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070e0:	e00b      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070e6:	e008      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070ec:	e005      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070f2:	e002      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070f4:	2310      	movs	r3, #16
 80070f6:	e000      	b.n	80070fa <HAL_DMA_Abort_IT+0x1ae>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_DMA_Abort_IT+0x20c>)
 80070fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
    } 
  }
  return status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40020080 	.word	0x40020080
 800712c:	40020008 	.word	0x40020008
 8007130:	4002001c 	.word	0x4002001c
 8007134:	40020030 	.word	0x40020030
 8007138:	40020044 	.word	0x40020044
 800713c:	40020058 	.word	0x40020058
 8007140:	4002006c 	.word	0x4002006c
 8007144:	40020408 	.word	0x40020408
 8007148:	4002041c 	.word	0x4002041c
 800714c:	40020430 	.word	0x40020430
 8007150:	40020444 	.word	0x40020444
 8007154:	40020400 	.word	0x40020400
 8007158:	40020000 	.word	0x40020000

0800715c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	2204      	movs	r2, #4
 800717a:	409a      	lsls	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80f1 	beq.w	8007368 <HAL_DMA_IRQHandler+0x20c>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80eb 	beq.w	8007368 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0204 	bic.w	r2, r2, #4
 80071ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	4b5f      	ldr	r3, [pc, #380]	; (8007334 <HAL_DMA_IRQHandler+0x1d8>)
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d958      	bls.n	800726e <HAL_DMA_IRQHandler+0x112>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a5d      	ldr	r2, [pc, #372]	; (8007338 <HAL_DMA_IRQHandler+0x1dc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d04f      	beq.n	8007266 <HAL_DMA_IRQHandler+0x10a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a5c      	ldr	r2, [pc, #368]	; (800733c <HAL_DMA_IRQHandler+0x1e0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d048      	beq.n	8007262 <HAL_DMA_IRQHandler+0x106>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a5a      	ldr	r2, [pc, #360]	; (8007340 <HAL_DMA_IRQHandler+0x1e4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d040      	beq.n	800725c <HAL_DMA_IRQHandler+0x100>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a59      	ldr	r2, [pc, #356]	; (8007344 <HAL_DMA_IRQHandler+0x1e8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d038      	beq.n	8007256 <HAL_DMA_IRQHandler+0xfa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a57      	ldr	r2, [pc, #348]	; (8007348 <HAL_DMA_IRQHandler+0x1ec>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d030      	beq.n	8007250 <HAL_DMA_IRQHandler+0xf4>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a56      	ldr	r2, [pc, #344]	; (800734c <HAL_DMA_IRQHandler+0x1f0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d028      	beq.n	800724a <HAL_DMA_IRQHandler+0xee>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a4d      	ldr	r2, [pc, #308]	; (8007334 <HAL_DMA_IRQHandler+0x1d8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d020      	beq.n	8007244 <HAL_DMA_IRQHandler+0xe8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a52      	ldr	r2, [pc, #328]	; (8007350 <HAL_DMA_IRQHandler+0x1f4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d019      	beq.n	8007240 <HAL_DMA_IRQHandler+0xe4>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a50      	ldr	r2, [pc, #320]	; (8007354 <HAL_DMA_IRQHandler+0x1f8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d012      	beq.n	800723c <HAL_DMA_IRQHandler+0xe0>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a4f      	ldr	r2, [pc, #316]	; (8007358 <HAL_DMA_IRQHandler+0x1fc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00a      	beq.n	8007236 <HAL_DMA_IRQHandler+0xda>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a4d      	ldr	r2, [pc, #308]	; (800735c <HAL_DMA_IRQHandler+0x200>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d102      	bne.n	8007230 <HAL_DMA_IRQHandler+0xd4>
 800722a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800722e:	e01b      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007230:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007234:	e018      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800723a:	e015      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	e013      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007240:	2304      	movs	r3, #4
 8007242:	e011      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007244:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007248:	e00e      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 800724a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800724e:	e00b      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007250:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007254:	e008      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800725a:	e005      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 800725c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007260:	e002      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007262:	2340      	movs	r3, #64	; 0x40
 8007264:	e000      	b.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 8007266:	2304      	movs	r3, #4
 8007268:	4a3d      	ldr	r2, [pc, #244]	; (8007360 <HAL_DMA_IRQHandler+0x204>)
 800726a:	6053      	str	r3, [r2, #4]
 800726c:	e057      	b.n	800731e <HAL_DMA_IRQHandler+0x1c2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a31      	ldr	r2, [pc, #196]	; (8007338 <HAL_DMA_IRQHandler+0x1dc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d04f      	beq.n	8007318 <HAL_DMA_IRQHandler+0x1bc>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a2f      	ldr	r2, [pc, #188]	; (800733c <HAL_DMA_IRQHandler+0x1e0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d048      	beq.n	8007314 <HAL_DMA_IRQHandler+0x1b8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a2e      	ldr	r2, [pc, #184]	; (8007340 <HAL_DMA_IRQHandler+0x1e4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d040      	beq.n	800730e <HAL_DMA_IRQHandler+0x1b2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a2c      	ldr	r2, [pc, #176]	; (8007344 <HAL_DMA_IRQHandler+0x1e8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d038      	beq.n	8007308 <HAL_DMA_IRQHandler+0x1ac>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a2b      	ldr	r2, [pc, #172]	; (8007348 <HAL_DMA_IRQHandler+0x1ec>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d030      	beq.n	8007302 <HAL_DMA_IRQHandler+0x1a6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a29      	ldr	r2, [pc, #164]	; (800734c <HAL_DMA_IRQHandler+0x1f0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d028      	beq.n	80072fc <HAL_DMA_IRQHandler+0x1a0>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a21      	ldr	r2, [pc, #132]	; (8007334 <HAL_DMA_IRQHandler+0x1d8>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d020      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x19a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a25      	ldr	r2, [pc, #148]	; (8007350 <HAL_DMA_IRQHandler+0x1f4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d019      	beq.n	80072f2 <HAL_DMA_IRQHandler+0x196>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a24      	ldr	r2, [pc, #144]	; (8007354 <HAL_DMA_IRQHandler+0x1f8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d012      	beq.n	80072ee <HAL_DMA_IRQHandler+0x192>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a22      	ldr	r2, [pc, #136]	; (8007358 <HAL_DMA_IRQHandler+0x1fc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00a      	beq.n	80072e8 <HAL_DMA_IRQHandler+0x18c>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a21      	ldr	r2, [pc, #132]	; (800735c <HAL_DMA_IRQHandler+0x200>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d102      	bne.n	80072e2 <HAL_DMA_IRQHandler+0x186>
 80072dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072e0:	e01b      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 80072e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80072e6:	e018      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 80072e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ec:	e015      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 80072ee:	2340      	movs	r3, #64	; 0x40
 80072f0:	e013      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 80072f2:	2304      	movs	r3, #4
 80072f4:	e011      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 80072f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80072fa:	e00e      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 80072fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007300:	e00b      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 8007302:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007306:	e008      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 8007308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800730c:	e005      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 800730e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007312:	e002      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	e000      	b.n	800731a <HAL_DMA_IRQHandler+0x1be>
 8007318:	2304      	movs	r3, #4
 800731a:	4a12      	ldr	r2, [pc, #72]	; (8007364 <HAL_DMA_IRQHandler+0x208>)
 800731c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 8136 	beq.w	8007594 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007330:	e130      	b.n	8007594 <HAL_DMA_IRQHandler+0x438>
 8007332:	bf00      	nop
 8007334:	40020080 	.word	0x40020080
 8007338:	40020008 	.word	0x40020008
 800733c:	4002001c 	.word	0x4002001c
 8007340:	40020030 	.word	0x40020030
 8007344:	40020044 	.word	0x40020044
 8007348:	40020058 	.word	0x40020058
 800734c:	4002006c 	.word	0x4002006c
 8007350:	40020408 	.word	0x40020408
 8007354:	4002041c 	.word	0x4002041c
 8007358:	40020430 	.word	0x40020430
 800735c:	40020444 	.word	0x40020444
 8007360:	40020400 	.word	0x40020400
 8007364:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2202      	movs	r2, #2
 800736e:	409a      	lsls	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4013      	ands	r3, r2
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80dd 	beq.w	8007534 <HAL_DMA_IRQHandler+0x3d8>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80d7 	beq.w	8007534 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 020a 	bic.w	r2, r2, #10
 80073a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	4b7b      	ldr	r3, [pc, #492]	; (80075a0 <HAL_DMA_IRQHandler+0x444>)
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d958      	bls.n	800746a <HAL_DMA_IRQHandler+0x30e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a79      	ldr	r2, [pc, #484]	; (80075a4 <HAL_DMA_IRQHandler+0x448>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d04f      	beq.n	8007462 <HAL_DMA_IRQHandler+0x306>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a78      	ldr	r2, [pc, #480]	; (80075a8 <HAL_DMA_IRQHandler+0x44c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d048      	beq.n	800745e <HAL_DMA_IRQHandler+0x302>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a76      	ldr	r2, [pc, #472]	; (80075ac <HAL_DMA_IRQHandler+0x450>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d040      	beq.n	8007458 <HAL_DMA_IRQHandler+0x2fc>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a75      	ldr	r2, [pc, #468]	; (80075b0 <HAL_DMA_IRQHandler+0x454>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d038      	beq.n	8007452 <HAL_DMA_IRQHandler+0x2f6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a73      	ldr	r2, [pc, #460]	; (80075b4 <HAL_DMA_IRQHandler+0x458>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d030      	beq.n	800744c <HAL_DMA_IRQHandler+0x2f0>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a72      	ldr	r2, [pc, #456]	; (80075b8 <HAL_DMA_IRQHandler+0x45c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d028      	beq.n	8007446 <HAL_DMA_IRQHandler+0x2ea>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a69      	ldr	r2, [pc, #420]	; (80075a0 <HAL_DMA_IRQHandler+0x444>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d020      	beq.n	8007440 <HAL_DMA_IRQHandler+0x2e4>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a6e      	ldr	r2, [pc, #440]	; (80075bc <HAL_DMA_IRQHandler+0x460>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d019      	beq.n	800743c <HAL_DMA_IRQHandler+0x2e0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a6c      	ldr	r2, [pc, #432]	; (80075c0 <HAL_DMA_IRQHandler+0x464>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d012      	beq.n	8007438 <HAL_DMA_IRQHandler+0x2dc>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6b      	ldr	r2, [pc, #428]	; (80075c4 <HAL_DMA_IRQHandler+0x468>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00a      	beq.n	8007432 <HAL_DMA_IRQHandler+0x2d6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a69      	ldr	r2, [pc, #420]	; (80075c8 <HAL_DMA_IRQHandler+0x46c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d102      	bne.n	800742c <HAL_DMA_IRQHandler+0x2d0>
 8007426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800742a:	e01b      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 800742c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007430:	e018      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 8007432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007436:	e015      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 8007438:	2320      	movs	r3, #32
 800743a:	e013      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 800743c:	2302      	movs	r3, #2
 800743e:	e011      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 8007440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007444:	e00e      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 8007446:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800744a:	e00b      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 800744c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007450:	e008      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 8007452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007456:	e005      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 8007458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745c:	e002      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 800745e:	2320      	movs	r3, #32
 8007460:	e000      	b.n	8007464 <HAL_DMA_IRQHandler+0x308>
 8007462:	2302      	movs	r3, #2
 8007464:	4a59      	ldr	r2, [pc, #356]	; (80075cc <HAL_DMA_IRQHandler+0x470>)
 8007466:	6053      	str	r3, [r2, #4]
 8007468:	e057      	b.n	800751a <HAL_DMA_IRQHandler+0x3be>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a4d      	ldr	r2, [pc, #308]	; (80075a4 <HAL_DMA_IRQHandler+0x448>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d04f      	beq.n	8007514 <HAL_DMA_IRQHandler+0x3b8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a4b      	ldr	r2, [pc, #300]	; (80075a8 <HAL_DMA_IRQHandler+0x44c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d048      	beq.n	8007510 <HAL_DMA_IRQHandler+0x3b4>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a4a      	ldr	r2, [pc, #296]	; (80075ac <HAL_DMA_IRQHandler+0x450>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d040      	beq.n	800750a <HAL_DMA_IRQHandler+0x3ae>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a48      	ldr	r2, [pc, #288]	; (80075b0 <HAL_DMA_IRQHandler+0x454>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d038      	beq.n	8007504 <HAL_DMA_IRQHandler+0x3a8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a47      	ldr	r2, [pc, #284]	; (80075b4 <HAL_DMA_IRQHandler+0x458>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d030      	beq.n	80074fe <HAL_DMA_IRQHandler+0x3a2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a45      	ldr	r2, [pc, #276]	; (80075b8 <HAL_DMA_IRQHandler+0x45c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d028      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x39c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3d      	ldr	r2, [pc, #244]	; (80075a0 <HAL_DMA_IRQHandler+0x444>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d020      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x396>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a41      	ldr	r2, [pc, #260]	; (80075bc <HAL_DMA_IRQHandler+0x460>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d019      	beq.n	80074ee <HAL_DMA_IRQHandler+0x392>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a40      	ldr	r2, [pc, #256]	; (80075c0 <HAL_DMA_IRQHandler+0x464>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d012      	beq.n	80074ea <HAL_DMA_IRQHandler+0x38e>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a3e      	ldr	r2, [pc, #248]	; (80075c4 <HAL_DMA_IRQHandler+0x468>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00a      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x388>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a3d      	ldr	r2, [pc, #244]	; (80075c8 <HAL_DMA_IRQHandler+0x46c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d102      	bne.n	80074de <HAL_DMA_IRQHandler+0x382>
 80074d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074dc:	e01b      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 80074de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074e2:	e018      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 80074e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e8:	e015      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 80074ea:	2320      	movs	r3, #32
 80074ec:	e013      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e011      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 80074f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074f6:	e00e      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 80074f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074fc:	e00b      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 80074fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007502:	e008      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 8007504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007508:	e005      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 800750a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750e:	e002      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 8007510:	2320      	movs	r3, #32
 8007512:	e000      	b.n	8007516 <HAL_DMA_IRQHandler+0x3ba>
 8007514:	2302      	movs	r3, #2
 8007516:	4a2e      	ldr	r2, [pc, #184]	; (80075d0 <HAL_DMA_IRQHandler+0x474>)
 8007518:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d034      	beq.n	8007594 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007532:	e02f      	b.n	8007594 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	2208      	movs	r2, #8
 800753a:	409a      	lsls	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d028      	beq.n	8007596 <HAL_DMA_IRQHandler+0x43a>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 0308 	and.w	r3, r3, #8
 800754a:	2b00      	cmp	r3, #0
 800754c:	d023      	beq.n	8007596 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 020e 	bic.w	r2, r2, #14
 800755c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007566:	2101      	movs	r1, #1
 8007568:	fa01 f202 	lsl.w	r2, r1, r2
 800756c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
    }
  }
  return;
 8007594:	bf00      	nop
 8007596:	bf00      	nop
}
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40020080 	.word	0x40020080
 80075a4:	40020008 	.word	0x40020008
 80075a8:	4002001c 	.word	0x4002001c
 80075ac:	40020030 	.word	0x40020030
 80075b0:	40020044 	.word	0x40020044
 80075b4:	40020058 	.word	0x40020058
 80075b8:	4002006c 	.word	0x4002006c
 80075bc:	40020408 	.word	0x40020408
 80075c0:	4002041c 	.word	0x4002041c
 80075c4:	40020430 	.word	0x40020430
 80075c8:	40020444 	.word	0x40020444
 80075cc:	40020400 	.word	0x40020400
 80075d0:	40020000 	.word	0x40020000

080075d4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80075e2:	b2db      	uxtb	r3, r3
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007604:	2101      	movs	r1, #1
 8007606:	fa01 f202 	lsl.w	r2, r1, r2
 800760a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b10      	cmp	r3, #16
 800761a:	d108      	bne.n	800762e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800762c:	e007      	b.n	800763e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	60da      	str	r2, [r3, #12]
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	bc80      	pop	{r7}
 8007646:	4770      	bx	lr

08007648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007648:	b480      	push	{r7}
 800764a:	b08b      	sub	sp, #44	; 0x2c
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007652:	2300      	movs	r3, #0
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007656:	2300      	movs	r3, #0
 8007658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800765a:	e179      	b.n	8007950 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800765c:	2201      	movs	r2, #1
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	4013      	ands	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	429a      	cmp	r2, r3
 8007676:	f040 8168 	bne.w	800794a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	4a96      	ldr	r2, [pc, #600]	; (80078d8 <HAL_GPIO_Init+0x290>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d05e      	beq.n	8007742 <HAL_GPIO_Init+0xfa>
 8007684:	4a94      	ldr	r2, [pc, #592]	; (80078d8 <HAL_GPIO_Init+0x290>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d875      	bhi.n	8007776 <HAL_GPIO_Init+0x12e>
 800768a:	4a94      	ldr	r2, [pc, #592]	; (80078dc <HAL_GPIO_Init+0x294>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d058      	beq.n	8007742 <HAL_GPIO_Init+0xfa>
 8007690:	4a92      	ldr	r2, [pc, #584]	; (80078dc <HAL_GPIO_Init+0x294>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d86f      	bhi.n	8007776 <HAL_GPIO_Init+0x12e>
 8007696:	4a92      	ldr	r2, [pc, #584]	; (80078e0 <HAL_GPIO_Init+0x298>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d052      	beq.n	8007742 <HAL_GPIO_Init+0xfa>
 800769c:	4a90      	ldr	r2, [pc, #576]	; (80078e0 <HAL_GPIO_Init+0x298>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d869      	bhi.n	8007776 <HAL_GPIO_Init+0x12e>
 80076a2:	4a90      	ldr	r2, [pc, #576]	; (80078e4 <HAL_GPIO_Init+0x29c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d04c      	beq.n	8007742 <HAL_GPIO_Init+0xfa>
 80076a8:	4a8e      	ldr	r2, [pc, #568]	; (80078e4 <HAL_GPIO_Init+0x29c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d863      	bhi.n	8007776 <HAL_GPIO_Init+0x12e>
 80076ae:	4a8e      	ldr	r2, [pc, #568]	; (80078e8 <HAL_GPIO_Init+0x2a0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d046      	beq.n	8007742 <HAL_GPIO_Init+0xfa>
 80076b4:	4a8c      	ldr	r2, [pc, #560]	; (80078e8 <HAL_GPIO_Init+0x2a0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d85d      	bhi.n	8007776 <HAL_GPIO_Init+0x12e>
 80076ba:	2b12      	cmp	r3, #18
 80076bc:	d82a      	bhi.n	8007714 <HAL_GPIO_Init+0xcc>
 80076be:	2b12      	cmp	r3, #18
 80076c0:	d859      	bhi.n	8007776 <HAL_GPIO_Init+0x12e>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <HAL_GPIO_Init+0x80>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	08007743 	.word	0x08007743
 80076cc:	0800771d 	.word	0x0800771d
 80076d0:	0800772f 	.word	0x0800772f
 80076d4:	08007771 	.word	0x08007771
 80076d8:	08007777 	.word	0x08007777
 80076dc:	08007777 	.word	0x08007777
 80076e0:	08007777 	.word	0x08007777
 80076e4:	08007777 	.word	0x08007777
 80076e8:	08007777 	.word	0x08007777
 80076ec:	08007777 	.word	0x08007777
 80076f0:	08007777 	.word	0x08007777
 80076f4:	08007777 	.word	0x08007777
 80076f8:	08007777 	.word	0x08007777
 80076fc:	08007777 	.word	0x08007777
 8007700:	08007777 	.word	0x08007777
 8007704:	08007777 	.word	0x08007777
 8007708:	08007777 	.word	0x08007777
 800770c:	08007725 	.word	0x08007725
 8007710:	08007739 	.word	0x08007739
 8007714:	4a75      	ldr	r2, [pc, #468]	; (80078ec <HAL_GPIO_Init+0x2a4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800771a:	e02c      	b.n	8007776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	623b      	str	r3, [r7, #32]
          break;
 8007722:	e029      	b.n	8007778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	3304      	adds	r3, #4
 800772a:	623b      	str	r3, [r7, #32]
          break;
 800772c:	e024      	b.n	8007778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	3308      	adds	r3, #8
 8007734:	623b      	str	r3, [r7, #32]
          break;
 8007736:	e01f      	b.n	8007778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	330c      	adds	r3, #12
 800773e:	623b      	str	r3, [r7, #32]
          break;
 8007740:	e01a      	b.n	8007778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800774a:	2304      	movs	r3, #4
 800774c:	623b      	str	r3, [r7, #32]
          break;
 800774e:	e013      	b.n	8007778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d105      	bne.n	8007764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007758:	2308      	movs	r3, #8
 800775a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	611a      	str	r2, [r3, #16]
          break;
 8007762:	e009      	b.n	8007778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007764:	2308      	movs	r3, #8
 8007766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	615a      	str	r2, [r3, #20]
          break;
 800776e:	e003      	b.n	8007778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007770:	2300      	movs	r3, #0
 8007772:	623b      	str	r3, [r7, #32]
          break;
 8007774:	e000      	b.n	8007778 <HAL_GPIO_Init+0x130>
          break;
 8007776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2bff      	cmp	r3, #255	; 0xff
 800777c:	d801      	bhi.n	8007782 <HAL_GPIO_Init+0x13a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	e001      	b.n	8007786 <HAL_GPIO_Init+0x13e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2bff      	cmp	r3, #255	; 0xff
 800778c:	d802      	bhi.n	8007794 <HAL_GPIO_Init+0x14c>
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	e002      	b.n	800779a <HAL_GPIO_Init+0x152>
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	3b08      	subs	r3, #8
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	210f      	movs	r1, #15
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	fa01 f303 	lsl.w	r3, r1, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	401a      	ands	r2, r3
 80077ac:	6a39      	ldr	r1, [r7, #32]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	fa01 f303 	lsl.w	r3, r1, r3
 80077b4:	431a      	orrs	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80c1 	beq.w	800794a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80077c8:	4b49      	ldr	r3, [pc, #292]	; (80078f0 <HAL_GPIO_Init+0x2a8>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	4a48      	ldr	r2, [pc, #288]	; (80078f0 <HAL_GPIO_Init+0x2a8>)
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	6193      	str	r3, [r2, #24]
 80077d4:	4b46      	ldr	r3, [pc, #280]	; (80078f0 <HAL_GPIO_Init+0x2a8>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	60bb      	str	r3, [r7, #8]
 80077de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80077e0:	4a44      	ldr	r2, [pc, #272]	; (80078f4 <HAL_GPIO_Init+0x2ac>)
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	089b      	lsrs	r3, r3, #2
 80077e6:	3302      	adds	r3, #2
 80077e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	f003 0303 	and.w	r3, r3, #3
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	220f      	movs	r2, #15
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	43db      	mvns	r3, r3
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4013      	ands	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a3c      	ldr	r2, [pc, #240]	; (80078f8 <HAL_GPIO_Init+0x2b0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d01f      	beq.n	800784c <HAL_GPIO_Init+0x204>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a3b      	ldr	r2, [pc, #236]	; (80078fc <HAL_GPIO_Init+0x2b4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d019      	beq.n	8007848 <HAL_GPIO_Init+0x200>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a3a      	ldr	r2, [pc, #232]	; (8007900 <HAL_GPIO_Init+0x2b8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <HAL_GPIO_Init+0x1fc>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a39      	ldr	r2, [pc, #228]	; (8007904 <HAL_GPIO_Init+0x2bc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00d      	beq.n	8007840 <HAL_GPIO_Init+0x1f8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a38      	ldr	r2, [pc, #224]	; (8007908 <HAL_GPIO_Init+0x2c0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <HAL_GPIO_Init+0x1f4>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a37      	ldr	r2, [pc, #220]	; (800790c <HAL_GPIO_Init+0x2c4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d101      	bne.n	8007838 <HAL_GPIO_Init+0x1f0>
 8007834:	2305      	movs	r3, #5
 8007836:	e00a      	b.n	800784e <HAL_GPIO_Init+0x206>
 8007838:	2306      	movs	r3, #6
 800783a:	e008      	b.n	800784e <HAL_GPIO_Init+0x206>
 800783c:	2304      	movs	r3, #4
 800783e:	e006      	b.n	800784e <HAL_GPIO_Init+0x206>
 8007840:	2303      	movs	r3, #3
 8007842:	e004      	b.n	800784e <HAL_GPIO_Init+0x206>
 8007844:	2302      	movs	r3, #2
 8007846:	e002      	b.n	800784e <HAL_GPIO_Init+0x206>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <HAL_GPIO_Init+0x206>
 800784c:	2300      	movs	r3, #0
 800784e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007850:	f002 0203 	and.w	r2, r2, #3
 8007854:	0092      	lsls	r2, r2, #2
 8007856:	4093      	lsls	r3, r2
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800785e:	4925      	ldr	r1, [pc, #148]	; (80078f4 <HAL_GPIO_Init+0x2ac>)
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	089b      	lsrs	r3, r3, #2
 8007864:	3302      	adds	r3, #2
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007878:	4b25      	ldr	r3, [pc, #148]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	4924      	ldr	r1, [pc, #144]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	4313      	orrs	r3, r2
 8007882:	608b      	str	r3, [r1, #8]
 8007884:	e006      	b.n	8007894 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007886:	4b22      	ldr	r3, [pc, #136]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	43db      	mvns	r3, r3
 800788e:	4920      	ldr	r1, [pc, #128]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 8007890:	4013      	ands	r3, r2
 8007892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d006      	beq.n	80078ae <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80078a0:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	491a      	ldr	r1, [pc, #104]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60cb      	str	r3, [r1, #12]
 80078ac:	e006      	b.n	80078bc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80078ae:	4b18      	ldr	r3, [pc, #96]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	43db      	mvns	r3, r3
 80078b6:	4916      	ldr	r1, [pc, #88]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d025      	beq.n	8007914 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	4910      	ldr	r1, [pc, #64]	; (8007910 <HAL_GPIO_Init+0x2c8>)
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	e025      	b.n	8007922 <HAL_GPIO_Init+0x2da>
 80078d6:	bf00      	nop
 80078d8:	10320000 	.word	0x10320000
 80078dc:	10310000 	.word	0x10310000
 80078e0:	10220000 	.word	0x10220000
 80078e4:	10210000 	.word	0x10210000
 80078e8:	10120000 	.word	0x10120000
 80078ec:	10110000 	.word	0x10110000
 80078f0:	40021000 	.word	0x40021000
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40010800 	.word	0x40010800
 80078fc:	40010c00 	.word	0x40010c00
 8007900:	40011000 	.word	0x40011000
 8007904:	40011400 	.word	0x40011400
 8007908:	40011800 	.word	0x40011800
 800790c:	40011c00 	.word	0x40011c00
 8007910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007914:	4b15      	ldr	r3, [pc, #84]	; (800796c <HAL_GPIO_Init+0x324>)
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	43db      	mvns	r3, r3
 800791c:	4913      	ldr	r1, [pc, #76]	; (800796c <HAL_GPIO_Init+0x324>)
 800791e:	4013      	ands	r3, r2
 8007920:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d006      	beq.n	800793c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <HAL_GPIO_Init+0x324>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	490e      	ldr	r1, [pc, #56]	; (800796c <HAL_GPIO_Init+0x324>)
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	4313      	orrs	r3, r2
 8007938:	600b      	str	r3, [r1, #0]
 800793a:	e006      	b.n	800794a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800793c:	4b0b      	ldr	r3, [pc, #44]	; (800796c <HAL_GPIO_Init+0x324>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	43db      	mvns	r3, r3
 8007944:	4909      	ldr	r1, [pc, #36]	; (800796c <HAL_GPIO_Init+0x324>)
 8007946:	4013      	ands	r3, r2
 8007948:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	3301      	adds	r3, #1
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	fa22 f303 	lsr.w	r3, r2, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	f47f ae7e 	bne.w	800765c <HAL_GPIO_Init+0x14>
  }
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	372c      	adds	r7, #44	; 0x2c
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr
 800796c:	40010400 	.word	0x40010400

08007970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	887b      	ldrh	r3, [r7, #2]
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	e001      	b.n	8007992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr

0800799e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	807b      	strh	r3, [r7, #2]
 80079aa:	4613      	mov	r3, r2
 80079ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079ae:	787b      	ldrb	r3, [r7, #1]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079b4:	887a      	ldrh	r2, [r7, #2]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80079ba:	e003      	b.n	80079c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80079bc:	887b      	ldrh	r3, [r7, #2]
 80079be:	041a      	lsls	r2, r3, #16
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	611a      	str	r2, [r3, #16]
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr
	...

080079d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e12b      	b.n	8007c3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fa feb2 	bl	8002760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2224      	movs	r2, #36	; 0x24
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a34:	f005 fa44 	bl	800cec0 <HAL_RCC_GetPCLK1Freq>
 8007a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	4a81      	ldr	r2, [pc, #516]	; (8007c44 <HAL_I2C_Init+0x274>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d807      	bhi.n	8007a54 <HAL_I2C_Init+0x84>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4a80      	ldr	r2, [pc, #512]	; (8007c48 <HAL_I2C_Init+0x278>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	bf94      	ite	ls
 8007a4c:	2301      	movls	r3, #1
 8007a4e:	2300      	movhi	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	e006      	b.n	8007a62 <HAL_I2C_Init+0x92>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4a7d      	ldr	r2, [pc, #500]	; (8007c4c <HAL_I2C_Init+0x27c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	bf94      	ite	ls
 8007a5c:	2301      	movls	r3, #1
 8007a5e:	2300      	movhi	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e0e7      	b.n	8007c3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4a78      	ldr	r2, [pc, #480]	; (8007c50 <HAL_I2C_Init+0x280>)
 8007a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a72:	0c9b      	lsrs	r3, r3, #18
 8007a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	4a6a      	ldr	r2, [pc, #424]	; (8007c44 <HAL_I2C_Init+0x274>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d802      	bhi.n	8007aa4 <HAL_I2C_Init+0xd4>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	e009      	b.n	8007ab8 <HAL_I2C_Init+0xe8>
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
 8007aae:	4a69      	ldr	r2, [pc, #420]	; (8007c54 <HAL_I2C_Init+0x284>)
 8007ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab4:	099b      	lsrs	r3, r3, #6
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007aca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	495c      	ldr	r1, [pc, #368]	; (8007c44 <HAL_I2C_Init+0x274>)
 8007ad4:	428b      	cmp	r3, r1
 8007ad6:	d819      	bhi.n	8007b0c <HAL_I2C_Init+0x13c>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	1e59      	subs	r1, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ae6:	1c59      	adds	r1, r3, #1
 8007ae8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007aec:	400b      	ands	r3, r1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_I2C_Init+0x138>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1e59      	subs	r1, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b00:	3301      	adds	r3, #1
 8007b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b06:	e051      	b.n	8007bac <HAL_I2C_Init+0x1dc>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	e04f      	b.n	8007bac <HAL_I2C_Init+0x1dc>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d111      	bne.n	8007b38 <HAL_I2C_Init+0x168>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	1e58      	subs	r0, r3, #1
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6859      	ldr	r1, [r3, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	440b      	add	r3, r1
 8007b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b26:	3301      	adds	r3, #1
 8007b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bf0c      	ite	eq
 8007b30:	2301      	moveq	r3, #1
 8007b32:	2300      	movne	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	e012      	b.n	8007b5e <HAL_I2C_Init+0x18e>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	1e58      	subs	r0, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6859      	ldr	r1, [r3, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	0099      	lsls	r1, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b4e:	3301      	adds	r3, #1
 8007b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_I2C_Init+0x196>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e022      	b.n	8007bac <HAL_I2C_Init+0x1dc>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10e      	bne.n	8007b8c <HAL_I2C_Init+0x1bc>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1e58      	subs	r0, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6859      	ldr	r1, [r3, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	440b      	add	r3, r1
 8007b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b80:	3301      	adds	r3, #1
 8007b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8a:	e00f      	b.n	8007bac <HAL_I2C_Init+0x1dc>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	1e58      	subs	r0, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6859      	ldr	r1, [r3, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	0099      	lsls	r1, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	6809      	ldr	r1, [r1, #0]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69da      	ldr	r2, [r3, #28]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007bda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6911      	ldr	r1, [r2, #16]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	68d2      	ldr	r2, [r2, #12]
 8007be6:	4311      	orrs	r1, r2
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695a      	ldr	r2, [r3, #20]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0201 	orr.w	r2, r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	000186a0 	.word	0x000186a0
 8007c48:	001e847f 	.word	0x001e847f
 8007c4c:	003d08ff 	.word	0x003d08ff
 8007c50:	431bde83 	.word	0x431bde83
 8007c54:	10624dd3 	.word	0x10624dd3

08007c58 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d103      	bne.n	8007c76 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
  }
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bc80      	pop	{r7}
 8007c7e:	4770      	bx	lr

08007c80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4603      	mov	r3, r0
 8007c90:	817b      	strh	r3, [r7, #10]
 8007c92:	460b      	mov	r3, r1
 8007c94:	813b      	strh	r3, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c9a:	f7fe faa7 	bl	80061ec <HAL_GetTick>
 8007c9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	f040 80d9 	bne.w	8007e60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	2319      	movs	r3, #25
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	496d      	ldr	r1, [pc, #436]	; (8007e6c <HAL_I2C_Mem_Write+0x1ec>)
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f002 fd45 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e0cc      	b.n	8007e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <HAL_I2C_Mem_Write+0x56>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e0c5      	b.n	8007e62 <HAL_I2C_Mem_Write+0x1e2>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d007      	beq.n	8007cfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2221      	movs	r2, #33	; 0x21
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2240      	movs	r2, #64	; 0x40
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a3a      	ldr	r2, [r7, #32]
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a4d      	ldr	r2, [pc, #308]	; (8007e70 <HAL_I2C_Mem_Write+0x1f0>)
 8007d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d3e:	88f8      	ldrh	r0, [r7, #6]
 8007d40:	893a      	ldrh	r2, [r7, #8]
 8007d42:	8979      	ldrh	r1, [r7, #10]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f002 f9c8 	bl	800a0e4 <I2C_RequestMemoryWrite>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d052      	beq.n	8007e00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e081      	b.n	8007e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f002 fe0a 	bl	800a97c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00d      	beq.n	8007d8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d107      	bne.n	8007d86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e06b      	b.n	8007e62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d11b      	bne.n	8007e00 <HAL_I2C_Mem_Write+0x180>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d017      	beq.n	8007e00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1aa      	bne.n	8007d5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f002 fdfd 	bl	800aa0c <I2C_WaitOnBTFFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00d      	beq.n	8007e34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d107      	bne.n	8007e30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e016      	b.n	8007e62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e000      	b.n	8007e62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007e60:	2302      	movs	r3, #2
  }
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	00100002 	.word	0x00100002
 8007e70:	ffff0000 	.word	0xffff0000

08007e74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08c      	sub	sp, #48	; 0x30
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	4611      	mov	r1, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	817b      	strh	r3, [r7, #10]
 8007e86:	460b      	mov	r3, r1
 8007e88:	813b      	strh	r3, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e92:	f7fe f9ab 	bl	80061ec <HAL_GetTick>
 8007e96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	f040 8244 	bne.w	800832e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	2319      	movs	r3, #25
 8007eac:	2201      	movs	r2, #1
 8007eae:	4982      	ldr	r1, [pc, #520]	; (80080b8 <HAL_I2C_Mem_Read+0x244>)
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f002 fc49 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e237      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_I2C_Mem_Read+0x5a>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e230      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d007      	beq.n	8007ef4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2222      	movs	r2, #34	; 0x22
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2240      	movs	r2, #64	; 0x40
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a62      	ldr	r2, [pc, #392]	; (80080bc <HAL_I2C_Mem_Read+0x248>)
 8007f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f36:	88f8      	ldrh	r0, [r7, #6]
 8007f38:	893a      	ldrh	r2, [r7, #8]
 8007f3a:	8979      	ldrh	r1, [r7, #10]
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4603      	mov	r3, r0
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f002 f962 	bl	800a210 <I2C_RequestMemoryRead>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e1ec      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d113      	bne.n	8007f86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	61fb      	str	r3, [r7, #28]
 8007f72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e1c0      	b.n	8008308 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d11e      	bne.n	8007fcc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f9e:	b672      	cpsid	i
}
 8007fa0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007fc8:	b662      	cpsie	i
}
 8007fca:	e035      	b.n	8008038 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d11e      	bne.n	8008012 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007fe4:	b672      	cpsid	i
}
 8007fe6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fe8:	2300      	movs	r3, #0
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800800c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800800e:	b662      	cpsie	i
}
 8008010:	e012      	b.n	8008038 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008020:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008022:	2300      	movs	r3, #0
 8008024:	613b      	str	r3, [r7, #16]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	613b      	str	r3, [r7, #16]
 8008036:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008038:	e166      	b.n	8008308 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803e:	2b03      	cmp	r3, #3
 8008040:	f200 811f 	bhi.w	8008282 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008048:	2b01      	cmp	r3, #1
 800804a:	d123      	bne.n	8008094 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800804c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f002 fd55 	bl	800ab00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e167      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008092:	e139      	b.n	8008308 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008098:	2b02      	cmp	r3, #2
 800809a:	d152      	bne.n	8008142 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	2200      	movs	r2, #0
 80080a4:	4906      	ldr	r1, [pc, #24]	; (80080c0 <HAL_I2C_Mem_Read+0x24c>)
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f002 fb4e 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e13c      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
 80080b6:	bf00      	nop
 80080b8:	00100002 	.word	0x00100002
 80080bc:	ffff0000 	.word	0xffff0000
 80080c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80080c4:	b672      	cpsid	i
}
 80080c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800810a:	b662      	cpsie	i
}
 800810c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008140:	e0e2      	b.n	8008308 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	2200      	movs	r2, #0
 800814a:	497b      	ldr	r1, [pc, #492]	; (8008338 <HAL_I2C_Mem_Read+0x4c4>)
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f002 fafb 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0e9      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800816a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800816c:	b672      	cpsid	i
}
 800816e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80081a2:	4b66      	ldr	r3, [pc, #408]	; (800833c <HAL_I2C_Mem_Read+0x4c8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	08db      	lsrs	r3, r3, #3
 80081a8:	4a65      	ldr	r2, [pc, #404]	; (8008340 <HAL_I2C_Mem_Read+0x4cc>)
 80081aa:	fba2 2303 	umull	r2, r3, r2, r3
 80081ae:	0a1a      	lsrs	r2, r3, #8
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	00da      	lsls	r2, r3, #3
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	3b01      	subs	r3, #1
 80081c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d118      	bne.n	80081fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80081ea:	b662      	cpsie	i
}
 80081ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e09a      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b04      	cmp	r3, #4
 8008206:	d1d9      	bne.n	80081bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	b29a      	uxth	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800824a:	b662      	cpsie	i
}
 800824c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826a:	3b01      	subs	r3, #1
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008280:	e042      	b.n	8008308 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f002 fc3a 	bl	800ab00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e04c      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d118      	bne.n	8008308 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082fe:	b29b      	uxth	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	2b00      	cmp	r3, #0
 800830e:	f47f ae94 	bne.w	800803a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e000      	b.n	8008330 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800832e:	2302      	movs	r3, #2
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3728      	adds	r7, #40	; 0x28
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	00010004 	.word	0x00010004
 800833c:	2000068c 	.word	0x2000068c
 8008340:	14f8b589 	.word	0x14f8b589

08008344 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af02      	add	r7, sp, #8
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	461a      	mov	r2, r3
 8008352:	4603      	mov	r3, r0
 8008354:	817b      	strh	r3, [r7, #10]
 8008356:	460b      	mov	r3, r1
 8008358:	813b      	strh	r3, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008362:	f7fd ff43 	bl	80061ec <HAL_GetTick>
 8008366:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b20      	cmp	r3, #32
 8008372:	f040 812e 	bne.w	80085d2 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008376:	4b99      	ldr	r3, [pc, #612]	; (80085dc <HAL_I2C_Mem_Write_DMA+0x298>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	08db      	lsrs	r3, r3, #3
 800837c:	4a98      	ldr	r2, [pc, #608]	; (80085e0 <HAL_I2C_Mem_Write_DMA+0x29c>)
 800837e:	fba2 2303 	umull	r2, r3, r2, r3
 8008382:	0a1a      	lsrs	r2, r3, #8
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009a      	lsls	r2, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	3b01      	subs	r3, #1
 8008394:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d112      	bne.n	80083c2 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	f043 0220 	orr.w	r2, r3, #32
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 80083be:	2302      	movs	r3, #2
 80083c0:	e108      	b.n	80085d4 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d0df      	beq.n	8008390 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d101      	bne.n	80083de <HAL_I2C_Mem_Write_DMA+0x9a>
 80083da:	2302      	movs	r3, #2
 80083dc:	e0fa      	b.n	80085d4 <HAL_I2C_Mem_Write_DMA+0x290>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d007      	beq.n	8008404 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2221      	movs	r2, #33	; 0x21
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800842e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4a68      	ldr	r2, [pc, #416]	; (80085e4 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008446:	897a      	ldrh	r2, [r7, #10]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800844c:	893a      	ldrh	r2, [r7, #8]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80a1 	beq.w	80085aa <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	2b00      	cmp	r3, #0
 800846e:	d022      	beq.n	80084b6 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	4a5c      	ldr	r2, [pc, #368]	; (80085e8 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8008476:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	4a5b      	ldr	r2, [pc, #364]	; (80085ec <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800847e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	2200      	movs	r2, #0
 8008486:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	2200      	movs	r2, #0
 800848e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	4619      	mov	r1, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3310      	adds	r3, #16
 80084a0:	461a      	mov	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a6:	f7fe fcf1 	bl	8006e8c <HAL_DMA_Start_IT>
 80084aa:	4603      	mov	r3, r0
 80084ac:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80084ae:	7efb      	ldrb	r3, [r7, #27]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d166      	bne.n	8008582 <HAL_I2C_Mem_Write_DMA+0x23e>
 80084b4:	e013      	b.n	80084de <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e07a      	b.n	80085d4 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80084de:	88f8      	ldrh	r0, [r7, #6]
 80084e0:	893a      	ldrh	r2, [r7, #8]
 80084e2:	8979      	ldrh	r1, [r7, #10]
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	2323      	movs	r3, #35	; 0x23
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	4603      	mov	r3, r0
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f001 fdf8 	bl	800a0e4 <I2C_RequestMemoryWrite>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d022      	beq.n	8008540 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fd24 	bl	8006f4c <HAL_DMA_Abort_IT>
 8008504:	4603      	mov	r3, r0
 8008506:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850c:	2200      	movs	r2, #0
 800850e:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800851e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e049      	b.n	80085d4 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	e028      	b.n	80085d4 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2220      	movs	r2, #32
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	f043 0210 	orr.w	r2, r3, #16
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e014      	b.n	80085d4 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e000      	b.n	80085d4 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 80085d2:	2302      	movs	r3, #2
  }
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3720      	adds	r7, #32
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	2000068c 	.word	0x2000068c
 80085e0:	14f8b589 	.word	0x14f8b589
 80085e4:	ffff0000 	.word	0xffff0000
 80085e8:	0800a3e1 	.word	0x0800a3e1
 80085ec:	0800a58b 	.word	0x0800a58b

080085f0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08c      	sub	sp, #48	; 0x30
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	4603      	mov	r3, r0
 8008600:	817b      	strh	r3, [r7, #10]
 8008602:	460b      	mov	r3, r1
 8008604:	813b      	strh	r3, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800860a:	f7fd fdef 	bl	80061ec <HAL_GetTick>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b20      	cmp	r3, #32
 800861e:	f040 8168 	bne.w	80088f2 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008622:	4b98      	ldr	r3, [pc, #608]	; (8008884 <HAL_I2C_Mem_Read_DMA+0x294>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	08db      	lsrs	r3, r3, #3
 8008628:	4a97      	ldr	r2, [pc, #604]	; (8008888 <HAL_I2C_Mem_Read_DMA+0x298>)
 800862a:	fba2 2303 	umull	r2, r3, r2, r3
 800862e:	0a1a      	lsrs	r2, r3, #8
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009a      	lsls	r2, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	3b01      	subs	r3, #1
 8008640:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d112      	bne.n	800866e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f043 0220 	orr.w	r2, r3, #32
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800866a:	2302      	movs	r3, #2
 800866c:	e142      	b.n	80088f4 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b02      	cmp	r3, #2
 800867a:	d0df      	beq.n	800863c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_I2C_Mem_Read_DMA+0x9a>
 8008686:	2302      	movs	r3, #2
 8008688:	e134      	b.n	80088f4 <HAL_I2C_Mem_Read_DMA+0x304>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b01      	cmp	r3, #1
 800869e:	d007      	beq.n	80086b0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f042 0201 	orr.w	r2, r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2222      	movs	r2, #34	; 0x22
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2240      	movs	r2, #64	; 0x40
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80086e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4a67      	ldr	r2, [pc, #412]	; (800888c <HAL_I2C_Mem_Read_DMA+0x29c>)
 80086f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80086f2:	897a      	ldrh	r2, [r7, #10]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80086f8:	893a      	ldrh	r2, [r7, #8]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80086fe:	88fa      	ldrh	r2, [r7, #6]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80c2 	beq.w	8008898 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d024      	beq.n	8008766 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	4a5b      	ldr	r2, [pc, #364]	; (8008890 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8008722:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	4a5a      	ldr	r2, [pc, #360]	; (8008894 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 800872a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	2200      	movs	r2, #0
 8008732:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008738:	2200      	movs	r2, #0
 800873a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3310      	adds	r3, #16
 8008746:	4619      	mov	r1, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	461a      	mov	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008752:	f7fe fb9b 	bl	8006e8c <HAL_DMA_Start_IT>
 8008756:	4603      	mov	r3, r0
 8008758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800875c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008760:	2b00      	cmp	r3, #0
 8008762:	d17b      	bne.n	800885c <HAL_I2C_Mem_Read_DMA+0x26c>
 8008764:	e013      	b.n	800878e <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e0b2      	b.n	80088f4 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800878e:	88f8      	ldrh	r0, [r7, #6]
 8008790:	893a      	ldrh	r2, [r7, #8]
 8008792:	8979      	ldrh	r1, [r7, #10]
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	2323      	movs	r3, #35	; 0x23
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	4603      	mov	r3, r0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f001 fd36 	bl	800a210 <I2C_RequestMemoryRead>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d023      	beq.n	80087f2 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fbcc 	bl	8006f4c <HAL_DMA_Abort_IT>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	2200      	movs	r2, #0
 80087c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087d0:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e080      	b.n	80088f4 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d108      	bne.n	800880c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e007      	b.n	800881c <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800881a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800881c:	2300      	movs	r3, #0
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008848:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	e048      	b.n	80088ee <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008870:	f043 0210 	orr.w	r2, r3, #16
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e037      	b.n	80088f4 <HAL_I2C_Mem_Read_DMA+0x304>
 8008884:	2000068c 	.word	0x2000068c
 8008888:	14f8b589 	.word	0x14f8b589
 800888c:	ffff0000 	.word	0xffff0000
 8008890:	0800a3e1 	.word	0x0800a3e1
 8008894:	0800a58b 	.word	0x0800a58b
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008898:	88f8      	ldrh	r0, [r7, #6]
 800889a:	893a      	ldrh	r2, [r7, #8]
 800889c:	8979      	ldrh	r1, [r7, #10]
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	2323      	movs	r3, #35	; 0x23
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	4603      	mov	r3, r0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f001 fcb1 	bl	800a210 <I2C_RequestMemoryRead>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e01d      	b.n	80088f4 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088dc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 80088f2:	2302      	movs	r3, #2
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3728      	adds	r7, #40	; 0x28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	607a      	str	r2, [r7, #4]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	460b      	mov	r3, r1
 800890a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800890c:	f7fd fc6e 	bl	80061ec <HAL_GetTick>
 8008910:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b20      	cmp	r3, #32
 8008920:	f040 8111 	bne.w	8008b46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2319      	movs	r3, #25
 800892a:	2201      	movs	r2, #1
 800892c:	4988      	ldr	r1, [pc, #544]	; (8008b50 <HAL_I2C_IsDeviceReady+0x254>)
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f001 ff0a 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800893a:	2302      	movs	r3, #2
 800893c:	e104      	b.n	8008b48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_I2C_IsDeviceReady+0x50>
 8008948:	2302      	movs	r3, #2
 800894a:	e0fd      	b.n	8008b48 <HAL_I2C_IsDeviceReady+0x24c>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b01      	cmp	r3, #1
 8008960:	d007      	beq.n	8008972 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0201 	orr.w	r2, r2, #1
 8008970:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008980:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2224      	movs	r2, #36	; 0x24
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4a70      	ldr	r2, [pc, #448]	; (8008b54 <HAL_I2C_IsDeviceReady+0x258>)
 8008994:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f001 fec8 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089cc:	d103      	bne.n	80089d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e0b6      	b.n	8008b48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089da:	897b      	ldrh	r3, [r7, #10]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80089ea:	f7fd fbff 	bl	80061ec <HAL_GetTick>
 80089ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	bf0c      	ite	eq
 80089fe:	2301      	moveq	r3, #1
 8008a00:	2300      	movne	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a14:	bf0c      	ite	eq
 8008a16:	2301      	moveq	r3, #1
 8008a18:	2300      	movne	r3, #0
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008a1e:	e025      	b.n	8008a6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a20:	f7fd fbe4 	bl	80061ec <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d302      	bcc.n	8008a36 <HAL_I2C_IsDeviceReady+0x13a>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	22a0      	movs	r2, #160	; 0xa0
 8008a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	bf0c      	ite	eq
 8008a4c:	2301      	moveq	r3, #1
 8008a4e:	2300      	movne	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2ba0      	cmp	r3, #160	; 0xa0
 8008a76:	d005      	beq.n	8008a84 <HAL_I2C_IsDeviceReady+0x188>
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <HAL_I2C_IsDeviceReady+0x188>
 8008a7e:	7dbb      	ldrb	r3, [r7, #22]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0cd      	beq.n	8008a20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d129      	bne.n	8008aee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	613b      	str	r3, [r7, #16]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	2319      	movs	r3, #25
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4921      	ldr	r1, [pc, #132]	; (8008b50 <HAL_I2C_IsDeviceReady+0x254>)
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f001 fe3c 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e036      	b.n	8008b48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e02c      	b.n	8008b48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008afc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	2319      	movs	r3, #25
 8008b0e:	2201      	movs	r2, #1
 8008b10:	490f      	ldr	r1, [pc, #60]	; (8008b50 <HAL_I2C_IsDeviceReady+0x254>)
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f001 fe18 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e012      	b.n	8008b48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	3301      	adds	r3, #1
 8008b26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	f4ff af32 	bcc.w	8008996 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008b46:	2302      	movs	r3, #2
  }
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	00100002 	.word	0x00100002
 8008b54:	ffff0000 	.word	0xffff0000

08008b58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d003      	beq.n	8008b90 <HAL_I2C_EV_IRQHandler+0x38>
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	f040 80c1 	bne.w	8008d12 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10d      	bne.n	8008bc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008bb0:	d003      	beq.n	8008bba <HAL_I2C_EV_IRQHandler+0x62>
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008bb8:	d101      	bne.n	8008bbe <HAL_I2C_EV_IRQHandler+0x66>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e000      	b.n	8008bc0 <HAL_I2C_EV_IRQHandler+0x68>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	f000 8132 	beq.w	8008e2a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00c      	beq.n	8008bea <HAL_I2C_EV_IRQHandler+0x92>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	0a5b      	lsrs	r3, r3, #9
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d006      	beq.n	8008bea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f002 f81a 	bl	800ac16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fccd 	bl	8009582 <I2C_Master_SB>
 8008be8:	e092      	b.n	8008d10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	08db      	lsrs	r3, r3, #3
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <HAL_I2C_EV_IRQHandler+0xb2>
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	0a5b      	lsrs	r3, r3, #9
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fd42 	bl	800968c <I2C_Master_ADD10>
 8008c08:	e082      	b.n	8008d10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	085b      	lsrs	r3, r3, #1
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <HAL_I2C_EV_IRQHandler+0xd2>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	0a5b      	lsrs	r3, r3, #9
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fd5b 	bl	80096de <I2C_Master_ADDR>
 8008c28:	e072      	b.n	8008d10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	089b      	lsrs	r3, r3, #2
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d03b      	beq.n	8008cae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c44:	f000 80f3 	beq.w	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	09db      	lsrs	r3, r3, #7
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00f      	beq.n	8008c74 <HAL_I2C_EV_IRQHandler+0x11c>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	0a9b      	lsrs	r3, r3, #10
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d009      	beq.n	8008c74 <HAL_I2C_EV_IRQHandler+0x11c>
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	089b      	lsrs	r3, r3, #2
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d103      	bne.n	8008c74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f939 	bl	8008ee4 <I2C_MasterTransmit_TXE>
 8008c72:	e04d      	b.n	8008d10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	089b      	lsrs	r3, r3, #2
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80d6 	beq.w	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	0a5b      	lsrs	r3, r3, #9
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 80cf 	beq.w	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b21      	cmp	r3, #33	; 0x21
 8008c94:	d103      	bne.n	8008c9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f9c0 	bl	800901c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c9c:	e0c7      	b.n	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b40      	cmp	r3, #64	; 0x40
 8008ca2:	f040 80c4 	bne.w	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa2e 	bl	8009108 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cac:	e0bf      	b.n	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cbc:	f000 80b7 	beq.w	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	099b      	lsrs	r3, r3, #6
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00f      	beq.n	8008cec <HAL_I2C_EV_IRQHandler+0x194>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	0a9b      	lsrs	r3, r3, #10
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <HAL_I2C_EV_IRQHandler+0x194>
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	089b      	lsrs	r3, r3, #2
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d103      	bne.n	8008cec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 faa7 	bl	8009238 <I2C_MasterReceive_RXNE>
 8008cea:	e011      	b.n	8008d10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	089b      	lsrs	r3, r3, #2
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 809a 	beq.w	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	0a5b      	lsrs	r3, r3, #9
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8093 	beq.w	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb50 	bl	80093ae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d0e:	e08e      	b.n	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008d10:	e08d      	b.n	8008e2e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e007      	b.n	8008d34 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	085b      	lsrs	r3, r3, #1
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d012      	beq.n	8008d66 <HAL_I2C_EV_IRQHandler+0x20e>
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	0a5b      	lsrs	r3, r3, #9
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00c      	beq.n	8008d66 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008d5c:	69b9      	ldr	r1, [r7, #24]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 ff14 	bl	8009b8c <I2C_Slave_ADDR>
 8008d64:	e066      	b.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	091b      	lsrs	r3, r3, #4
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d009      	beq.n	8008d86 <HAL_I2C_EV_IRQHandler+0x22e>
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	0a5b      	lsrs	r3, r3, #9
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 ff4e 	bl	8009c20 <I2C_Slave_STOPF>
 8008d84:	e056      	b.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b21      	cmp	r3, #33	; 0x21
 8008d8a:	d002      	beq.n	8008d92 <HAL_I2C_EV_IRQHandler+0x23a>
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b29      	cmp	r3, #41	; 0x29
 8008d90:	d125      	bne.n	8008dde <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	09db      	lsrs	r3, r3, #7
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00f      	beq.n	8008dbe <HAL_I2C_EV_IRQHandler+0x266>
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	0a9b      	lsrs	r3, r3, #10
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d009      	beq.n	8008dbe <HAL_I2C_EV_IRQHandler+0x266>
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	089b      	lsrs	r3, r3, #2
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d103      	bne.n	8008dbe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fe2c 	bl	8009a14 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008dbc:	e039      	b.n	8008e32 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	089b      	lsrs	r3, r3, #2
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d033      	beq.n	8008e32 <HAL_I2C_EV_IRQHandler+0x2da>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	0a5b      	lsrs	r3, r3, #9
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d02d      	beq.n	8008e32 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fe59 	bl	8009a8e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ddc:	e029      	b.n	8008e32 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	099b      	lsrs	r3, r3, #6
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00f      	beq.n	8008e0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	0a9b      	lsrs	r3, r3, #10
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	089b      	lsrs	r3, r3, #2
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fe63 	bl	8009ace <I2C_SlaveReceive_RXNE>
 8008e08:	e014      	b.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	089b      	lsrs	r3, r3, #2
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00e      	beq.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	0a5b      	lsrs	r3, r3, #9
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d008      	beq.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fe91 	bl	8009b4a <I2C_SlaveReceive_BTF>
 8008e28:	e004      	b.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008e2a:	bf00      	nop
 8008e2c:	e002      	b.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e32:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008e34:	3720      	adds	r7, #32
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008e42:	bf00      	nop
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr

08008e5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bc80      	pop	{r7}
 8008e6e:	4770      	bx	lr

08008e70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr

08008e82 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008e92:	bf00      	nop
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bc80      	pop	{r7}
 8008e9a:	4770      	bx	lr

08008e9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr

08008eae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bc80      	pop	{r7}
 8008ed0:	4770      	bx	lr

08008ed2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bc80      	pop	{r7}
 8008ee2:	4770      	bx	lr

08008ee4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008efa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d150      	bne.n	8008fac <I2C_MasterTransmit_TXE+0xc8>
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	2b21      	cmp	r3, #33	; 0x21
 8008f0e:	d14d      	bne.n	8008fac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2b08      	cmp	r3, #8
 8008f14:	d01d      	beq.n	8008f52 <I2C_MasterTransmit_TXE+0x6e>
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d01a      	beq.n	8008f52 <I2C_MasterTransmit_TXE+0x6e>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f22:	d016      	beq.n	8008f52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2211      	movs	r2, #17
 8008f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff ff75 	bl	8008e3a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f50:	e060      	b.n	8009014 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b40      	cmp	r3, #64	; 0x40
 8008f8a:	d107      	bne.n	8008f9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7fb f981 	bl	800429c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f9a:	e03b      	b.n	8009014 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff ff48 	bl	8008e3a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008faa:	e033      	b.n	8009014 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	2b21      	cmp	r3, #33	; 0x21
 8008fb0:	d005      	beq.n	8008fbe <I2C_MasterTransmit_TXE+0xda>
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d12d      	bne.n	8009014 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b22      	cmp	r3, #34	; 0x22
 8008fbc:	d12a      	bne.n	8009014 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d108      	bne.n	8008fda <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fd6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008fd8:	e01c      	b.n	8009014 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	d103      	bne.n	8008fee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f88e 	bl	8009108 <I2C_MemoryTransmit_TXE_BTF>
}
 8008fec:	e012      	b.n	8009014 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	781a      	ldrb	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009012:	e7ff      	b.n	8009014 <I2C_MasterTransmit_TXE+0x130>
 8009014:	bf00      	nop
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b21      	cmp	r3, #33	; 0x21
 8009034:	d164      	bne.n	8009100 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800903a:	b29b      	uxth	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d012      	beq.n	8009066 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009064:	e04c      	b.n	8009100 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b08      	cmp	r3, #8
 800906a:	d01d      	beq.n	80090a8 <I2C_MasterTransmit_BTF+0x8c>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b20      	cmp	r3, #32
 8009070:	d01a      	beq.n	80090a8 <I2C_MasterTransmit_BTF+0x8c>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009078:	d016      	beq.n	80090a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009088:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2211      	movs	r2, #17
 800908e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2220      	movs	r2, #32
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff feca 	bl	8008e3a <HAL_I2C_MasterTxCpltCallback>
}
 80090a6:	e02b      	b.n	8009100 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b40      	cmp	r3, #64	; 0x40
 80090e0:	d107      	bne.n	80090f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fb f8d6 	bl	800429c <HAL_I2C_MemTxCpltCallback>
}
 80090f0:	e006      	b.n	8009100 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fe9d 	bl	8008e3a <HAL_I2C_MasterTxCpltCallback>
}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009116:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800911c:	2b00      	cmp	r3, #0
 800911e:	d11d      	bne.n	800915c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d10b      	bne.n	8009140 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800912c:	b2da      	uxtb	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009138:	1c9a      	adds	r2, r3, #2
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800913e:	e077      	b.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009144:	b29b      	uxth	r3, r3
 8009146:	121b      	asrs	r3, r3, #8
 8009148:	b2da      	uxtb	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009154:	1c5a      	adds	r2, r3, #1
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	651a      	str	r2, [r3, #80]	; 0x50
}
 800915a:	e069      	b.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	2b01      	cmp	r3, #1
 8009162:	d10b      	bne.n	800917c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009168:	b2da      	uxtb	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	651a      	str	r2, [r3, #80]	; 0x50
}
 800917a:	e059      	b.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009180:	2b02      	cmp	r3, #2
 8009182:	d152      	bne.n	800922a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b22      	cmp	r3, #34	; 0x22
 8009188:	d10d      	bne.n	80091a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009198:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091a4:	e044      	b.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d015      	beq.n	80091dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b21      	cmp	r3, #33	; 0x21
 80091b4:	d112      	bne.n	80091dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	781a      	ldrb	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80091da:	e029      	b.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d124      	bne.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b21      	cmp	r3, #33	; 0x21
 80091ea:	d121      	bne.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800920a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7fb f83a 	bl	800429c <HAL_I2C_MemTxCpltCallback>
}
 8009228:	e002      	b.n	8009230 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7fe fd14 	bl	8007c58 <I2C_Flush_DR>
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b22      	cmp	r3, #34	; 0x22
 800924a:	f040 80ac 	bne.w	80093a6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d921      	bls.n	80092a0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691a      	ldr	r2, [r3, #16]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009278:	b29b      	uxth	r3, r3
 800927a:	3b01      	subs	r3, #1
 800927c:	b29a      	uxth	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009286:	b29b      	uxth	r3, r3
 8009288:	2b03      	cmp	r3, #3
 800928a:	f040 808c 	bne.w	80093a6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800929c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800929e:	e082      	b.n	80093a6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d075      	beq.n	8009394 <I2C_MasterReceive_RXNE+0x15c>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d002      	beq.n	80092b4 <I2C_MasterReceive_RXNE+0x7c>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d16f      	bne.n	8009394 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 fbf1 	bl	800aa9c <I2C_WaitOnSTOPRequestThroughIT>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d142      	bne.n	8009346 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b40      	cmp	r3, #64	; 0x40
 8009318:	d10a      	bne.n	8009330 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff fdc0 	bl	8008eae <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800932e:	e03a      	b.n	80093a6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2212      	movs	r2, #18
 800933c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff fd84 	bl	8008e4c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009344:	e02f      	b.n	80093a6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009354:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff fd97 	bl	8008ec0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009392:	e008      	b.n	80093a6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093a2:	605a      	str	r2, [r3, #4]
}
 80093a4:	e7ff      	b.n	80093a6 <I2C_MasterReceive_RXNE+0x16e>
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d11b      	bne.n	80093fe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093d4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	b2d2      	uxtb	r2, r2
 80093e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80093fc:	e0bd      	b.n	800957a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009402:	b29b      	uxth	r3, r3
 8009404:	2b03      	cmp	r3, #3
 8009406:	d129      	bne.n	800945c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009416:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b04      	cmp	r3, #4
 800941c:	d00a      	beq.n	8009434 <I2C_MasterReceive_BTF+0x86>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d007      	beq.n	8009434 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009432:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009450:	b29b      	uxth	r3, r3
 8009452:	3b01      	subs	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800945a:	e08e      	b.n	800957a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009460:	b29b      	uxth	r3, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d176      	bne.n	8009554 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d002      	beq.n	8009472 <I2C_MasterReceive_BTF+0xc4>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b10      	cmp	r3, #16
 8009470:	d108      	bne.n	8009484 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e019      	b.n	80094b8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b04      	cmp	r3, #4
 8009488:	d002      	beq.n	8009490 <I2C_MasterReceive_BTF+0xe2>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b02      	cmp	r3, #2
 800948e:	d108      	bne.n	80094a2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	e00a      	b.n	80094b8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b10      	cmp	r3, #16
 80094a6:	d007      	beq.n	80094b8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691a      	ldr	r2, [r3, #16]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3b01      	subs	r3, #1
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009512:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2220      	movs	r2, #32
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d10a      	bne.n	800953e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff fcb9 	bl	8008eae <HAL_I2C_MemRxCpltCallback>
}
 800953c:	e01d      	b.n	800957a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2212      	movs	r2, #18
 800954a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff fc7d 	bl	8008e4c <HAL_I2C_MasterRxCpltCallback>
}
 8009552:	e012      	b.n	800957a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b40      	cmp	r3, #64	; 0x40
 8009594:	d117      	bne.n	80095c6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	461a      	mov	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095ae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80095b0:	e067      	b.n	8009682 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f043 0301 	orr.w	r3, r3, #1
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	611a      	str	r2, [r3, #16]
}
 80095c4:	e05d      	b.n	8009682 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095ce:	d133      	bne.n	8009638 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b21      	cmp	r3, #33	; 0x21
 80095da:	d109      	bne.n	80095f0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095ec:	611a      	str	r2, [r3, #16]
 80095ee:	e008      	b.n	8009602 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009606:	2b00      	cmp	r3, #0
 8009608:	d004      	beq.n	8009614 <I2C_Master_SB+0x92>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009610:	2b00      	cmp	r3, #0
 8009612:	d108      	bne.n	8009626 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009618:	2b00      	cmp	r3, #0
 800961a:	d032      	beq.n	8009682 <I2C_Master_SB+0x100>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009622:	2b00      	cmp	r3, #0
 8009624:	d02d      	beq.n	8009682 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009634:	605a      	str	r2, [r3, #4]
}
 8009636:	e024      	b.n	8009682 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10e      	bne.n	800965e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009644:	b29b      	uxth	r3, r3
 8009646:	11db      	asrs	r3, r3, #7
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 0306 	and.w	r3, r3, #6
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f063 030f 	orn	r3, r3, #15
 8009654:	b2da      	uxtb	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	611a      	str	r2, [r3, #16]
}
 800965c:	e011      	b.n	8009682 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009662:	2b01      	cmp	r3, #1
 8009664:	d10d      	bne.n	8009682 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966a:	b29b      	uxth	r3, r3
 800966c:	11db      	asrs	r3, r3, #7
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f003 0306 	and.w	r3, r3, #6
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f063 030e 	orn	r3, r3, #14
 800967a:	b2da      	uxtb	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	611a      	str	r2, [r3, #16]
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	bc80      	pop	{r7}
 800968a:	4770      	bx	lr

0800968c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009698:	b2da      	uxtb	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d004      	beq.n	80096b2 <I2C_Master_ADD10+0x26>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d108      	bne.n	80096c4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00c      	beq.n	80096d4 <I2C_Master_ADD10+0x48>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096d2:	605a      	str	r2, [r3, #4]
  }
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	bc80      	pop	{r7}
 80096dc:	4770      	bx	lr

080096de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80096de:	b480      	push	{r7}
 80096e0:	b091      	sub	sp, #68	; 0x44
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b22      	cmp	r3, #34	; 0x22
 8009706:	f040 8174 	bne.w	80099f2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10f      	bne.n	8009732 <I2C_Master_ADDR+0x54>
 8009712:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009716:	2b40      	cmp	r3, #64	; 0x40
 8009718:	d10b      	bne.n	8009732 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800971a:	2300      	movs	r3, #0
 800971c:	633b      	str	r3, [r7, #48]	; 0x30
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	633b      	str	r3, [r7, #48]	; 0x30
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	633b      	str	r3, [r7, #48]	; 0x30
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	e16b      	b.n	8009a0a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11d      	bne.n	8009776 <I2C_Master_ADDR+0x98>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009742:	d118      	bne.n	8009776 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009744:	2300      	movs	r3, #0
 8009746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009768:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	651a      	str	r2, [r3, #80]	; 0x50
 8009774:	e149      	b.n	8009a0a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d113      	bne.n	80097a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009780:	2300      	movs	r3, #0
 8009782:	62bb      	str	r3, [r7, #40]	; 0x28
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	62bb      	str	r3, [r7, #40]	; 0x28
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	e120      	b.n	80099ea <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	f040 808a 	bne.w	80098c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097ba:	d137      	bne.n	800982c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097da:	d113      	bne.n	8009804 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097ec:	2300      	movs	r3, #0
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	627b      	str	r3, [r7, #36]	; 0x24
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	e0f2      	b.n	80099ea <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009804:	2300      	movs	r3, #0
 8009806:	623b      	str	r3, [r7, #32]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	623b      	str	r3, [r7, #32]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	623b      	str	r3, [r7, #32]
 8009818:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e0de      	b.n	80099ea <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	2b08      	cmp	r3, #8
 8009830:	d02e      	beq.n	8009890 <I2C_Master_ADDR+0x1b2>
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	2b20      	cmp	r3, #32
 8009836:	d02b      	beq.n	8009890 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983a:	2b12      	cmp	r3, #18
 800983c:	d102      	bne.n	8009844 <I2C_Master_ADDR+0x166>
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	2b01      	cmp	r3, #1
 8009842:	d125      	bne.n	8009890 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	2b04      	cmp	r3, #4
 8009848:	d00e      	beq.n	8009868 <I2C_Master_ADDR+0x18a>
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	2b02      	cmp	r3, #2
 800984e:	d00b      	beq.n	8009868 <I2C_Master_ADDR+0x18a>
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	2b10      	cmp	r3, #16
 8009854:	d008      	beq.n	8009868 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	e007      	b.n	8009878 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009876:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009878:	2300      	movs	r3, #0
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	61fb      	str	r3, [r7, #28]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	e0ac      	b.n	80099ea <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800989e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098a0:	2300      	movs	r3, #0
 80098a2:	61bb      	str	r3, [r7, #24]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	61bb      	str	r3, [r7, #24]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	61bb      	str	r3, [r7, #24]
 80098b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	e090      	b.n	80099ea <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d158      	bne.n	8009984 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	2b04      	cmp	r3, #4
 80098d6:	d021      	beq.n	800991c <I2C_Master_ADDR+0x23e>
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d01e      	beq.n	800991c <I2C_Master_ADDR+0x23e>
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	2b10      	cmp	r3, #16
 80098e2:	d01b      	beq.n	800991c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	e012      	b.n	8009942 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800992a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800992c:	2300      	movs	r3, #0
 800992e:	613b      	str	r3, [r7, #16]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	613b      	str	r3, [r7, #16]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800994c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009950:	d14b      	bne.n	80099ea <I2C_Master_ADDR+0x30c>
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009958:	d00b      	beq.n	8009972 <I2C_Master_ADDR+0x294>
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	2b01      	cmp	r3, #1
 800995e:	d008      	beq.n	8009972 <I2C_Master_ADDR+0x294>
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	2b08      	cmp	r3, #8
 8009964:	d005      	beq.n	8009972 <I2C_Master_ADDR+0x294>
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	2b10      	cmp	r3, #16
 800996a:	d002      	beq.n	8009972 <I2C_Master_ADDR+0x294>
 800996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996e:	2b20      	cmp	r3, #32
 8009970:	d13b      	bne.n	80099ea <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	e032      	b.n	80099ea <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009992:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800999e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099a2:	d117      	bne.n	80099d4 <I2C_Master_ADDR+0x2f6>
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099aa:	d00b      	beq.n	80099c4 <I2C_Master_ADDR+0x2e6>
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d008      	beq.n	80099c4 <I2C_Master_ADDR+0x2e6>
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d005      	beq.n	80099c4 <I2C_Master_ADDR+0x2e6>
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	2b10      	cmp	r3, #16
 80099bc:	d002      	beq.n	80099c4 <I2C_Master_ADDR+0x2e6>
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	2b20      	cmp	r3, #32
 80099c2:	d107      	bne.n	80099d4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80099f0:	e00b      	b.n	8009a0a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099f2:	2300      	movs	r3, #0
 80099f4:	60bb      	str	r3, [r7, #8]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	60bb      	str	r3, [r7, #8]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	60bb      	str	r3, [r7, #8]
 8009a06:	68bb      	ldr	r3, [r7, #8]
}
 8009a08:	e7ff      	b.n	8009a0a <I2C_Master_ADDR+0x32c>
 8009a0a:	bf00      	nop
 8009a0c:	3744      	adds	r7, #68	; 0x44
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bc80      	pop	{r7}
 8009a12:	4770      	bx	lr

08009a14 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d02b      	beq.n	8009a86 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d114      	bne.n	8009a86 <I2C_SlaveTransmit_TXE+0x72>
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	2b29      	cmp	r3, #41	; 0x29
 8009a60:	d111      	bne.n	8009a86 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2221      	movs	r2, #33	; 0x21
 8009a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2228      	movs	r2, #40	; 0x28
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff f9ec 	bl	8008e5e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d011      	beq.n	8009ac4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	3b01      	subs	r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bc80      	pop	{r7}
 8009acc:	4770      	bx	lr

08009ace <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009adc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d02c      	beq.n	8009b42 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691a      	ldr	r2, [r3, #16]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	3b01      	subs	r3, #1
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d114      	bne.n	8009b42 <I2C_SlaveReceive_RXNE+0x74>
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1c:	d111      	bne.n	8009b42 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2222      	movs	r2, #34	; 0x22
 8009b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2228      	movs	r2, #40	; 0x28
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff f997 	bl	8008e70 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009b42:	bf00      	nop
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d012      	beq.n	8009b82 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691a      	ldr	r2, [r3, #16]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009b82:	bf00      	nop
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc80      	pop	{r7}
 8009b8a:	4770      	bx	lr

08009b8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009ba6:	2b28      	cmp	r3, #40	; 0x28
 8009ba8:	d127      	bne.n	8009bfa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	089b      	lsrs	r3, r3, #2
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	09db      	lsrs	r3, r3, #7
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	81bb      	strh	r3, [r7, #12]
 8009bdc:	e002      	b.n	8009be4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009bec:	89ba      	ldrh	r2, [r7, #12]
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff f945 	bl	8008e82 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009bf8:	e00e      	b.n	8009c18 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60bb      	str	r3, [r7, #8]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	60bb      	str	r3, [r7, #8]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	60bb      	str	r3, [r7, #8]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009c18:	bf00      	nop
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009c40:	2300      	movs	r3, #0
 8009c42:	60bb      	str	r3, [r7, #8]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	60bb      	str	r3, [r7, #8]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0201 	orr.w	r2, r2, #1
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c7c:	d172      	bne.n	8009d64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	2b22      	cmp	r3, #34	; 0x22
 8009c82:	d002      	beq.n	8009c8a <I2C_Slave_STOPF+0x6a>
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	2b2a      	cmp	r3, #42	; 0x2a
 8009c88:	d135      	bne.n	8009cf6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d005      	beq.n	8009cae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	f043 0204 	orr.w	r2, r3, #4
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd fc86 	bl	80075d4 <HAL_DMA_GetState>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d049      	beq.n	8009d62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	4a69      	ldr	r2, [pc, #420]	; (8009e78 <I2C_Slave_STOPF+0x258>)
 8009cd4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fd f936 	bl	8006f4c <HAL_DMA_Abort_IT>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d03d      	beq.n	8009d62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009cf4:	e035      	b.n	8009d62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d005      	beq.n	8009d1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	f043 0204 	orr.w	r2, r3, #4
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fd fc50 	bl	80075d4 <HAL_DMA_GetState>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d014      	beq.n	8009d64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3e:	4a4e      	ldr	r2, [pc, #312]	; (8009e78 <I2C_Slave_STOPF+0x258>)
 8009d40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd f900 	bl	8006f4c <HAL_DMA_Abort_IT>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d008      	beq.n	8009d64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	4798      	blx	r3
 8009d60:	e000      	b.n	8009d64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d03e      	beq.n	8009dec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d112      	bne.n	8009da2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	d112      	bne.n	8009dd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	691a      	ldr	r2, [r3, #16]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d005      	beq.n	8009dec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	f043 0204 	orr.w	r2, r3, #4
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f843 	bl	8009e80 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009dfa:	e039      	b.n	8009e70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8009e00:	d109      	bne.n	8009e16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2228      	movs	r2, #40	; 0x28
 8009e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff f82d 	bl	8008e70 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b28      	cmp	r3, #40	; 0x28
 8009e20:	d111      	bne.n	8009e46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a15      	ldr	r2, [pc, #84]	; (8009e7c <I2C_Slave_STOPF+0x25c>)
 8009e26:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7ff f82c 	bl	8008e9c <HAL_I2C_ListenCpltCallback>
}
 8009e44:	e014      	b.n	8009e70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4a:	2b22      	cmp	r3, #34	; 0x22
 8009e4c:	d002      	beq.n	8009e54 <I2C_Slave_STOPF+0x234>
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	2b22      	cmp	r3, #34	; 0x22
 8009e52:	d10d      	bne.n	8009e70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff f800 	bl	8008e70 <HAL_I2C_SlaveRxCpltCallback>
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	0800a5f9 	.word	0x0800a5f9
 8009e7c:	ffff0000 	.word	0xffff0000

08009e80 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b10      	cmp	r3, #16
 8009e9c:	d002      	beq.n	8009ea4 <I2C_ITError+0x24>
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b40      	cmp	r3, #64	; 0x40
 8009ea2:	d10a      	bne.n	8009eba <I2C_ITError+0x3a>
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	2b22      	cmp	r3, #34	; 0x22
 8009ea8:	d107      	bne.n	8009eba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eb8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009ec0:	2b28      	cmp	r3, #40	; 0x28
 8009ec2:	d107      	bne.n	8009ed4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2228      	movs	r2, #40	; 0x28
 8009ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ed2:	e015      	b.n	8009f00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ee2:	d00a      	beq.n	8009efa <I2C_ITError+0x7a>
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	2b60      	cmp	r3, #96	; 0x60
 8009ee8:	d007      	beq.n	8009efa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f0e:	d162      	bne.n	8009fd6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d020      	beq.n	8009f70 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f32:	4a6a      	ldr	r2, [pc, #424]	; (800a0dc <I2C_ITError+0x25c>)
 8009f34:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fd f806 	bl	8006f4c <HAL_DMA_Abort_IT>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 8089 	beq.w	800a05a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0201 	bic.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4798      	blx	r3
 8009f6e:	e074      	b.n	800a05a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	4a59      	ldr	r2, [pc, #356]	; (800a0dc <I2C_ITError+0x25c>)
 8009f76:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fc ffe5 	bl	8006f4c <HAL_DMA_Abort_IT>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d068      	beq.n	800a05a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f92:	2b40      	cmp	r3, #64	; 0x40
 8009f94:	d10b      	bne.n	8009fae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	b2d2      	uxtb	r2, r2
 8009fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0201 	bic.w	r2, r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	e041      	b.n	800a05a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b60      	cmp	r3, #96	; 0x60
 8009fe0:	d125      	bne.n	800a02e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffa:	2b40      	cmp	r3, #64	; 0x40
 8009ffc:	d10b      	bne.n	800a016 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	1c5a      	adds	r2, r3, #1
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7fe ff53 	bl	8008ed2 <HAL_I2C_AbortCpltCallback>
 800a02c:	e015      	b.n	800a05a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a038:	2b40      	cmp	r3, #64	; 0x40
 800a03a:	d10b      	bne.n	800a054 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7fe ff33 	bl	8008ec0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10e      	bne.n	800a088 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a070:	2b00      	cmp	r3, #0
 800a072:	d109      	bne.n	800a088 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d104      	bne.n	800a088 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a084:	2b00      	cmp	r3, #0
 800a086:	d007      	beq.n	800a098 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a096:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a09e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	f003 0304 	and.w	r3, r3, #4
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d113      	bne.n	800a0d4 <I2C_ITError+0x254>
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2b28      	cmp	r3, #40	; 0x28
 800a0b0:	d110      	bne.n	800a0d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a0a      	ldr	r2, [pc, #40]	; (800a0e0 <I2C_ITError+0x260>)
 800a0b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7fe fee4 	bl	8008e9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	0800a5f9 	.word	0x0800a5f9
 800a0e0:	ffff0000 	.word	0xffff0000

0800a0e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	817b      	strh	r3, [r7, #10]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	813b      	strh	r3, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a10c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	2200      	movs	r2, #0
 800a116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fb14 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a134:	d103      	bne.n	800a13e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a13c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e05f      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a142:	897b      	ldrh	r3, [r7, #10]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	461a      	mov	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	492d      	ldr	r1, [pc, #180]	; (800a20c <I2C_RequestMemoryWrite+0x128>)
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 fb6f 	bl	800a83c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e04c      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a180:	6a39      	ldr	r1, [r7, #32]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fbfa 	bl	800a97c <I2C_WaitOnTXEFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00d      	beq.n	800a1aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	2b04      	cmp	r3, #4
 800a194:	d107      	bne.n	800a1a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e02b      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d105      	bne.n	800a1bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1b0:	893b      	ldrh	r3, [r7, #8]
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	611a      	str	r2, [r3, #16]
 800a1ba:	e021      	b.n	800a200 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1cc:	6a39      	ldr	r1, [r7, #32]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fbd4 	bl	800a97c <I2C_WaitOnTXEFlagUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00d      	beq.n	800a1f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d107      	bne.n	800a1f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e005      	b.n	800a202 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1f6:	893b      	ldrh	r3, [r7, #8]
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	00010002 	.word	0x00010002

0800a210 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af02      	add	r7, sp, #8
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	4608      	mov	r0, r1
 800a21a:	4611      	mov	r1, r2
 800a21c:	461a      	mov	r2, r3
 800a21e:	4603      	mov	r3, r0
 800a220:	817b      	strh	r3, [r7, #10]
 800a222:	460b      	mov	r3, r1
 800a224:	813b      	strh	r3, [r7, #8]
 800a226:	4613      	mov	r3, r2
 800a228:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a238:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	2200      	movs	r2, #0
 800a252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 fa76 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00d      	beq.n	800a27e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a270:	d103      	bne.n	800a27a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e0aa      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a27e:	897b      	ldrh	r3, [r7, #10]
 800a280:	b2db      	uxtb	r3, r3
 800a282:	461a      	mov	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a28c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	6a3a      	ldr	r2, [r7, #32]
 800a292:	4952      	ldr	r1, [pc, #328]	; (800a3dc <I2C_RequestMemoryRead+0x1cc>)
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 fad1 	bl	800a83c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e097      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2bc:	6a39      	ldr	r1, [r7, #32]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 fb5c 	bl	800a97c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00d      	beq.n	800a2e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d107      	bne.n	800a2e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e076      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2e6:	88fb      	ldrh	r3, [r7, #6]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d105      	bne.n	800a2f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2ec:	893b      	ldrh	r3, [r7, #8]
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	611a      	str	r2, [r3, #16]
 800a2f6:	e021      	b.n	800a33c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2f8:	893b      	ldrh	r3, [r7, #8]
 800a2fa:	0a1b      	lsrs	r3, r3, #8
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a308:	6a39      	ldr	r1, [r7, #32]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fb36 	bl	800a97c <I2C_WaitOnTXEFlagUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d107      	bne.n	800a32e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a32c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e050      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a332:	893b      	ldrh	r3, [r7, #8]
 800a334:	b2da      	uxtb	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33e:	6a39      	ldr	r1, [r7, #32]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 fb1b 	bl	800a97c <I2C_WaitOnTXEFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	2b04      	cmp	r3, #4
 800a352:	d107      	bne.n	800a364 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a362:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e035      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a376:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	2200      	movs	r2, #0
 800a380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f9df 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00d      	beq.n	800a3ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39e:	d103      	bne.n	800a3a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e013      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3ac:	897b      	ldrh	r3, [r7, #10]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f043 0301 	orr.w	r3, r3, #1
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	6a3a      	ldr	r2, [r7, #32]
 800a3c0:	4906      	ldr	r1, [pc, #24]	; (800a3dc <I2C_RequestMemoryRead+0x1cc>)
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 fa3a 	bl	800a83c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	00010002 	.word	0x00010002

0800a3e0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3fc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a412:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a420:	2200      	movs	r2, #0
 800a422:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	2200      	movs	r2, #0
 800a432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a434:	7cfb      	ldrb	r3, [r7, #19]
 800a436:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a43a:	2b21      	cmp	r3, #33	; 0x21
 800a43c:	d007      	beq.n	800a44e <I2C_DMAXferCplt+0x6e>
 800a43e:	7cfb      	ldrb	r3, [r7, #19]
 800a440:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800a444:	2b22      	cmp	r3, #34	; 0x22
 800a446:	d131      	bne.n	800a4ac <I2C_DMAXferCplt+0xcc>
 800a448:	7cbb      	ldrb	r3, [r7, #18]
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d12e      	bne.n	800a4ac <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a45c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2200      	movs	r2, #0
 800a462:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a464:	7cfb      	ldrb	r3, [r7, #19]
 800a466:	2b29      	cmp	r3, #41	; 0x29
 800a468:	d10a      	bne.n	800a480 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2221      	movs	r2, #33	; 0x21
 800a46e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	2228      	movs	r2, #40	; 0x28
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a478:	6978      	ldr	r0, [r7, #20]
 800a47a:	f7fe fcf0 	bl	8008e5e <HAL_I2C_SlaveTxCpltCallback>
 800a47e:	e00c      	b.n	800a49a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a480:	7cfb      	ldrb	r3, [r7, #19]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d109      	bne.n	800a49a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2222      	movs	r2, #34	; 0x22
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2228      	movs	r2, #40	; 0x28
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a494:	6978      	ldr	r0, [r7, #20]
 800a496:	f7fe fceb 	bl	8008e70 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a4a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a4aa:	e06a      	b.n	800a582 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d064      	beq.n	800a582 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d107      	bne.n	800a4d2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4d0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a4e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4e8:	d009      	beq.n	800a4fe <I2C_DMAXferCplt+0x11e>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d006      	beq.n	800a4fe <I2C_DMAXferCplt+0x11e>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a4f6:	d002      	beq.n	800a4fe <I2C_DMAXferCplt+0x11e>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	d107      	bne.n	800a50e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a50c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a51c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a52c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2200      	movs	r2, #0
 800a532:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800a53c:	6978      	ldr	r0, [r7, #20]
 800a53e:	f7fe fcbf 	bl	8008ec0 <HAL_I2C_ErrorCallback>
}
 800a542:	e01e      	b.n	800a582 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2220      	movs	r2, #32
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b40      	cmp	r3, #64	; 0x40
 800a556:	d10a      	bne.n	800a56e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2200      	movs	r2, #0
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a566:	6978      	ldr	r0, [r7, #20]
 800a568:	f7fe fca1 	bl	8008eae <HAL_I2C_MemRxCpltCallback>
}
 800a56c:	e009      	b.n	800a582 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2212      	movs	r2, #18
 800a57a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a57c:	6978      	ldr	r0, [r7, #20]
 800a57e:	f7fe fc65 	bl	8008e4c <HAL_I2C_MasterRxCpltCallback>
}
 800a582:	bf00      	nop
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5c6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	f043 0210 	orr.w	r2, r3, #16
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7fe fc68 	bl	8008ec0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a610:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a612:	4b4b      	ldr	r3, [pc, #300]	; (800a740 <I2C_DMAAbort+0x148>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	08db      	lsrs	r3, r3, #3
 800a618:	4a4a      	ldr	r2, [pc, #296]	; (800a744 <I2C_DMAAbort+0x14c>)
 800a61a:	fba2 2303 	umull	r2, r3, r2, r3
 800a61e:	0a1a      	lsrs	r2, r3, #8
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	00da      	lsls	r2, r3, #3
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	f043 0220 	orr.w	r2, r3, #32
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a63e:	e00a      	b.n	800a656 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3b01      	subs	r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a654:	d0ea      	beq.n	800a62c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a662:	2200      	movs	r2, #0
 800a664:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d003      	beq.n	800a676 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	2200      	movs	r2, #0
 800a674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a684:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2200      	movs	r2, #0
 800a68a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a698:	2200      	movs	r2, #0
 800a69a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f022 0201 	bic.w	r2, r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b60      	cmp	r3, #96	; 0x60
 800a6c6:	d10e      	bne.n	800a6e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a6de:	6978      	ldr	r0, [r7, #20]
 800a6e0:	f7fe fbf7 	bl	8008ed2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a6e4:	e027      	b.n	800a736 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6e6:	7cfb      	ldrb	r3, [r7, #19]
 800a6e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a6ec:	2b28      	cmp	r3, #40	; 0x28
 800a6ee:	d117      	bne.n	800a720 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a70e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2200      	movs	r2, #0
 800a714:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2228      	movs	r2, #40	; 0x28
 800a71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a71e:	e007      	b.n	800a730 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a730:	6978      	ldr	r0, [r7, #20]
 800a732:	f7fe fbc5 	bl	8008ec0 <HAL_I2C_ErrorCallback>
}
 800a736:	bf00      	nop
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	2000068c 	.word	0x2000068c
 800a744:	14f8b589 	.word	0x14f8b589

0800a748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	4613      	mov	r3, r2
 800a756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a758:	e048      	b.n	800a7ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a760:	d044      	beq.n	800a7ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a762:	f7fb fd43 	bl	80061ec <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d302      	bcc.n	800a778 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d139      	bne.n	800a7ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d10d      	bne.n	800a79e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	43da      	mvns	r2, r3
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	4013      	ands	r3, r2
 800a78e:	b29b      	uxth	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	bf0c      	ite	eq
 800a794:	2301      	moveq	r3, #1
 800a796:	2300      	movne	r3, #0
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	e00c      	b.n	800a7b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	43da      	mvns	r2, r3
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bf0c      	ite	eq
 800a7b0:	2301      	moveq	r3, #1
 800a7b2:	2300      	movne	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d116      	bne.n	800a7ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d8:	f043 0220 	orr.w	r2, r3, #32
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e023      	b.n	800a834 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	0c1b      	lsrs	r3, r3, #16
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d10d      	bne.n	800a812 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	43da      	mvns	r2, r3
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	4013      	ands	r3, r2
 800a802:	b29b      	uxth	r3, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	bf0c      	ite	eq
 800a808:	2301      	moveq	r3, #1
 800a80a:	2300      	movne	r3, #0
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	461a      	mov	r2, r3
 800a810:	e00c      	b.n	800a82c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	43da      	mvns	r2, r3
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	4013      	ands	r3, r2
 800a81e:	b29b      	uxth	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf0c      	ite	eq
 800a824:	2301      	moveq	r3, #1
 800a826:	2300      	movne	r3, #0
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	461a      	mov	r2, r3
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d093      	beq.n	800a75a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a84a:	e071      	b.n	800a930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a85a:	d123      	bne.n	800a8a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a86a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a890:	f043 0204 	orr.w	r2, r3, #4
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e067      	b.n	800a974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d041      	beq.n	800a930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ac:	f7fb fc9e 	bl	80061ec <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d302      	bcc.n	800a8c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d136      	bne.n	800a930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	0c1b      	lsrs	r3, r3, #16
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d10c      	bne.n	800a8e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	43da      	mvns	r2, r3
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	bf14      	ite	ne
 800a8de:	2301      	movne	r3, #1
 800a8e0:	2300      	moveq	r3, #0
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	e00b      	b.n	800a8fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	43da      	mvns	r2, r3
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bf14      	ite	ne
 800a8f8:	2301      	movne	r3, #1
 800a8fa:	2300      	moveq	r3, #0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d016      	beq.n	800a930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91c:	f043 0220 	orr.w	r2, r3, #32
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e021      	b.n	800a974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b01      	cmp	r3, #1
 800a938:	d10c      	bne.n	800a954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	43da      	mvns	r2, r3
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	4013      	ands	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bf14      	ite	ne
 800a94c:	2301      	movne	r3, #1
 800a94e:	2300      	moveq	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	e00b      	b.n	800a96c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	43da      	mvns	r2, r3
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	4013      	ands	r3, r2
 800a960:	b29b      	uxth	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	bf14      	ite	ne
 800a966:	2301      	movne	r3, #1
 800a968:	2300      	moveq	r3, #0
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f47f af6d 	bne.w	800a84c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a988:	e034      	b.n	800a9f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 f915 	bl	800abba <I2C_IsAcknowledgeFailed>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e034      	b.n	800aa04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a0:	d028      	beq.n	800a9f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9a2:	f7fb fc23 	bl	80061ec <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d302      	bcc.n	800a9b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d11d      	bne.n	800a9f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c2:	2b80      	cmp	r3, #128	; 0x80
 800a9c4:	d016      	beq.n	800a9f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	f043 0220 	orr.w	r2, r3, #32
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e007      	b.n	800aa04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fe:	2b80      	cmp	r3, #128	; 0x80
 800aa00:	d1c3      	bne.n	800a98a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa18:	e034      	b.n	800aa84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 f8cd 	bl	800abba <I2C_IsAcknowledgeFailed>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e034      	b.n	800aa94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d028      	beq.n	800aa84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa32:	f7fb fbdb 	bl	80061ec <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d302      	bcc.n	800aa48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11d      	bne.n	800aa84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d016      	beq.n	800aa84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa70:	f043 0220 	orr.w	r2, r3, #32
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e007      	b.n	800aa94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d1c3      	bne.n	800aa1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800aaa8:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	08db      	lsrs	r3, r3, #3
 800aaae:	4a13      	ldr	r2, [pc, #76]	; (800aafc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800aab0:	fba2 2303 	umull	r2, r3, r2, r3
 800aab4:	0a1a      	lsrs	r2, r3, #8
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d107      	bne.n	800aada <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aace:	f043 0220 	orr.w	r2, r3, #32
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e008      	b.n	800aaec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aae8:	d0e9      	beq.n	800aabe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bc80      	pop	{r7}
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	2000068c 	.word	0x2000068c
 800aafc:	14f8b589 	.word	0x14f8b589

0800ab00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab0c:	e049      	b.n	800aba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	f003 0310 	and.w	r3, r3, #16
 800ab18:	2b10      	cmp	r3, #16
 800ab1a:	d119      	bne.n	800ab50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f06f 0210 	mvn.w	r2, #16
 800ab24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2220      	movs	r2, #32
 800ab30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e030      	b.n	800abb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab50:	f7fb fb4c 	bl	80061ec <HAL_GetTick>
 800ab54:	4602      	mov	r2, r0
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d302      	bcc.n	800ab66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d11d      	bne.n	800aba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab70:	2b40      	cmp	r3, #64	; 0x40
 800ab72:	d016      	beq.n	800aba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	f043 0220 	orr.w	r2, r3, #32
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e007      	b.n	800abb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abac:	2b40      	cmp	r3, #64	; 0x40
 800abae:	d1ae      	bne.n	800ab0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	695b      	ldr	r3, [r3, #20]
 800abc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd0:	d11b      	bne.n	800ac0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800abda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2220      	movs	r2, #32
 800abe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf6:	f043 0204 	orr.w	r2, r3, #4
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e000      	b.n	800ac0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bc80      	pop	{r7}
 800ac14:	4770      	bx	lr

0800ac16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac22:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ac26:	d103      	bne.n	800ac30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ac2e:	e007      	b.n	800ac40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ac38:	d102      	bne.n	800ac40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2208      	movs	r2, #8
 800ac3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr

0800ac4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ac4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4c:	b08b      	sub	sp, #44	; 0x2c
 800ac4e:	af06      	add	r7, sp, #24
 800ac50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e0f1      	b.n	800ae40 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d106      	bne.n	800ac76 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f007 fc2b 	bl	80124cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2203      	movs	r2, #3
 800ac7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f003 fb30 	bl	800e2e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	603b      	str	r3, [r7, #0]
 800ac8e:	687e      	ldr	r6, [r7, #4]
 800ac90:	466d      	mov	r5, sp
 800ac92:	f106 0410 	add.w	r4, r6, #16
 800ac96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	602b      	str	r3, [r5, #0]
 800ac9e:	1d33      	adds	r3, r6, #4
 800aca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aca2:	6838      	ldr	r0, [r7, #0]
 800aca4:	f003 fafa 	bl	800e29c <USB_CoreInit>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d005      	beq.n	800acba <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2202      	movs	r2, #2
 800acb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e0c2      	b.n	800ae40 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2100      	movs	r1, #0
 800acc0:	4618      	mov	r0, r3
 800acc2:	f003 fb2b 	bl	800e31c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
 800acca:	e040      	b.n	800ad4e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	440b      	add	r3, r1
 800acdc:	3301      	adds	r3, #1
 800acde:	2201      	movs	r2, #1
 800ace0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	4613      	mov	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	440b      	add	r3, r1
 800acf2:	7bfa      	ldrb	r2, [r7, #15]
 800acf4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	440b      	add	r3, r1
 800ad06:	3303      	adds	r3, #3
 800ad08:	2200      	movs	r2, #0
 800ad0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad0c:	7bfa      	ldrb	r2, [r7, #15]
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	440b      	add	r3, r1
 800ad1a:	3338      	adds	r3, #56	; 0x38
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad20:	7bfa      	ldrb	r2, [r7, #15]
 800ad22:	6879      	ldr	r1, [r7, #4]
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	440b      	add	r3, r1
 800ad2e:	333c      	adds	r3, #60	; 0x3c
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad34:	7bfa      	ldrb	r2, [r7, #15]
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	440b      	add	r3, r1
 800ad42:	3340      	adds	r3, #64	; 0x40
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	73fb      	strb	r3, [r7, #15]
 800ad4e:	7bfa      	ldrb	r2, [r7, #15]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d3b9      	bcc.n	800accc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
 800ad5c:	e044      	b.n	800ade8 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad5e:	7bfa      	ldrb	r2, [r7, #15]
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	440b      	add	r3, r1
 800ad6c:	f203 1369 	addw	r3, r3, #361	; 0x169
 800ad70:	2200      	movs	r2, #0
 800ad72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad74:	7bfa      	ldrb	r2, [r7, #15]
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	440b      	add	r3, r1
 800ad82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ad86:	7bfa      	ldrb	r2, [r7, #15]
 800ad88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad8a:	7bfa      	ldrb	r2, [r7, #15]
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	440b      	add	r3, r1
 800ad98:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ada0:	7bfa      	ldrb	r2, [r7, #15]
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4613      	mov	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	00db      	lsls	r3, r3, #3
 800adac:	440b      	add	r3, r1
 800adae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800adb6:	7bfa      	ldrb	r2, [r7, #15]
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	4613      	mov	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	440b      	add	r3, r1
 800adc4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800adcc:	7bfa      	ldrb	r2, [r7, #15]
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	4613      	mov	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	440b      	add	r3, r1
 800adda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800adde:	2200      	movs	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
 800ade4:	3301      	adds	r3, #1
 800ade6:	73fb      	strb	r3, [r7, #15]
 800ade8:	7bfa      	ldrb	r2, [r7, #15]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d3b5      	bcc.n	800ad5e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	687e      	ldr	r6, [r7, #4]
 800adfa:	466d      	mov	r5, sp
 800adfc:	f106 0410 	add.w	r4, r6, #16
 800ae00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	602b      	str	r3, [r5, #0]
 800ae08:	1d33      	adds	r3, r6, #4
 800ae0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae0c:	6838      	ldr	r0, [r7, #0]
 800ae0e:	f003 fa91 	bl	800e334 <USB_DevInit>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e00d      	b.n	800ae40 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f005 fd12 	bl	8010862 <USB_DevDisconnect>

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d101      	bne.n	800ae5e <HAL_PCD_Start+0x16>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e016      	b.n	800ae8c <HAL_PCD_Start+0x44>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f003 fa26 	bl	800e2bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800ae70:	2101      	movs	r1, #1
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f007 fd95 	bl	80129a2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f005 fce6 	bl	801084e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f005 fce8 	bl	8010876 <USB_ReadInterrupts>
 800aea6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fb1b 	bl	800b4ee <PCD_EP_ISR_Handler>

    return;
 800aeb8:	e119      	b.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d013      	beq.n	800aeec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aecc:	b29a      	uxth	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aed6:	b292      	uxth	r2, r2
 800aed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f007 fb68 	bl	80125b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800aee2:	2100      	movs	r1, #0
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f905 	bl	800b0f4 <HAL_PCD_SetAddress>

    return;
 800aeea:	e100      	b.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00c      	beq.n	800af10 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aefe:	b29a      	uxth	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af08:	b292      	uxth	r2, r2
 800af0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800af0e:	e0ee      	b.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00c      	beq.n	800af34 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af22:	b29a      	uxth	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af2c:	b292      	uxth	r2, r2
 800af2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800af32:	e0dc      	b.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d027      	beq.n	800af8e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800af46:	b29a      	uxth	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0204 	bic.w	r2, r2, #4
 800af50:	b292      	uxth	r2, r2
 800af52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800af5e:	b29a      	uxth	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 0208 	bic.w	r2, r2, #8
 800af68:	b292      	uxth	r2, r2
 800af6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f007 fb58 	bl	8012624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af86:	b292      	uxth	r2, r2
 800af88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800af8c:	e0af      	b.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 8083 	beq.w	800b0a0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800af9a:	2300      	movs	r3, #0
 800af9c:	77fb      	strb	r3, [r7, #31]
 800af9e:	e010      	b.n	800afc2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	461a      	mov	r2, r3
 800afa6:	7ffb      	ldrb	r3, [r7, #31]
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	441a      	add	r2, r3
 800afac:	7ffb      	ldrb	r3, [r7, #31]
 800afae:	8812      	ldrh	r2, [r2, #0]
 800afb0:	b292      	uxth	r2, r2
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	3320      	adds	r3, #32
 800afb6:	443b      	add	r3, r7
 800afb8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800afbc:	7ffb      	ldrb	r3, [r7, #31]
 800afbe:	3301      	adds	r3, #1
 800afc0:	77fb      	strb	r3, [r7, #31]
 800afc2:	7ffb      	ldrb	r3, [r7, #31]
 800afc4:	2b07      	cmp	r3, #7
 800afc6:	d9eb      	bls.n	800afa0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f042 0201 	orr.w	r2, r2, #1
 800afda:	b292      	uxth	r2, r2
 800afdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afe8:	b29a      	uxth	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f022 0201 	bic.w	r2, r2, #1
 800aff2:	b292      	uxth	r2, r2
 800aff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800aff8:	bf00      	nop
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b002:	b29b      	uxth	r3, r3
 800b004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0f6      	beq.n	800affa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b01e:	b292      	uxth	r2, r2
 800b020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800b024:	2300      	movs	r3, #0
 800b026:	77fb      	strb	r3, [r7, #31]
 800b028:	e00f      	b.n	800b04a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800b02a:	7ffb      	ldrb	r3, [r7, #31]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6812      	ldr	r2, [r2, #0]
 800b030:	4611      	mov	r1, r2
 800b032:	7ffa      	ldrb	r2, [r7, #31]
 800b034:	0092      	lsls	r2, r2, #2
 800b036:	440a      	add	r2, r1
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	3320      	adds	r3, #32
 800b03c:	443b      	add	r3, r7
 800b03e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800b042:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800b044:	7ffb      	ldrb	r3, [r7, #31]
 800b046:	3301      	adds	r3, #1
 800b048:	77fb      	strb	r3, [r7, #31]
 800b04a:	7ffb      	ldrb	r3, [r7, #31]
 800b04c:	2b07      	cmp	r3, #7
 800b04e:	d9ec      	bls.n	800b02a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b058:	b29a      	uxth	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0208 	orr.w	r2, r2, #8
 800b062:	b292      	uxth	r2, r2
 800b064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b07a:	b292      	uxth	r2, r2
 800b07c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b088:	b29a      	uxth	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f042 0204 	orr.w	r2, r2, #4
 800b092:	b292      	uxth	r2, r2
 800b094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f007 faa9 	bl	80125f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b09e:	e026      	b.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00f      	beq.n	800b0ca <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b0bc:	b292      	uxth	r2, r2
 800b0be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f007 fa67 	bl	8012596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b0c8:	e011      	b.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00c      	beq.n	800b0ee <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b0ec:	bf00      	nop
  }
}
 800b0ee:	3720      	adds	r7, #32
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b106:	2b01      	cmp	r3, #1
 800b108:	d101      	bne.n	800b10e <HAL_PCD_SetAddress+0x1a>
 800b10a:	2302      	movs	r3, #2
 800b10c:	e013      	b.n	800b136 <HAL_PCD_SetAddress+0x42>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	78fa      	ldrb	r2, [r7, #3]
 800b11a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	78fa      	ldrb	r2, [r7, #3]
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f005 fb7e 	bl	8010828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b084      	sub	sp, #16
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	4608      	mov	r0, r1
 800b148:	4611      	mov	r1, r2
 800b14a:	461a      	mov	r2, r3
 800b14c:	4603      	mov	r3, r0
 800b14e:	70fb      	strb	r3, [r7, #3]
 800b150:	460b      	mov	r3, r1
 800b152:	803b      	strh	r3, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b15c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b160:	2b00      	cmp	r3, #0
 800b162:	da0e      	bge.n	800b182 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	4413      	add	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2201      	movs	r2, #1
 800b17e:	705a      	strb	r2, [r3, #1]
 800b180:	e00e      	b.n	800b1a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b182:	78fb      	ldrb	r3, [r7, #3]
 800b184:	f003 0207 	and.w	r2, r3, #7
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	4413      	add	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	f003 0307 	and.w	r3, r3, #7
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b1ac:	883a      	ldrh	r2, [r7, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	78ba      	ldrb	r2, [r7, #2]
 800b1b6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b1b8:	78bb      	ldrb	r3, [r7, #2]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d102      	bne.n	800b1c4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d101      	bne.n	800b1d2 <HAL_PCD_EP_Open+0x94>
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	e00e      	b.n	800b1f0 <HAL_PCD_EP_Open+0xb2>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68f9      	ldr	r1, [r7, #12]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f003 f8c7 	bl	800e374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b1ee:	7afb      	ldrb	r3, [r7, #11]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	da0e      	bge.n	800b22a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	4613      	mov	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2201      	movs	r2, #1
 800b226:	705a      	strb	r2, [r3, #1]
 800b228:	e00e      	b.n	800b248 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	f003 0207 	and.w	r2, r3, #7
 800b230:	4613      	mov	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	4413      	add	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d101      	bne.n	800b262 <HAL_PCD_EP_Close+0x6a>
 800b25e:	2302      	movs	r3, #2
 800b260:	e00e      	b.n	800b280 <HAL_PCD_EP_Close+0x88>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68f9      	ldr	r1, [r7, #12]
 800b270:	4618      	mov	r0, r3
 800b272:	f003 fc3f 	bl	800eaf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	460b      	mov	r3, r1
 800b296:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	f003 0207 	and.w	r2, r3, #7
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	00db      	lsls	r3, r3, #3
 800b2a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	6979      	ldr	r1, [r7, #20]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f003 fdf6 	bl	800eecc <USB_EPStartXfer>

  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	f003 0207 	and.w	r2, r3, #7
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	440b      	add	r3, r1
 800b308:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b30c:	681b      	ldr	r3, [r3, #0]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	bc80      	pop	{r7}
 800b316:	4770      	bx	lr

0800b318 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	607a      	str	r2, [r7, #4]
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	460b      	mov	r3, r1
 800b326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	f003 0307 	and.w	r3, r3, #7
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	2200      	movs	r2, #0
 800b35c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2201      	movs	r2, #1
 800b362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6979      	ldr	r1, [r7, #20]
 800b376:	4618      	mov	r0, r3
 800b378:	f003 fda8 	bl	800eecc <USB_EPStartXfer>

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	460b      	mov	r3, r1
 800b390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b392:	78fb      	ldrb	r3, [r7, #3]
 800b394:	f003 0207 	and.w	r2, r3, #7
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d901      	bls.n	800b3a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e04c      	b.n	800b43e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b3a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da0e      	bge.n	800b3ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3ac:	78fb      	ldrb	r3, [r7, #3]
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	4413      	add	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	705a      	strb	r2, [r3, #1]
 800b3c8:	e00c      	b.n	800b3e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b3ca:	78fa      	ldrb	r2, [r7, #3]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	4413      	add	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b3ea:	78fb      	ldrb	r3, [r7, #3]
 800b3ec:	f003 0307 	and.w	r3, r3, #7
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d101      	bne.n	800b404 <HAL_PCD_EP_SetStall+0x7e>
 800b400:	2302      	movs	r3, #2
 800b402:	e01c      	b.n	800b43e <HAL_PCD_EP_SetStall+0xb8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68f9      	ldr	r1, [r7, #12]
 800b412:	4618      	mov	r0, r3
 800b414:	f005 f90b 	bl	801062e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	f003 0307 	and.w	r3, r3, #7
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d108      	bne.n	800b434 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f005 fa30 	bl	8010894 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b084      	sub	sp, #16
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	460b      	mov	r3, r1
 800b450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	f003 020f 	and.w	r2, r3, #15
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d901      	bls.n	800b464 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	e040      	b.n	800b4e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	da0e      	bge.n	800b48a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b46c:	78fb      	ldrb	r3, [r7, #3]
 800b46e:	f003 0307 	and.w	r3, r3, #7
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	4413      	add	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2201      	movs	r2, #1
 800b486:	705a      	strb	r2, [r3, #1]
 800b488:	e00e      	b.n	800b4a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	f003 0207 	and.w	r2, r3, #7
 800b490:	4613      	mov	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	00db      	lsls	r3, r3, #3
 800b498:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	4413      	add	r3, r2
 800b4a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4ae:	78fb      	ldrb	r3, [r7, #3]
 800b4b0:	f003 0307 	and.w	r3, r3, #7
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d101      	bne.n	800b4c8 <HAL_PCD_EP_ClrStall+0x82>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e00e      	b.n	800b4e6 <HAL_PCD_EP_ClrStall+0xa0>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68f9      	ldr	r1, [r7, #12]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f005 f8f9 	bl	80106ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b096      	sub	sp, #88	; 0x58
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b4f6:	e3bf      	b.n	800bc78 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b500:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b504:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	f003 030f 	and.w	r3, r3, #15
 800b50e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800b512:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b516:	2b00      	cmp	r3, #0
 800b518:	f040 8179 	bne.w	800b80e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b51c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b520:	f003 0310 	and.w	r3, r3, #16
 800b524:	2b00      	cmp	r3, #0
 800b526:	d152      	bne.n	800b5ce <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b538:	81fb      	strh	r3, [r7, #14]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	89fb      	ldrh	r3, [r7, #14]
 800b540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b548:	b29b      	uxth	r3, r3
 800b54a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3328      	adds	r3, #40	; 0x28
 800b550:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	461a      	mov	r2, r3
 800b55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	00db      	lsls	r3, r3, #3
 800b564:	4413      	add	r3, r2
 800b566:	3302      	adds	r3, #2
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6812      	ldr	r2, [r2, #0]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b57c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b57e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b580:	695a      	ldr	r2, [r3, #20]
 800b582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	441a      	add	r2, r3
 800b588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b58a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b58c:	2100      	movs	r1, #0
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f006 ffe7 	bl	8012562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 836b 	beq.w	800bc78 <PCD_EP_ISR_Handler+0x78a>
 800b5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 8366 	bne.w	800bc78 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	b292      	uxth	r2, r2
 800b5c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b5cc:	e354      	b.n	800bc78 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b5d4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b5e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b5e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d034      	beq.n	800b656 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4413      	add	r3, r2
 800b600:	3306      	adds	r3, #6
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6812      	ldr	r2, [r2, #0]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b616:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b624:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b628:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f005 f982 	bl	8010934 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	b29a      	uxth	r2, r3
 800b638:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b63c:	4013      	ands	r3, r2
 800b63e:	823b      	strh	r3, [r7, #16]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	8a3a      	ldrh	r2, [r7, #16]
 800b646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b64a:	b292      	uxth	r2, r2
 800b64c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f006 ff5a 	bl	8012508 <HAL_PCD_SetupStageCallback>
 800b654:	e310      	b.n	800bc78 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b656:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f280 830c 	bge.w	800bc78 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	b29a      	uxth	r2, r3
 800b668:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b66c:	4013      	ands	r3, r2
 800b66e:	83fb      	strh	r3, [r7, #30]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	8bfa      	ldrh	r2, [r7, #30]
 800b676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b67a:	b292      	uxth	r2, r2
 800b67c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b686:	b29b      	uxth	r3, r3
 800b688:	461a      	mov	r2, r3
 800b68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	4413      	add	r3, r2
 800b692:	3306      	adds	r3, #6
 800b694:	005b      	lsls	r3, r3, #1
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	6812      	ldr	r2, [r2, #0]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b6aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d019      	beq.n	800b6e6 <PCD_EP_ISR_Handler+0x1f8>
 800b6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6b4:	695b      	ldr	r3, [r3, #20]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d015      	beq.n	800b6e6 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6818      	ldr	r0, [r3, #0]
 800b6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c0:	6959      	ldr	r1, [r3, #20]
 800b6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	f005 f932 	bl	8010934 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b6d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d2:	695a      	ldr	r2, [r3, #20]
 800b6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	441a      	add	r2, r3
 800b6da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b6de:	2100      	movs	r1, #0
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f006 ff23 	bl	801252c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b6f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b6f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f040 82bd 	bne.w	800bc78 <PCD_EP_ISR_Handler+0x78a>
 800b6fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b702:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b70a:	f000 82b5 	beq.w	800bc78 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	61bb      	str	r3, [r7, #24]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	461a      	mov	r2, r3
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	4413      	add	r3, r2
 800b724:	61bb      	str	r3, [r7, #24]
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b72c:	617b      	str	r3, [r7, #20]
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	881b      	ldrh	r3, [r3, #0]
 800b732:	b29b      	uxth	r3, r3
 800b734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b738:	b29a      	uxth	r2, r3
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	801a      	strh	r2, [r3, #0]
 800b73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b3e      	cmp	r3, #62	; 0x3e
 800b744:	d91d      	bls.n	800b782 <PCD_EP_ISR_Handler+0x294>
 800b746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	095b      	lsrs	r3, r3, #5
 800b74c:	647b      	str	r3, [r7, #68]	; 0x44
 800b74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	f003 031f 	and.w	r3, r3, #31
 800b756:	2b00      	cmp	r3, #0
 800b758:	d102      	bne.n	800b760 <PCD_EP_ISR_Handler+0x272>
 800b75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75c:	3b01      	subs	r3, #1
 800b75e:	647b      	str	r3, [r7, #68]	; 0x44
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29a      	uxth	r2, r3
 800b766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b768:	b29b      	uxth	r3, r3
 800b76a:	029b      	lsls	r3, r3, #10
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	4313      	orrs	r3, r2
 800b770:	b29b      	uxth	r3, r3
 800b772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	801a      	strh	r2, [r3, #0]
 800b780:	e026      	b.n	800b7d0 <PCD_EP_ISR_Handler+0x2e2>
 800b782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <PCD_EP_ISR_Handler+0x2b2>
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b798:	b29a      	uxth	r2, r3
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	801a      	strh	r2, [r3, #0]
 800b79e:	e017      	b.n	800b7d0 <PCD_EP_ISR_Handler+0x2e2>
 800b7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	085b      	lsrs	r3, r3, #1
 800b7a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f003 0301 	and.w	r3, r3, #1
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <PCD_EP_ISR_Handler+0x2cc>
 800b7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	029b      	lsls	r3, r3, #10
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7e0:	827b      	strh	r3, [r7, #18]
 800b7e2:	8a7b      	ldrh	r3, [r7, #18]
 800b7e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b7e8:	827b      	strh	r3, [r7, #18]
 800b7ea:	8a7b      	ldrh	r3, [r7, #18]
 800b7ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7f0:	827b      	strh	r3, [r7, #18]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	8a7b      	ldrh	r3, [r7, #18]
 800b7f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b808:	b29b      	uxth	r3, r3
 800b80a:	8013      	strh	r3, [r2, #0]
 800b80c:	e234      	b.n	800bc78 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b822:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b826:	2b00      	cmp	r3, #0
 800b828:	f280 80fc 	bge.w	800ba24 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	461a      	mov	r2, r3
 800b832:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b842:	4013      	ands	r3, r2
 800b844:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b85a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b85e:	b292      	uxth	r2, r2
 800b860:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b862:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800b866:	4613      	mov	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	4413      	add	r3, r2
 800b876:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b87a:	7b1b      	ldrb	r3, [r3, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d125      	bne.n	800b8cc <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b888:	b29b      	uxth	r3, r3
 800b88a:	461a      	mov	r2, r3
 800b88c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	4413      	add	r3, r2
 800b894:	3306      	adds	r3, #6
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	6812      	ldr	r2, [r2, #0]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800b8ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 8092 	beq.w	800b9da <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8bc:	6959      	ldr	r1, [r3, #20]
 800b8be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8c0:	88da      	ldrh	r2, [r3, #6]
 800b8c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b8c6:	f005 f835 	bl	8010934 <USB_ReadPMA>
 800b8ca:	e086      	b.n	800b9da <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8ce:	78db      	ldrb	r3, [r3, #3]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d10a      	bne.n	800b8ea <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b8d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b8d8:	461a      	mov	r2, r3
 800b8da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f9d9 	bl	800bc94 <HAL_PCD_EP_DB_Receive>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b8e8:	e077      	b.n	800b9da <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b904:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	461a      	mov	r2, r3
 800b90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	441a      	add	r2, r3
 800b916:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b91a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b91e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d024      	beq.n	800b992 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b950:	b29b      	uxth	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	4413      	add	r3, r2
 800b95c:	3302      	adds	r3, #2
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	6812      	ldr	r2, [r2, #0]
 800b964:	4413      	add	r3, r2
 800b966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b970:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b974:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d02e      	beq.n	800b9da <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b982:	6959      	ldr	r1, [r3, #20]
 800b984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b986:	891a      	ldrh	r2, [r3, #8]
 800b988:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b98c:	f004 ffd2 	bl	8010934 <USB_ReadPMA>
 800b990:	e023      	b.n	800b9da <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	461a      	mov	r2, r3
 800b99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	4413      	add	r3, r2
 800b9a6:	3306      	adds	r3, #6
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6812      	ldr	r2, [r2, #0]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9b4:	881b      	ldrh	r3, [r3, #0]
 800b9b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b9be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d009      	beq.n	800b9da <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9cc:	6959      	ldr	r1, [r3, #20]
 800b9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9d0:	895a      	ldrh	r2, [r3, #10]
 800b9d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9d6:	f004 ffad 	bl	8010934 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9dc:	69da      	ldr	r2, [r3, #28]
 800b9de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9e2:	441a      	add	r2, r3
 800b9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b9e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ea:	695a      	ldr	r2, [r3, #20]
 800b9ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9f0:	441a      	add	r2, r3
 800b9f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b9f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <PCD_EP_ISR_Handler+0x51c>
 800b9fe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ba02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d206      	bcs.n	800ba18 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ba0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f006 fd8b 	bl	801252c <HAL_PCD_DataOutStageCallback>
 800ba16:	e005      	b.n	800ba24 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f003 fa54 	bl	800eecc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ba24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 8123 	beq.w	800bc78 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800ba32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	4413      	add	r3, r2
 800ba44:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ba5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	441a      	add	r2, r3
 800ba72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ba82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba84:	78db      	ldrb	r3, [r3, #3]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	f040 80a2 	bne.w	800bbd0 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800ba8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba8e:	2200      	movs	r2, #0
 800ba90:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ba92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba94:	7b1b      	ldrb	r3, [r3, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f000 8093 	beq.w	800bbc2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ba9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800baa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d046      	beq.n	800bb36 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800baa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baaa:	785b      	ldrb	r3, [r3, #1]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d126      	bne.n	800bafe <PCD_EP_ISR_Handler+0x610>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	627b      	str	r3, [r7, #36]	; 0x24
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800babe:	b29b      	uxth	r3, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	4413      	add	r3, r2
 800bac6:	627b      	str	r3, [r7, #36]	; 0x24
 800bac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	011a      	lsls	r2, r3, #4
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	4413      	add	r3, r2
 800bad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bad6:	623b      	str	r3, [r7, #32]
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	b29b      	uxth	r3, r3
 800bade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	801a      	strh	r2, [r3, #0]
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	b29b      	uxth	r3, r3
 800baee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	801a      	strh	r2, [r3, #0]
 800bafc:	e061      	b.n	800bbc2 <PCD_EP_ISR_Handler+0x6d4>
 800bafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb00:	785b      	ldrb	r3, [r3, #1]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d15d      	bne.n	800bbc2 <PCD_EP_ISR_Handler+0x6d4>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	461a      	mov	r2, r3
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	4413      	add	r3, r2
 800bb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	011a      	lsls	r2, r3, #4
 800bb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb26:	4413      	add	r3, r2
 800bb28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	2200      	movs	r2, #0
 800bb32:	801a      	strh	r2, [r3, #0]
 800bb34:	e045      	b.n	800bbc2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb3e:	785b      	ldrb	r3, [r3, #1]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d126      	bne.n	800bb92 <PCD_EP_ISR_Handler+0x6a4>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	461a      	mov	r2, r3
 800bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb58:	4413      	add	r3, r2
 800bb5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	011a      	lsls	r2, r3, #4
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb64:	4413      	add	r3, r2
 800bb66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb6a:	633b      	str	r3, [r7, #48]	; 0x30
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7a:	801a      	strh	r2, [r3, #0]
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	801a      	strh	r2, [r3, #0]
 800bb90:	e017      	b.n	800bbc2 <PCD_EP_ISR_Handler+0x6d4>
 800bb92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d113      	bne.n	800bbc2 <PCD_EP_ISR_Handler+0x6d4>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	461a      	mov	r2, r3
 800bba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba8:	4413      	add	r3, r2
 800bbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	011a      	lsls	r2, r3, #4
 800bbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbba:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bbc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f006 fcca 	bl	8012562 <HAL_PCD_DataInStageCallback>
 800bbce:	e053      	b.n	800bc78 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bbd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bbd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d146      	bne.n	800bc6a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	00db      	lsls	r3, r3, #3
 800bbee:	4413      	add	r3, r2
 800bbf0:	3302      	adds	r3, #2
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800bc08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc0a:	699a      	ldr	r2, [r3, #24]
 800bc0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d907      	bls.n	800bc24 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800bc14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc16:	699a      	ldr	r2, [r3, #24]
 800bc18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc1c:	1ad2      	subs	r2, r2, r3
 800bc1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc20:	619a      	str	r2, [r3, #24]
 800bc22:	e002      	b.n	800bc2a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800bc24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc26:	2200      	movs	r2, #0
 800bc28:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bc2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	4619      	mov	r1, r3
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f006 fc92 	bl	8012562 <HAL_PCD_DataInStageCallback>
 800bc3e:	e01b      	b.n	800bc78 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800bc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc42:	695a      	ldr	r2, [r3, #20]
 800bc44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc48:	441a      	add	r2, r3
 800bc4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc4c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800bc4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc50:	69da      	ldr	r2, [r3, #28]
 800bc52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc56:	441a      	add	r2, r3
 800bc58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc5a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc62:	4618      	mov	r0, r3
 800bc64:	f003 f932 	bl	800eecc <USB_EPStartXfer>
 800bc68:	e006      	b.n	800bc78 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bc6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bc6e:	461a      	mov	r2, r3
 800bc70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f91b 	bl	800beae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	b21b      	sxth	r3, r3
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f6ff ac37 	blt.w	800b4f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3758      	adds	r7, #88	; 0x58
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d07e      	beq.n	800bdaa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	3302      	adds	r3, #2
 800bcc2:	005b      	lsls	r3, r3, #1
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	6812      	ldr	r2, [r2, #0]
 800bcc8:	4413      	add	r3, r2
 800bcca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcd4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	699a      	ldr	r2, [r3, #24]
 800bcda:	8b7b      	ldrh	r3, [r7, #26]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d306      	bcc.n	800bcee <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	699a      	ldr	r2, [r3, #24]
 800bce4:	8b7b      	ldrh	r3, [r7, #26]
 800bce6:	1ad2      	subs	r2, r2, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	619a      	str	r2, [r3, #24]
 800bcec:	e002      	b.n	800bcf4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d123      	bne.n	800bd44 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	461a      	mov	r2, r3
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd16:	833b      	strh	r3, [r7, #24]
 800bd18:	8b3b      	ldrh	r3, [r7, #24]
 800bd1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd1e:	833b      	strh	r3, [r7, #24]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	461a      	mov	r2, r3
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	441a      	add	r2, r3
 800bd2e:	8b3b      	ldrh	r3, [r7, #24]
 800bd30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bd44:	88fb      	ldrh	r3, [r7, #6]
 800bd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d01f      	beq.n	800bd8e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	461a      	mov	r2, r3
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd68:	82fb      	strh	r3, [r7, #22]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	441a      	add	r2, r3
 800bd78:	8afb      	ldrh	r3, [r7, #22]
 800bd7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bd8e:	8b7b      	ldrh	r3, [r7, #26]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 8087 	beq.w	800bea4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6818      	ldr	r0, [r3, #0]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	6959      	ldr	r1, [r3, #20]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	891a      	ldrh	r2, [r3, #8]
 800bda2:	8b7b      	ldrh	r3, [r7, #26]
 800bda4:	f004 fdc6 	bl	8010934 <USB_ReadPMA>
 800bda8:	e07c      	b.n	800bea4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	4413      	add	r3, r2
 800bdbe:	3306      	adds	r3, #6
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	6812      	ldr	r2, [r2, #0]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdd2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	699a      	ldr	r2, [r3, #24]
 800bdd8:	8b7b      	ldrh	r3, [r7, #26]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d306      	bcc.n	800bdec <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	699a      	ldr	r2, [r3, #24]
 800bde2:	8b7b      	ldrh	r3, [r7, #26]
 800bde4:	1ad2      	subs	r2, r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	619a      	str	r2, [r3, #24]
 800bdea:	e002      	b.n	800bdf2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d123      	bne.n	800be42 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	881b      	ldrh	r3, [r3, #0]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be14:	83fb      	strh	r3, [r7, #30]
 800be16:	8bfb      	ldrh	r3, [r7, #30]
 800be18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be1c:	83fb      	strh	r3, [r7, #30]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	461a      	mov	r2, r3
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	441a      	add	r2, r3
 800be2c:	8bfb      	ldrh	r3, [r7, #30]
 800be2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be3e:	b29b      	uxth	r3, r3
 800be40:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800be42:	88fb      	ldrh	r3, [r7, #6]
 800be44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d11f      	bne.n	800be8c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be66:	83bb      	strh	r3, [r7, #28]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	461a      	mov	r2, r3
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	441a      	add	r2, r3
 800be76:	8bbb      	ldrh	r3, [r7, #28]
 800be78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be88:	b29b      	uxth	r3, r3
 800be8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800be8c:	8b7b      	ldrh	r3, [r7, #26]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d008      	beq.n	800bea4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6818      	ldr	r0, [r3, #0]
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	6959      	ldr	r1, [r3, #20]
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	895a      	ldrh	r2, [r3, #10]
 800be9e:	8b7b      	ldrh	r3, [r7, #26]
 800bea0:	f004 fd48 	bl	8010934 <USB_ReadPMA>
    }
  }

  return count;
 800bea4:	8b7b      	ldrh	r3, [r7, #26]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3720      	adds	r7, #32
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b0a4      	sub	sp, #144	; 0x90
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	4613      	mov	r3, r2
 800beba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bebc:	88fb      	ldrh	r3, [r7, #6]
 800bebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 81dd 	beq.w	800c282 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	461a      	mov	r2, r3
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	4413      	add	r3, r2
 800bedc:	3302      	adds	r3, #2
 800bede:	005b      	lsls	r3, r3, #1
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	6812      	ldr	r2, [r2, #0]
 800bee4:	4413      	add	r3, r2
 800bee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bef0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	699a      	ldr	r2, [r3, #24]
 800bef8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800befc:	429a      	cmp	r2, r3
 800befe:	d907      	bls.n	800bf10 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	699a      	ldr	r2, [r3, #24]
 800bf04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bf08:	1ad2      	subs	r2, r2, r3
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	619a      	str	r2, [r3, #24]
 800bf0e:	e002      	b.n	800bf16 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f040 80b9 	bne.w	800c092 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d126      	bne.n	800bf76 <HAL_PCD_EP_DB_Transmit+0xc8>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	4413      	add	r3, r2
 800bf3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	011a      	lsls	r2, r3, #4
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	4413      	add	r3, r2
 800bf4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	801a      	strh	r2, [r3, #0]
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	881b      	ldrh	r3, [r3, #0]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	801a      	strh	r2, [r3, #0]
 800bf74:	e01a      	b.n	800bfac <HAL_PCD_EP_DB_Transmit+0xfe>
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	785b      	ldrb	r3, [r3, #1]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d116      	bne.n	800bfac <HAL_PCD_EP_DB_Transmit+0xfe>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	637b      	str	r3, [r7, #52]	; 0x34
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf92:	4413      	add	r3, r2
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	011a      	lsls	r2, r3, #4
 800bf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bfa4:	633b      	str	r3, [r7, #48]	; 0x30
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	785b      	ldrb	r3, [r3, #1]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d126      	bne.n	800c008 <HAL_PCD_EP_DB_Transmit+0x15a>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	61fb      	str	r3, [r7, #28]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	461a      	mov	r2, r3
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	4413      	add	r3, r2
 800bfd0:	61fb      	str	r3, [r7, #28]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	011a      	lsls	r2, r3, #4
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfe0:	61bb      	str	r3, [r7, #24]
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	801a      	strh	r2, [r3, #0]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c000:	b29a      	uxth	r2, r3
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	801a      	strh	r2, [r3, #0]
 800c006:	e017      	b.n	800c038 <HAL_PCD_EP_DB_Transmit+0x18a>
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d113      	bne.n	800c038 <HAL_PCD_EP_DB_Transmit+0x18a>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c018:	b29b      	uxth	r3, r3
 800c01a:	461a      	mov	r2, r3
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	4413      	add	r3, r2
 800c020:	627b      	str	r3, [r7, #36]	; 0x24
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	011a      	lsls	r2, r3, #4
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	4413      	add	r3, r2
 800c02c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c030:	623b      	str	r3, [r7, #32]
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	2200      	movs	r2, #0
 800c036:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	4619      	mov	r1, r3
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f006 fa8f 	bl	8012562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c044:	88fb      	ldrh	r3, [r7, #6]
 800c046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 82fc 	beq.w	800c648 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	461a      	mov	r2, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c06a:	82fb      	strh	r3, [r7, #22]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	461a      	mov	r2, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	441a      	add	r2, r3
 800c07a:	8afb      	ldrh	r3, [r7, #22]
 800c07c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	8013      	strh	r3, [r2, #0]
 800c090:	e2da      	b.n	800c648 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c092:	88fb      	ldrh	r3, [r7, #6]
 800c094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d021      	beq.n	800c0e0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	441a      	add	r2, r3
 800c0c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c0cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	f040 82ae 	bne.w	800c648 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	695a      	ldr	r2, [r3, #20]
 800c0f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c0f4:	441a      	add	r2, r3
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	69da      	ldr	r2, [r3, #28]
 800c0fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c102:	441a      	add	r2, r3
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	6a1a      	ldr	r2, [r3, #32]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	429a      	cmp	r2, r3
 800c112:	d30b      	bcc.n	800c12c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	6a1a      	ldr	r2, [r3, #32]
 800c120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c124:	1ad2      	subs	r2, r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	621a      	str	r2, [r3, #32]
 800c12a:	e017      	b.n	800c15c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	6a1b      	ldr	r3, [r3, #32]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d108      	bne.n	800c146 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800c134:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c138:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c144:	e00a      	b.n	800c15c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2200      	movs	r2, #0
 800c15a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	785b      	ldrb	r3, [r3, #1]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d165      	bne.n	800c230 <HAL_PCD_EP_DB_Transmit+0x382>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c172:	b29b      	uxth	r3, r3
 800c174:	461a      	mov	r2, r3
 800c176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c178:	4413      	add	r3, r2
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	011a      	lsls	r2, r3, #4
 800c182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c184:	4413      	add	r3, r2
 800c186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c18a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	b29b      	uxth	r3, r3
 800c192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c196:	b29a      	uxth	r2, r3
 800c198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19a:	801a      	strh	r2, [r3, #0]
 800c19c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1a0:	2b3e      	cmp	r3, #62	; 0x3e
 800c1a2:	d91d      	bls.n	800c1e0 <HAL_PCD_EP_DB_Transmit+0x332>
 800c1a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1a8:	095b      	lsrs	r3, r3, #5
 800c1aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1b0:	f003 031f 	and.w	r3, r3, #31
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <HAL_PCD_EP_DB_Transmit+0x310>
 800c1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	881b      	ldrh	r3, [r3, #0]
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	029b      	lsls	r3, r3, #10
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	801a      	strh	r2, [r3, #0]
 800c1de:	e044      	b.n	800c26a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c1e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10a      	bne.n	800c1fe <HAL_PCD_EP_DB_Transmit+0x350>
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fa:	801a      	strh	r2, [r3, #0]
 800c1fc:	e035      	b.n	800c26a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c1fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	64bb      	str	r3, [r7, #72]	; 0x48
 800c206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <HAL_PCD_EP_DB_Transmit+0x36a>
 800c212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c214:	3301      	adds	r3, #1
 800c216:	64bb      	str	r3, [r7, #72]	; 0x48
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	881b      	ldrh	r3, [r3, #0]
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c220:	b29b      	uxth	r3, r3
 800c222:	029b      	lsls	r3, r3, #10
 800c224:	b29b      	uxth	r3, r3
 800c226:	4313      	orrs	r3, r2
 800c228:	b29a      	uxth	r2, r3
 800c22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22c:	801a      	strh	r2, [r3, #0]
 800c22e:	e01c      	b.n	800c26a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d118      	bne.n	800c26a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	647b      	str	r3, [r7, #68]	; 0x44
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c246:	b29b      	uxth	r3, r3
 800c248:	461a      	mov	r2, r3
 800c24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c24c:	4413      	add	r3, r2
 800c24e:	647b      	str	r3, [r7, #68]	; 0x44
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	011a      	lsls	r2, r3, #4
 800c256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c258:	4413      	add	r3, r2
 800c25a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c25e:	643b      	str	r3, [r7, #64]	; 0x40
 800c260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c264:	b29a      	uxth	r2, r3
 800c266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c268:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6818      	ldr	r0, [r3, #0]
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6959      	ldr	r1, [r3, #20]
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	891a      	ldrh	r2, [r3, #8]
 800c276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	f004 fb15 	bl	80108aa <USB_WritePMA>
 800c280:	e1e2      	b.n	800c648 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	461a      	mov	r2, r3
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	4413      	add	r3, r2
 800c296:	3306      	adds	r3, #6
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	6812      	ldr	r2, [r2, #0]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	699a      	ldr	r2, [r3, #24]
 800c2b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d307      	bcc.n	800c2ca <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	699a      	ldr	r2, [r3, #24]
 800c2be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c2c2:	1ad2      	subs	r2, r2, r3
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	619a      	str	r2, [r3, #24]
 800c2c8:	e002      	b.n	800c2d0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f040 80c0 	bne.w	800c45a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	785b      	ldrb	r3, [r3, #1]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d126      	bne.n	800c330 <HAL_PCD_EP_DB_Transmit+0x482>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2f6:	4413      	add	r3, r2
 800c2f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	011a      	lsls	r2, r3, #4
 800c300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c302:	4413      	add	r3, r2
 800c304:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c308:	67bb      	str	r3, [r7, #120]	; 0x78
 800c30a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c314:	b29a      	uxth	r2, r3
 800c316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c318:	801a      	strh	r2, [r3, #0]
 800c31a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c328:	b29a      	uxth	r2, r3
 800c32a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c32c:	801a      	strh	r2, [r3, #0]
 800c32e:	e01a      	b.n	800c366 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d116      	bne.n	800c366 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	667b      	str	r3, [r7, #100]	; 0x64
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c346:	b29b      	uxth	r3, r3
 800c348:	461a      	mov	r2, r3
 800c34a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c34c:	4413      	add	r3, r2
 800c34e:	667b      	str	r3, [r7, #100]	; 0x64
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	011a      	lsls	r2, r3, #4
 800c356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c358:	4413      	add	r3, r2
 800c35a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c35e:	663b      	str	r3, [r7, #96]	; 0x60
 800c360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c362:	2200      	movs	r2, #0
 800c364:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	677b      	str	r3, [r7, #116]	; 0x74
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	785b      	ldrb	r3, [r3, #1]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d12b      	bne.n	800c3cc <HAL_PCD_EP_DB_Transmit+0x51e>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c382:	b29b      	uxth	r3, r3
 800c384:	461a      	mov	r2, r3
 800c386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c388:	4413      	add	r3, r2
 800c38a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	011a      	lsls	r2, r3, #4
 800c392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c394:	4413      	add	r3, r2
 800c396:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c39a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c39e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3b0:	801a      	strh	r2, [r3, #0]
 800c3b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3c8:	801a      	strh	r2, [r3, #0]
 800c3ca:	e017      	b.n	800c3fc <HAL_PCD_EP_DB_Transmit+0x54e>
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	785b      	ldrb	r3, [r3, #1]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d113      	bne.n	800c3fc <HAL_PCD_EP_DB_Transmit+0x54e>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3e2:	4413      	add	r3, r2
 800c3e4:	677b      	str	r3, [r7, #116]	; 0x74
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	011a      	lsls	r2, r3, #4
 800c3ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c3f4:	673b      	str	r3, [r7, #112]	; 0x70
 800c3f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	4619      	mov	r1, r3
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f006 f8ad 	bl	8012562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c408:	88fb      	ldrh	r3, [r7, #6]
 800c40a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f040 811a 	bne.w	800c648 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	461a      	mov	r2, r3
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c42e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	441a      	add	r2, r3
 800c440:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c44c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c454:	b29b      	uxth	r3, r3
 800c456:	8013      	strh	r3, [r2, #0]
 800c458:	e0f6      	b.n	800c648 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d121      	bne.n	800c4a8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	461a      	mov	r2, r3
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	881b      	ldrh	r3, [r3, #0]
 800c474:	b29b      	uxth	r3, r3
 800c476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c47e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	461a      	mov	r2, r3
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	441a      	add	r2, r3
 800c490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c49c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	f040 80ca 	bne.w	800c648 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	695a      	ldr	r2, [r3, #20]
 800c4b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c4bc:	441a      	add	r2, r3
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	69da      	ldr	r2, [r3, #28]
 800c4c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c4ca:	441a      	add	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	6a1a      	ldr	r2, [r3, #32]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d30b      	bcc.n	800c4f4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	6a1a      	ldr	r2, [r3, #32]
 800c4e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4ec:	1ad2      	subs	r2, r2, r3
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	621a      	str	r2, [r3, #32]
 800c4f2:	e017      	b.n	800c524 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	6a1b      	ldr	r3, [r3, #32]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d108      	bne.n	800c50e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800c4fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c50c:	e00a      	b.n	800c524 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	2200      	movs	r2, #0
 800c51a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	657b      	str	r3, [r7, #84]	; 0x54
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	785b      	ldrb	r3, [r3, #1]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d165      	bne.n	800c5fe <HAL_PCD_EP_DB_Transmit+0x750>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c540:	b29b      	uxth	r3, r3
 800c542:	461a      	mov	r2, r3
 800c544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c546:	4413      	add	r3, r2
 800c548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	011a      	lsls	r2, r3, #4
 800c550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c552:	4413      	add	r3, r2
 800c554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c558:	65bb      	str	r3, [r7, #88]	; 0x58
 800c55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	b29b      	uxth	r3, r3
 800c560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c564:	b29a      	uxth	r2, r3
 800c566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c568:	801a      	strh	r2, [r3, #0]
 800c56a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c56e:	2b3e      	cmp	r3, #62	; 0x3e
 800c570:	d91d      	bls.n	800c5ae <HAL_PCD_EP_DB_Transmit+0x700>
 800c572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c576:	095b      	lsrs	r3, r3, #5
 800c578:	66bb      	str	r3, [r7, #104]	; 0x68
 800c57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c57e:	f003 031f 	and.w	r3, r3, #31
 800c582:	2b00      	cmp	r3, #0
 800c584:	d102      	bne.n	800c58c <HAL_PCD_EP_DB_Transmit+0x6de>
 800c586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c588:	3b01      	subs	r3, #1
 800c58a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c58c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	b29a      	uxth	r2, r3
 800c592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c594:	b29b      	uxth	r3, r3
 800c596:	029b      	lsls	r3, r3, #10
 800c598:	b29b      	uxth	r3, r3
 800c59a:	4313      	orrs	r3, r2
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5aa:	801a      	strh	r2, [r3, #0]
 800c5ac:	e041      	b.n	800c632 <HAL_PCD_EP_DB_Transmit+0x784>
 800c5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d10a      	bne.n	800c5cc <HAL_PCD_EP_DB_Transmit+0x71e>
 800c5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5c8:	801a      	strh	r2, [r3, #0]
 800c5ca:	e032      	b.n	800c632 <HAL_PCD_EP_DB_Transmit+0x784>
 800c5cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5d0:	085b      	lsrs	r3, r3, #1
 800c5d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5d8:	f003 0301 	and.w	r3, r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <HAL_PCD_EP_DB_Transmit+0x738>
 800c5e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5e8:	881b      	ldrh	r3, [r3, #0]
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	029b      	lsls	r3, r3, #10
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5fa:	801a      	strh	r2, [r3, #0]
 800c5fc:	e019      	b.n	800c632 <HAL_PCD_EP_DB_Transmit+0x784>
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	785b      	ldrb	r3, [r3, #1]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d115      	bne.n	800c632 <HAL_PCD_EP_DB_Transmit+0x784>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c60e:	b29b      	uxth	r3, r3
 800c610:	461a      	mov	r2, r3
 800c612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c614:	4413      	add	r3, r2
 800c616:	657b      	str	r3, [r7, #84]	; 0x54
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	011a      	lsls	r2, r3, #4
 800c61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c620:	4413      	add	r3, r2
 800c622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c626:	653b      	str	r3, [r7, #80]	; 0x50
 800c628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c630:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	6959      	ldr	r1, [r3, #20]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	895a      	ldrh	r2, [r3, #10]
 800c63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c642:	b29b      	uxth	r3, r3
 800c644:	f004 f931 	bl	80108aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	461a      	mov	r2, r3
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	b29b      	uxth	r3, r3
 800c65a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c65e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c662:	82bb      	strh	r3, [r7, #20]
 800c664:	8abb      	ldrh	r3, [r7, #20]
 800c666:	f083 0310 	eor.w	r3, r3, #16
 800c66a:	82bb      	strh	r3, [r7, #20]
 800c66c:	8abb      	ldrh	r3, [r7, #20]
 800c66e:	f083 0320 	eor.w	r3, r3, #32
 800c672:	82bb      	strh	r3, [r7, #20]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	461a      	mov	r2, r3
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	441a      	add	r2, r3
 800c682:	8abb      	ldrh	r3, [r7, #20]
 800c684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c68c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c694:	b29b      	uxth	r3, r3
 800c696:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3790      	adds	r7, #144	; 0x90
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c6a2:	b480      	push	{r7}
 800c6a4:	b087      	sub	sp, #28
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	60f8      	str	r0, [r7, #12]
 800c6aa:	607b      	str	r3, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	817b      	strh	r3, [r7, #10]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c6b4:	897b      	ldrh	r3, [r7, #10]
 800c6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6c0:	897b      	ldrh	r3, [r7, #10]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e009      	b.n	800c6ec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c6d8:	897a      	ldrh	r2, [r7, #10]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c6ec:	893b      	ldrh	r3, [r7, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d107      	bne.n	800c702 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	80da      	strh	r2, [r3, #6]
 800c700:	e00b      	b.n	800c71a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2201      	movs	r2, #1
 800c706:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	0c1b      	lsrs	r3, r3, #16
 800c714:	b29a      	uxth	r2, r3
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	371c      	adds	r7, #28
 800c720:	46bd      	mov	sp, r7
 800c722:	bc80      	pop	{r7}
 800c724:	4770      	bx	lr
	...

0800c728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	e272      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8087 	beq.w	800c856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c748:	4b92      	ldr	r3, [pc, #584]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	f003 030c 	and.w	r3, r3, #12
 800c750:	2b04      	cmp	r3, #4
 800c752:	d00c      	beq.n	800c76e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c754:	4b8f      	ldr	r3, [pc, #572]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	f003 030c 	and.w	r3, r3, #12
 800c75c:	2b08      	cmp	r3, #8
 800c75e:	d112      	bne.n	800c786 <HAL_RCC_OscConfig+0x5e>
 800c760:	4b8c      	ldr	r3, [pc, #560]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c76c:	d10b      	bne.n	800c786 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c76e:	4b89      	ldr	r3, [pc, #548]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c776:	2b00      	cmp	r3, #0
 800c778:	d06c      	beq.n	800c854 <HAL_RCC_OscConfig+0x12c>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d168      	bne.n	800c854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e24c      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c78e:	d106      	bne.n	800c79e <HAL_RCC_OscConfig+0x76>
 800c790:	4b80      	ldr	r3, [pc, #512]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a7f      	ldr	r2, [pc, #508]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	e02e      	b.n	800c7fc <HAL_RCC_OscConfig+0xd4>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10c      	bne.n	800c7c0 <HAL_RCC_OscConfig+0x98>
 800c7a6:	4b7b      	ldr	r3, [pc, #492]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a7a      	ldr	r2, [pc, #488]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	4b78      	ldr	r3, [pc, #480]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a77      	ldr	r2, [pc, #476]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7bc:	6013      	str	r3, [r2, #0]
 800c7be:	e01d      	b.n	800c7fc <HAL_RCC_OscConfig+0xd4>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7c8:	d10c      	bne.n	800c7e4 <HAL_RCC_OscConfig+0xbc>
 800c7ca:	4b72      	ldr	r3, [pc, #456]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a71      	ldr	r2, [pc, #452]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7d4:	6013      	str	r3, [r2, #0]
 800c7d6:	4b6f      	ldr	r3, [pc, #444]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a6e      	ldr	r2, [pc, #440]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	e00b      	b.n	800c7fc <HAL_RCC_OscConfig+0xd4>
 800c7e4:	4b6b      	ldr	r3, [pc, #428]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a6a      	ldr	r2, [pc, #424]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	4b68      	ldr	r3, [pc, #416]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a67      	ldr	r2, [pc, #412]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c7f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d013      	beq.n	800c82c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c804:	f7f9 fcf2 	bl	80061ec <HAL_GetTick>
 800c808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c80a:	e008      	b.n	800c81e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c80c:	f7f9 fcee 	bl	80061ec <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b64      	cmp	r3, #100	; 0x64
 800c818:	d901      	bls.n	800c81e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e200      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c81e:	4b5d      	ldr	r3, [pc, #372]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0f0      	beq.n	800c80c <HAL_RCC_OscConfig+0xe4>
 800c82a:	e014      	b.n	800c856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c82c:	f7f9 fcde 	bl	80061ec <HAL_GetTick>
 800c830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c832:	e008      	b.n	800c846 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c834:	f7f9 fcda 	bl	80061ec <HAL_GetTick>
 800c838:	4602      	mov	r2, r0
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	2b64      	cmp	r3, #100	; 0x64
 800c840:	d901      	bls.n	800c846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e1ec      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c846:	4b53      	ldr	r3, [pc, #332]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f0      	bne.n	800c834 <HAL_RCC_OscConfig+0x10c>
 800c852:	e000      	b.n	800c856 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 0302 	and.w	r3, r3, #2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d063      	beq.n	800c92a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c862:	4b4c      	ldr	r3, [pc, #304]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	f003 030c 	and.w	r3, r3, #12
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00b      	beq.n	800c886 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c86e:	4b49      	ldr	r3, [pc, #292]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f003 030c 	and.w	r3, r3, #12
 800c876:	2b08      	cmp	r3, #8
 800c878:	d11c      	bne.n	800c8b4 <HAL_RCC_OscConfig+0x18c>
 800c87a:	4b46      	ldr	r3, [pc, #280]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c882:	2b00      	cmp	r3, #0
 800c884:	d116      	bne.n	800c8b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c886:	4b43      	ldr	r3, [pc, #268]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 0302 	and.w	r3, r3, #2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d005      	beq.n	800c89e <HAL_RCC_OscConfig+0x176>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d001      	beq.n	800c89e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e1c0      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c89e:	4b3d      	ldr	r3, [pc, #244]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	695b      	ldr	r3, [r3, #20]
 800c8aa:	00db      	lsls	r3, r3, #3
 800c8ac:	4939      	ldr	r1, [pc, #228]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8b2:	e03a      	b.n	800c92a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d020      	beq.n	800c8fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c8bc:	4b36      	ldr	r3, [pc, #216]	; (800c998 <HAL_RCC_OscConfig+0x270>)
 800c8be:	2201      	movs	r2, #1
 800c8c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8c2:	f7f9 fc93 	bl	80061ec <HAL_GetTick>
 800c8c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8c8:	e008      	b.n	800c8dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c8ca:	f7f9 fc8f 	bl	80061ec <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d901      	bls.n	800c8dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e1a1      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8dc:	4b2d      	ldr	r3, [pc, #180]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d0f0      	beq.n	800c8ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8e8:	4b2a      	ldr	r3, [pc, #168]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	4927      	ldr	r1, [pc, #156]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	600b      	str	r3, [r1, #0]
 800c8fc:	e015      	b.n	800c92a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8fe:	4b26      	ldr	r3, [pc, #152]	; (800c998 <HAL_RCC_OscConfig+0x270>)
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c904:	f7f9 fc72 	bl	80061ec <HAL_GetTick>
 800c908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c90a:	e008      	b.n	800c91e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c90c:	f7f9 fc6e 	bl	80061ec <HAL_GetTick>
 800c910:	4602      	mov	r2, r0
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	2b02      	cmp	r3, #2
 800c918:	d901      	bls.n	800c91e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e180      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c91e:	4b1d      	ldr	r3, [pc, #116]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 0302 	and.w	r3, r3, #2
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1f0      	bne.n	800c90c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 0308 	and.w	r3, r3, #8
 800c932:	2b00      	cmp	r3, #0
 800c934:	d03a      	beq.n	800c9ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d019      	beq.n	800c972 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c93e:	4b17      	ldr	r3, [pc, #92]	; (800c99c <HAL_RCC_OscConfig+0x274>)
 800c940:	2201      	movs	r2, #1
 800c942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c944:	f7f9 fc52 	bl	80061ec <HAL_GetTick>
 800c948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c94a:	e008      	b.n	800c95e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c94c:	f7f9 fc4e 	bl	80061ec <HAL_GetTick>
 800c950:	4602      	mov	r2, r0
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	2b02      	cmp	r3, #2
 800c958:	d901      	bls.n	800c95e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	e160      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c95e:	4b0d      	ldr	r3, [pc, #52]	; (800c994 <HAL_RCC_OscConfig+0x26c>)
 800c960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c962:	f003 0302 	and.w	r3, r3, #2
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0f0      	beq.n	800c94c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c96a:	2001      	movs	r0, #1
 800c96c:	f000 fad0 	bl	800cf10 <RCC_Delay>
 800c970:	e01c      	b.n	800c9ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c972:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <HAL_RCC_OscConfig+0x274>)
 800c974:	2200      	movs	r2, #0
 800c976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c978:	f7f9 fc38 	bl	80061ec <HAL_GetTick>
 800c97c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c97e:	e00f      	b.n	800c9a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c980:	f7f9 fc34 	bl	80061ec <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d908      	bls.n	800c9a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e146      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
 800c992:	bf00      	nop
 800c994:	40021000 	.word	0x40021000
 800c998:	42420000 	.word	0x42420000
 800c99c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9a0:	4b92      	ldr	r3, [pc, #584]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a4:	f003 0302 	and.w	r3, r3, #2
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1e9      	bne.n	800c980 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 0304 	and.w	r3, r3, #4
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 80a6 	beq.w	800cb06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9be:	4b8b      	ldr	r3, [pc, #556]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10d      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9ca:	4b88      	ldr	r3, [pc, #544]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800c9cc:	69db      	ldr	r3, [r3, #28]
 800c9ce:	4a87      	ldr	r2, [pc, #540]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800c9d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9d4:	61d3      	str	r3, [r2, #28]
 800c9d6:	4b85      	ldr	r3, [pc, #532]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800c9d8:	69db      	ldr	r3, [r3, #28]
 800c9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9de:	60bb      	str	r3, [r7, #8]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9e6:	4b82      	ldr	r3, [pc, #520]	; (800cbf0 <HAL_RCC_OscConfig+0x4c8>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d118      	bne.n	800ca24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c9f2:	4b7f      	ldr	r3, [pc, #508]	; (800cbf0 <HAL_RCC_OscConfig+0x4c8>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a7e      	ldr	r2, [pc, #504]	; (800cbf0 <HAL_RCC_OscConfig+0x4c8>)
 800c9f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c9fe:	f7f9 fbf5 	bl	80061ec <HAL_GetTick>
 800ca02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca04:	e008      	b.n	800ca18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca06:	f7f9 fbf1 	bl	80061ec <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	2b64      	cmp	r3, #100	; 0x64
 800ca12:	d901      	bls.n	800ca18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ca14:	2303      	movs	r3, #3
 800ca16:	e103      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca18:	4b75      	ldr	r3, [pc, #468]	; (800cbf0 <HAL_RCC_OscConfig+0x4c8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d0f0      	beq.n	800ca06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d106      	bne.n	800ca3a <HAL_RCC_OscConfig+0x312>
 800ca2c:	4b6f      	ldr	r3, [pc, #444]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca2e:	6a1b      	ldr	r3, [r3, #32]
 800ca30:	4a6e      	ldr	r2, [pc, #440]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca32:	f043 0301 	orr.w	r3, r3, #1
 800ca36:	6213      	str	r3, [r2, #32]
 800ca38:	e02d      	b.n	800ca96 <HAL_RCC_OscConfig+0x36e>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10c      	bne.n	800ca5c <HAL_RCC_OscConfig+0x334>
 800ca42:	4b6a      	ldr	r3, [pc, #424]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	4a69      	ldr	r2, [pc, #420]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca48:	f023 0301 	bic.w	r3, r3, #1
 800ca4c:	6213      	str	r3, [r2, #32]
 800ca4e:	4b67      	ldr	r3, [pc, #412]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca50:	6a1b      	ldr	r3, [r3, #32]
 800ca52:	4a66      	ldr	r2, [pc, #408]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca54:	f023 0304 	bic.w	r3, r3, #4
 800ca58:	6213      	str	r3, [r2, #32]
 800ca5a:	e01c      	b.n	800ca96 <HAL_RCC_OscConfig+0x36e>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	2b05      	cmp	r3, #5
 800ca62:	d10c      	bne.n	800ca7e <HAL_RCC_OscConfig+0x356>
 800ca64:	4b61      	ldr	r3, [pc, #388]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca66:	6a1b      	ldr	r3, [r3, #32]
 800ca68:	4a60      	ldr	r2, [pc, #384]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca6a:	f043 0304 	orr.w	r3, r3, #4
 800ca6e:	6213      	str	r3, [r2, #32]
 800ca70:	4b5e      	ldr	r3, [pc, #376]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca72:	6a1b      	ldr	r3, [r3, #32]
 800ca74:	4a5d      	ldr	r2, [pc, #372]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca76:	f043 0301 	orr.w	r3, r3, #1
 800ca7a:	6213      	str	r3, [r2, #32]
 800ca7c:	e00b      	b.n	800ca96 <HAL_RCC_OscConfig+0x36e>
 800ca7e:	4b5b      	ldr	r3, [pc, #364]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	4a5a      	ldr	r2, [pc, #360]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca84:	f023 0301 	bic.w	r3, r3, #1
 800ca88:	6213      	str	r3, [r2, #32]
 800ca8a:	4b58      	ldr	r3, [pc, #352]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	4a57      	ldr	r2, [pc, #348]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800ca90:	f023 0304 	bic.w	r3, r3, #4
 800ca94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d015      	beq.n	800caca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca9e:	f7f9 fba5 	bl	80061ec <HAL_GetTick>
 800caa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800caa4:	e00a      	b.n	800cabc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800caa6:	f7f9 fba1 	bl	80061ec <HAL_GetTick>
 800caaa:	4602      	mov	r2, r0
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d901      	bls.n	800cabc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800cab8:	2303      	movs	r3, #3
 800caba:	e0b1      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cabc:	4b4b      	ldr	r3, [pc, #300]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	f003 0302 	and.w	r3, r3, #2
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0ee      	beq.n	800caa6 <HAL_RCC_OscConfig+0x37e>
 800cac8:	e014      	b.n	800caf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800caca:	f7f9 fb8f 	bl	80061ec <HAL_GetTick>
 800cace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cad0:	e00a      	b.n	800cae8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cad2:	f7f9 fb8b 	bl	80061ec <HAL_GetTick>
 800cad6:	4602      	mov	r2, r0
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d901      	bls.n	800cae8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e09b      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cae8:	4b40      	ldr	r3, [pc, #256]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800caea:	6a1b      	ldr	r3, [r3, #32]
 800caec:	f003 0302 	and.w	r3, r3, #2
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1ee      	bne.n	800cad2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d105      	bne.n	800cb06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cafa:	4b3c      	ldr	r3, [pc, #240]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	4a3b      	ldr	r2, [pc, #236]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cb00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	69db      	ldr	r3, [r3, #28]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f000 8087 	beq.w	800cc1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cb10:	4b36      	ldr	r3, [pc, #216]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f003 030c 	and.w	r3, r3, #12
 800cb18:	2b08      	cmp	r3, #8
 800cb1a:	d061      	beq.n	800cbe0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d146      	bne.n	800cbb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb24:	4b33      	ldr	r3, [pc, #204]	; (800cbf4 <HAL_RCC_OscConfig+0x4cc>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb2a:	f7f9 fb5f 	bl	80061ec <HAL_GetTick>
 800cb2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cb30:	e008      	b.n	800cb44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb32:	f7f9 fb5b 	bl	80061ec <HAL_GetTick>
 800cb36:	4602      	mov	r2, r0
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d901      	bls.n	800cb44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e06d      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cb44:	4b29      	ldr	r3, [pc, #164]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1f0      	bne.n	800cb32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a1b      	ldr	r3, [r3, #32]
 800cb54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb58:	d108      	bne.n	800cb6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800cb5a:	4b24      	ldr	r3, [pc, #144]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	4921      	ldr	r1, [pc, #132]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cb6c:	4b1f      	ldr	r3, [pc, #124]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a19      	ldr	r1, [r3, #32]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	491b      	ldr	r1, [pc, #108]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cb80:	4313      	orrs	r3, r2
 800cb82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb84:	4b1b      	ldr	r3, [pc, #108]	; (800cbf4 <HAL_RCC_OscConfig+0x4cc>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb8a:	f7f9 fb2f 	bl	80061ec <HAL_GetTick>
 800cb8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cb90:	e008      	b.n	800cba4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb92:	f7f9 fb2b 	bl	80061ec <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e03d      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cba4:	4b11      	ldr	r3, [pc, #68]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d0f0      	beq.n	800cb92 <HAL_RCC_OscConfig+0x46a>
 800cbb0:	e035      	b.n	800cc1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbb2:	4b10      	ldr	r3, [pc, #64]	; (800cbf4 <HAL_RCC_OscConfig+0x4cc>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbb8:	f7f9 fb18 	bl	80061ec <HAL_GetTick>
 800cbbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cbbe:	e008      	b.n	800cbd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbc0:	f7f9 fb14 	bl	80061ec <HAL_GetTick>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d901      	bls.n	800cbd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e026      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cbd2:	4b06      	ldr	r3, [pc, #24]	; (800cbec <HAL_RCC_OscConfig+0x4c4>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1f0      	bne.n	800cbc0 <HAL_RCC_OscConfig+0x498>
 800cbde:	e01e      	b.n	800cc1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	69db      	ldr	r3, [r3, #28]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d107      	bne.n	800cbf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e019      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
 800cbec:	40021000 	.word	0x40021000
 800cbf0:	40007000 	.word	0x40007000
 800cbf4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cbf8:	4b0b      	ldr	r3, [pc, #44]	; (800cc28 <HAL_RCC_OscConfig+0x500>)
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a1b      	ldr	r3, [r3, #32]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d106      	bne.n	800cc1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d001      	beq.n	800cc1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e000      	b.n	800cc20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	40021000 	.word	0x40021000

0800cc2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e0d0      	b.n	800cde2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cc40:	4b6a      	ldr	r3, [pc, #424]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 0307 	and.w	r3, r3, #7
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d910      	bls.n	800cc70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc4e:	4b67      	ldr	r3, [pc, #412]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f023 0207 	bic.w	r2, r3, #7
 800cc56:	4965      	ldr	r1, [pc, #404]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc5e:	4b63      	ldr	r3, [pc, #396]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0307 	and.w	r3, r3, #7
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d001      	beq.n	800cc70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e0b8      	b.n	800cde2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 0302 	and.w	r3, r3, #2
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d020      	beq.n	800ccbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d005      	beq.n	800cc94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc88:	4b59      	ldr	r3, [pc, #356]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	4a58      	ldr	r2, [pc, #352]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cc8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cc92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 0308 	and.w	r3, r3, #8
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d005      	beq.n	800ccac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cca0:	4b53      	ldr	r3, [pc, #332]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	4a52      	ldr	r2, [pc, #328]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cca6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ccaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ccac:	4b50      	ldr	r3, [pc, #320]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	494d      	ldr	r1, [pc, #308]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d040      	beq.n	800cd4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d107      	bne.n	800cce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ccd2:	4b47      	ldr	r3, [pc, #284]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d115      	bne.n	800cd0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e07f      	b.n	800cde2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d107      	bne.n	800ccfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ccea:	4b41      	ldr	r3, [pc, #260]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d109      	bne.n	800cd0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e073      	b.n	800cde2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccfa:	4b3d      	ldr	r3, [pc, #244]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 0302 	and.w	r3, r3, #2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e06b      	b.n	800cde2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cd0a:	4b39      	ldr	r3, [pc, #228]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	f023 0203 	bic.w	r2, r3, #3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	4936      	ldr	r1, [pc, #216]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cd1c:	f7f9 fa66 	bl	80061ec <HAL_GetTick>
 800cd20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd22:	e00a      	b.n	800cd3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd24:	f7f9 fa62 	bl	80061ec <HAL_GetTick>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d901      	bls.n	800cd3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cd36:	2303      	movs	r3, #3
 800cd38:	e053      	b.n	800cde2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd3a:	4b2d      	ldr	r3, [pc, #180]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f003 020c 	and.w	r2, r3, #12
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d1eb      	bne.n	800cd24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cd4c:	4b27      	ldr	r3, [pc, #156]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 0307 	and.w	r3, r3, #7
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d210      	bcs.n	800cd7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd5a:	4b24      	ldr	r3, [pc, #144]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f023 0207 	bic.w	r2, r3, #7
 800cd62:	4922      	ldr	r1, [pc, #136]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd6a:	4b20      	ldr	r3, [pc, #128]	; (800cdec <HAL_RCC_ClockConfig+0x1c0>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	683a      	ldr	r2, [r7, #0]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d001      	beq.n	800cd7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e032      	b.n	800cde2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f003 0304 	and.w	r3, r3, #4
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d008      	beq.n	800cd9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd88:	4b19      	ldr	r3, [pc, #100]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	4916      	ldr	r1, [pc, #88]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cd96:	4313      	orrs	r3, r2
 800cd98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 0308 	and.w	r3, r3, #8
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d009      	beq.n	800cdba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cda6:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	490e      	ldr	r1, [pc, #56]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cdba:	f000 f821 	bl	800ce00 <HAL_RCC_GetSysClockFreq>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	091b      	lsrs	r3, r3, #4
 800cdc6:	f003 030f 	and.w	r3, r3, #15
 800cdca:	490a      	ldr	r1, [pc, #40]	; (800cdf4 <HAL_RCC_ClockConfig+0x1c8>)
 800cdcc:	5ccb      	ldrb	r3, [r1, r3]
 800cdce:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd2:	4a09      	ldr	r2, [pc, #36]	; (800cdf8 <HAL_RCC_ClockConfig+0x1cc>)
 800cdd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cdd6:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <HAL_RCC_ClockConfig+0x1d0>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7f9 f9c4 	bl	8006168 <HAL_InitTick>

  return HAL_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	40022000 	.word	0x40022000
 800cdf0:	40021000 	.word	0x40021000
 800cdf4:	08015e58 	.word	0x08015e58
 800cdf8:	2000068c 	.word	0x2000068c
 800cdfc:	20000690 	.word	0x20000690

0800ce00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b087      	sub	sp, #28
 800ce04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ce06:	2300      	movs	r3, #0
 800ce08:	60fb      	str	r3, [r7, #12]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60bb      	str	r3, [r7, #8]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	2300      	movs	r3, #0
 800ce14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ce16:	2300      	movs	r3, #0
 800ce18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ce1a:	4b1e      	ldr	r3, [pc, #120]	; (800ce94 <HAL_RCC_GetSysClockFreq+0x94>)
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f003 030c 	and.w	r3, r3, #12
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d002      	beq.n	800ce30 <HAL_RCC_GetSysClockFreq+0x30>
 800ce2a:	2b08      	cmp	r3, #8
 800ce2c:	d003      	beq.n	800ce36 <HAL_RCC_GetSysClockFreq+0x36>
 800ce2e:	e027      	b.n	800ce80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ce30:	4b19      	ldr	r3, [pc, #100]	; (800ce98 <HAL_RCC_GetSysClockFreq+0x98>)
 800ce32:	613b      	str	r3, [r7, #16]
      break;
 800ce34:	e027      	b.n	800ce86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	0c9b      	lsrs	r3, r3, #18
 800ce3a:	f003 030f 	and.w	r3, r3, #15
 800ce3e:	4a17      	ldr	r2, [pc, #92]	; (800ce9c <HAL_RCC_GetSysClockFreq+0x9c>)
 800ce40:	5cd3      	ldrb	r3, [r2, r3]
 800ce42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d010      	beq.n	800ce70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ce4e:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <HAL_RCC_GetSysClockFreq+0x94>)
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	0c5b      	lsrs	r3, r3, #17
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	4a11      	ldr	r2, [pc, #68]	; (800cea0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ce5a:	5cd3      	ldrb	r3, [r2, r3]
 800ce5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a0d      	ldr	r2, [pc, #52]	; (800ce98 <HAL_RCC_GetSysClockFreq+0x98>)
 800ce62:	fb03 f202 	mul.w	r2, r3, r2
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce6c:	617b      	str	r3, [r7, #20]
 800ce6e:	e004      	b.n	800ce7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a0c      	ldr	r2, [pc, #48]	; (800cea4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ce74:	fb02 f303 	mul.w	r3, r2, r3
 800ce78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	613b      	str	r3, [r7, #16]
      break;
 800ce7e:	e002      	b.n	800ce86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ce80:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800ce82:	613b      	str	r3, [r7, #16]
      break;
 800ce84:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce86:	693b      	ldr	r3, [r7, #16]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	371c      	adds	r7, #28
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bc80      	pop	{r7}
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	40021000 	.word	0x40021000
 800ce98:	00b71b00 	.word	0x00b71b00
 800ce9c:	08015e70 	.word	0x08015e70
 800cea0:	08015e80 	.word	0x08015e80
 800cea4:	003d0900 	.word	0x003d0900
 800cea8:	007a1200 	.word	0x007a1200

0800ceac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ceb0:	4b02      	ldr	r3, [pc, #8]	; (800cebc <HAL_RCC_GetHCLKFreq+0x10>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bc80      	pop	{r7}
 800ceba:	4770      	bx	lr
 800cebc:	2000068c 	.word	0x2000068c

0800cec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cec4:	f7ff fff2 	bl	800ceac <HAL_RCC_GetHCLKFreq>
 800cec8:	4602      	mov	r2, r0
 800ceca:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	0a1b      	lsrs	r3, r3, #8
 800ced0:	f003 0307 	and.w	r3, r3, #7
 800ced4:	4903      	ldr	r1, [pc, #12]	; (800cee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ced6:	5ccb      	ldrb	r3, [r1, r3]
 800ced8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cedc:	4618      	mov	r0, r3
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	40021000 	.word	0x40021000
 800cee4:	08015e68 	.word	0x08015e68

0800cee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ceec:	f7ff ffde 	bl	800ceac <HAL_RCC_GetHCLKFreq>
 800cef0:	4602      	mov	r2, r0
 800cef2:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	0adb      	lsrs	r3, r3, #11
 800cef8:	f003 0307 	and.w	r3, r3, #7
 800cefc:	4903      	ldr	r1, [pc, #12]	; (800cf0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cefe:	5ccb      	ldrb	r3, [r1, r3]
 800cf00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	40021000 	.word	0x40021000
 800cf0c:	08015e68 	.word	0x08015e68

0800cf10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800cf18:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <RCC_Delay+0x34>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a0a      	ldr	r2, [pc, #40]	; (800cf48 <RCC_Delay+0x38>)
 800cf1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf22:	0a5b      	lsrs	r3, r3, #9
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
 800cf2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800cf2c:	bf00      	nop
  }
  while (Delay --);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	1e5a      	subs	r2, r3, #1
 800cf32:	60fa      	str	r2, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1f9      	bne.n	800cf2c <RCC_Delay+0x1c>
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bc80      	pop	{r7}
 800cf42:	4770      	bx	lr
 800cf44:	2000068c 	.word	0x2000068c
 800cf48:	10624dd3 	.word	0x10624dd3

0800cf4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800cf54:	2300      	movs	r3, #0
 800cf56:	613b      	str	r3, [r7, #16]
 800cf58:	2300      	movs	r3, #0
 800cf5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d07d      	beq.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf6c:	4b4f      	ldr	r3, [pc, #316]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10d      	bne.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf78:	4b4c      	ldr	r3, [pc, #304]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cf7a:	69db      	ldr	r3, [r3, #28]
 800cf7c:	4a4b      	ldr	r2, [pc, #300]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cf7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf82:	61d3      	str	r3, [r2, #28]
 800cf84:	4b49      	ldr	r3, [pc, #292]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cf86:	69db      	ldr	r3, [r3, #28]
 800cf88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf8c:	60bb      	str	r3, [r7, #8]
 800cf8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cf90:	2301      	movs	r3, #1
 800cf92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf94:	4b46      	ldr	r3, [pc, #280]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d118      	bne.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cfa0:	4b43      	ldr	r3, [pc, #268]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a42      	ldr	r2, [pc, #264]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cfa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cfac:	f7f9 f91e 	bl	80061ec <HAL_GetTick>
 800cfb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfb2:	e008      	b.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfb4:	f7f9 f91a 	bl	80061ec <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	2b64      	cmp	r3, #100	; 0x64
 800cfc0:	d901      	bls.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e06d      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfc6:	4b3a      	ldr	r3, [pc, #232]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0f0      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cfd2:	4b36      	ldr	r3, [pc, #216]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cfd4:	6a1b      	ldr	r3, [r3, #32]
 800cfd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d02e      	beq.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d027      	beq.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cff0:	4b2e      	ldr	r3, [pc, #184]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cff2:	6a1b      	ldr	r3, [r3, #32]
 800cff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cffa:	4b2e      	ldr	r3, [pc, #184]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800cffc:	2201      	movs	r2, #1
 800cffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d000:	4b2c      	ldr	r3, [pc, #176]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800d006:	4a29      	ldr	r2, [pc, #164]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f003 0301 	and.w	r3, r3, #1
 800d012:	2b00      	cmp	r3, #0
 800d014:	d014      	beq.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d016:	f7f9 f8e9 	bl	80061ec <HAL_GetTick>
 800d01a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d01c:	e00a      	b.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d01e:	f7f9 f8e5 	bl	80061ec <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	f241 3288 	movw	r2, #5000	; 0x1388
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d901      	bls.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800d030:	2303      	movs	r3, #3
 800d032:	e036      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d034:	4b1d      	ldr	r3, [pc, #116]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d036:	6a1b      	ldr	r3, [r3, #32]
 800d038:	f003 0302 	and.w	r3, r3, #2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d0ee      	beq.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d040:	4b1a      	ldr	r3, [pc, #104]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d042:	6a1b      	ldr	r3, [r3, #32]
 800d044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	4917      	ldr	r1, [pc, #92]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d04e:	4313      	orrs	r3, r2
 800d050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d052:	7dfb      	ldrb	r3, [r7, #23]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d105      	bne.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d058:	4b14      	ldr	r3, [pc, #80]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d05a:	69db      	ldr	r3, [r3, #28]
 800d05c:	4a13      	ldr	r2, [pc, #76]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d05e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d008      	beq.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d070:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	490b      	ldr	r1, [pc, #44]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0310 	and.w	r3, r3, #16
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d008      	beq.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d08e:	4b07      	ldr	r3, [pc, #28]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	4904      	ldr	r1, [pc, #16]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d09c:	4313      	orrs	r3, r2
 800d09e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	40021000 	.word	0x40021000
 800d0b0:	40007000 	.word	0x40007000
 800d0b4:	42420440 	.word	0x42420440

0800d0b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d101      	bne.n	800d0ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e041      	b.n	800d14e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7f8 fdf4 	bl	8005ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f000 faca 	bl	800d690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	e041      	b.n	800d1ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f839 	bl	800d1f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2202      	movs	r2, #2
 800d186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	3304      	adds	r3, #4
 800d192:	4619      	mov	r1, r3
 800d194:	4610      	mov	r0, r2
 800d196:	f000 fa7b 	bl	800d690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	bc80      	pop	{r7}
 800d204:	4770      	bx	lr
	...

0800d208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d109      	bne.n	800d22c <HAL_TIM_PWM_Start+0x24>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	2b01      	cmp	r3, #1
 800d222:	bf14      	ite	ne
 800d224:	2301      	movne	r3, #1
 800d226:	2300      	moveq	r3, #0
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	e022      	b.n	800d272 <HAL_TIM_PWM_Start+0x6a>
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b04      	cmp	r3, #4
 800d230:	d109      	bne.n	800d246 <HAL_TIM_PWM_Start+0x3e>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	bf14      	ite	ne
 800d23e:	2301      	movne	r3, #1
 800d240:	2300      	moveq	r3, #0
 800d242:	b2db      	uxtb	r3, r3
 800d244:	e015      	b.n	800d272 <HAL_TIM_PWM_Start+0x6a>
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2b08      	cmp	r3, #8
 800d24a:	d109      	bne.n	800d260 <HAL_TIM_PWM_Start+0x58>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b01      	cmp	r3, #1
 800d256:	bf14      	ite	ne
 800d258:	2301      	movne	r3, #1
 800d25a:	2300      	moveq	r3, #0
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	e008      	b.n	800d272 <HAL_TIM_PWM_Start+0x6a>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b01      	cmp	r3, #1
 800d26a:	bf14      	ite	ne
 800d26c:	2301      	movne	r3, #1
 800d26e:	2300      	moveq	r3, #0
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e072      	b.n	800d360 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d104      	bne.n	800d28a <HAL_TIM_PWM_Start+0x82>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d288:	e013      	b.n	800d2b2 <HAL_TIM_PWM_Start+0xaa>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b04      	cmp	r3, #4
 800d28e:	d104      	bne.n	800d29a <HAL_TIM_PWM_Start+0x92>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2202      	movs	r2, #2
 800d294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d298:	e00b      	b.n	800d2b2 <HAL_TIM_PWM_Start+0xaa>
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2b08      	cmp	r3, #8
 800d29e:	d104      	bne.n	800d2aa <HAL_TIM_PWM_Start+0xa2>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2a8:	e003      	b.n	800d2b2 <HAL_TIM_PWM_Start+0xaa>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f000 fca4 	bl	800dc08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a28      	ldr	r2, [pc, #160]	; (800d368 <HAL_TIM_PWM_Start+0x160>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d004      	beq.n	800d2d4 <HAL_TIM_PWM_Start+0xcc>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a27      	ldr	r2, [pc, #156]	; (800d36c <HAL_TIM_PWM_Start+0x164>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d101      	bne.n	800d2d8 <HAL_TIM_PWM_Start+0xd0>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e000      	b.n	800d2da <HAL_TIM_PWM_Start+0xd2>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d007      	beq.n	800d2ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a1d      	ldr	r2, [pc, #116]	; (800d368 <HAL_TIM_PWM_Start+0x160>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d018      	beq.n	800d32a <HAL_TIM_PWM_Start+0x122>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a1b      	ldr	r2, [pc, #108]	; (800d36c <HAL_TIM_PWM_Start+0x164>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d013      	beq.n	800d32a <HAL_TIM_PWM_Start+0x122>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d30a:	d00e      	beq.n	800d32a <HAL_TIM_PWM_Start+0x122>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a17      	ldr	r2, [pc, #92]	; (800d370 <HAL_TIM_PWM_Start+0x168>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d009      	beq.n	800d32a <HAL_TIM_PWM_Start+0x122>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a16      	ldr	r2, [pc, #88]	; (800d374 <HAL_TIM_PWM_Start+0x16c>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d004      	beq.n	800d32a <HAL_TIM_PWM_Start+0x122>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a14      	ldr	r2, [pc, #80]	; (800d378 <HAL_TIM_PWM_Start+0x170>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d111      	bne.n	800d34e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	f003 0307 	and.w	r3, r3, #7
 800d334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b06      	cmp	r3, #6
 800d33a:	d010      	beq.n	800d35e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f042 0201 	orr.w	r2, r2, #1
 800d34a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d34c:	e007      	b.n	800d35e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f042 0201 	orr.w	r2, r2, #1
 800d35c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	40012c00 	.word	0x40012c00
 800d36c:	40013400 	.word	0x40013400
 800d370:	40000400 	.word	0x40000400
 800d374:	40000800 	.word	0x40000800
 800d378:	40000c00 	.word	0x40000c00

0800d37c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d392:	2b01      	cmp	r3, #1
 800d394:	d101      	bne.n	800d39a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d396:	2302      	movs	r3, #2
 800d398:	e0ae      	b.n	800d4f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b0c      	cmp	r3, #12
 800d3a6:	f200 809f 	bhi.w	800d4e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d3aa:	a201      	add	r2, pc, #4	; (adr r2, 800d3b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b0:	0800d3e5 	.word	0x0800d3e5
 800d3b4:	0800d4e9 	.word	0x0800d4e9
 800d3b8:	0800d4e9 	.word	0x0800d4e9
 800d3bc:	0800d4e9 	.word	0x0800d4e9
 800d3c0:	0800d425 	.word	0x0800d425
 800d3c4:	0800d4e9 	.word	0x0800d4e9
 800d3c8:	0800d4e9 	.word	0x0800d4e9
 800d3cc:	0800d4e9 	.word	0x0800d4e9
 800d3d0:	0800d467 	.word	0x0800d467
 800d3d4:	0800d4e9 	.word	0x0800d4e9
 800d3d8:	0800d4e9 	.word	0x0800d4e9
 800d3dc:	0800d4e9 	.word	0x0800d4e9
 800d3e0:	0800d4a7 	.word	0x0800d4a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68b9      	ldr	r1, [r7, #8]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 f9ca 	bl	800d784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	699a      	ldr	r2, [r3, #24]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f042 0208 	orr.w	r2, r2, #8
 800d3fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	699a      	ldr	r2, [r3, #24]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f022 0204 	bic.w	r2, r2, #4
 800d40e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6999      	ldr	r1, [r3, #24]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	691a      	ldr	r2, [r3, #16]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	430a      	orrs	r2, r1
 800d420:	619a      	str	r2, [r3, #24]
      break;
 800d422:	e064      	b.n	800d4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68b9      	ldr	r1, [r7, #8]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fa1a 	bl	800d864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d43e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	699a      	ldr	r2, [r3, #24]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d44e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6999      	ldr	r1, [r3, #24]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	021a      	lsls	r2, r3, #8
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	430a      	orrs	r2, r1
 800d462:	619a      	str	r2, [r3, #24]
      break;
 800d464:	e043      	b.n	800d4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 fa6d 	bl	800d94c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	69da      	ldr	r2, [r3, #28]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f042 0208 	orr.w	r2, r2, #8
 800d480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	69da      	ldr	r2, [r3, #28]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f022 0204 	bic.w	r2, r2, #4
 800d490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	69d9      	ldr	r1, [r3, #28]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	430a      	orrs	r2, r1
 800d4a2:	61da      	str	r2, [r3, #28]
      break;
 800d4a4:	e023      	b.n	800d4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68b9      	ldr	r1, [r7, #8]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fac1 	bl	800da34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	69da      	ldr	r2, [r3, #28]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	69da      	ldr	r2, [r3, #28]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	69d9      	ldr	r1, [r3, #28]
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	021a      	lsls	r2, r3, #8
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	61da      	str	r2, [r3, #28]
      break;
 800d4e6:	e002      	b.n	800d4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	75fb      	strb	r3, [r7, #23]
      break;
 800d4ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d514:	2b01      	cmp	r3, #1
 800d516:	d101      	bne.n	800d51c <HAL_TIM_ConfigClockSource+0x1c>
 800d518:	2302      	movs	r3, #2
 800d51a:	e0b4      	b.n	800d686 <HAL_TIM_ConfigClockSource+0x186>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2202      	movs	r2, #2
 800d528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d53a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d554:	d03e      	beq.n	800d5d4 <HAL_TIM_ConfigClockSource+0xd4>
 800d556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d55a:	f200 8087 	bhi.w	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d55e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d562:	f000 8086 	beq.w	800d672 <HAL_TIM_ConfigClockSource+0x172>
 800d566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d56a:	d87f      	bhi.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d56c:	2b70      	cmp	r3, #112	; 0x70
 800d56e:	d01a      	beq.n	800d5a6 <HAL_TIM_ConfigClockSource+0xa6>
 800d570:	2b70      	cmp	r3, #112	; 0x70
 800d572:	d87b      	bhi.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d574:	2b60      	cmp	r3, #96	; 0x60
 800d576:	d050      	beq.n	800d61a <HAL_TIM_ConfigClockSource+0x11a>
 800d578:	2b60      	cmp	r3, #96	; 0x60
 800d57a:	d877      	bhi.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d57c:	2b50      	cmp	r3, #80	; 0x50
 800d57e:	d03c      	beq.n	800d5fa <HAL_TIM_ConfigClockSource+0xfa>
 800d580:	2b50      	cmp	r3, #80	; 0x50
 800d582:	d873      	bhi.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d584:	2b40      	cmp	r3, #64	; 0x40
 800d586:	d058      	beq.n	800d63a <HAL_TIM_ConfigClockSource+0x13a>
 800d588:	2b40      	cmp	r3, #64	; 0x40
 800d58a:	d86f      	bhi.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d58c:	2b30      	cmp	r3, #48	; 0x30
 800d58e:	d064      	beq.n	800d65a <HAL_TIM_ConfigClockSource+0x15a>
 800d590:	2b30      	cmp	r3, #48	; 0x30
 800d592:	d86b      	bhi.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d594:	2b20      	cmp	r3, #32
 800d596:	d060      	beq.n	800d65a <HAL_TIM_ConfigClockSource+0x15a>
 800d598:	2b20      	cmp	r3, #32
 800d59a:	d867      	bhi.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d05c      	beq.n	800d65a <HAL_TIM_ConfigClockSource+0x15a>
 800d5a0:	2b10      	cmp	r3, #16
 800d5a2:	d05a      	beq.n	800d65a <HAL_TIM_ConfigClockSource+0x15a>
 800d5a4:	e062      	b.n	800d66c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6818      	ldr	r0, [r3, #0]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	6899      	ldr	r1, [r3, #8]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	f000 fb08 	bl	800dbca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d5c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	609a      	str	r2, [r3, #8]
      break;
 800d5d2:	e04f      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6818      	ldr	r0, [r3, #0]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	6899      	ldr	r1, [r3, #8]
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	685a      	ldr	r2, [r3, #4]
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	f000 faf1 	bl	800dbca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	689a      	ldr	r2, [r3, #8]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5f6:	609a      	str	r2, [r3, #8]
      break;
 800d5f8:	e03c      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	6859      	ldr	r1, [r3, #4]
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	461a      	mov	r2, r3
 800d608:	f000 fa68 	bl	800dadc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2150      	movs	r1, #80	; 0x50
 800d612:	4618      	mov	r0, r3
 800d614:	f000 fabf 	bl	800db96 <TIM_ITRx_SetConfig>
      break;
 800d618:	e02c      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	6859      	ldr	r1, [r3, #4]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	461a      	mov	r2, r3
 800d628:	f000 fa86 	bl	800db38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2160      	movs	r1, #96	; 0x60
 800d632:	4618      	mov	r0, r3
 800d634:	f000 faaf 	bl	800db96 <TIM_ITRx_SetConfig>
      break;
 800d638:	e01c      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	6859      	ldr	r1, [r3, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	461a      	mov	r2, r3
 800d648:	f000 fa48 	bl	800dadc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2140      	movs	r1, #64	; 0x40
 800d652:	4618      	mov	r0, r3
 800d654:	f000 fa9f 	bl	800db96 <TIM_ITRx_SetConfig>
      break;
 800d658:	e00c      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4619      	mov	r1, r3
 800d664:	4610      	mov	r0, r2
 800d666:	f000 fa96 	bl	800db96 <TIM_ITRx_SetConfig>
      break;
 800d66a:	e003      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	73fb      	strb	r3, [r7, #15]
      break;
 800d670:	e000      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d684:	7bfb      	ldrb	r3, [r7, #15]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
	...

0800d690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	4a33      	ldr	r2, [pc, #204]	; (800d770 <TIM_Base_SetConfig+0xe0>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d013      	beq.n	800d6d0 <TIM_Base_SetConfig+0x40>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4a32      	ldr	r2, [pc, #200]	; (800d774 <TIM_Base_SetConfig+0xe4>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d00f      	beq.n	800d6d0 <TIM_Base_SetConfig+0x40>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6b6:	d00b      	beq.n	800d6d0 <TIM_Base_SetConfig+0x40>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a2f      	ldr	r2, [pc, #188]	; (800d778 <TIM_Base_SetConfig+0xe8>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d007      	beq.n	800d6d0 <TIM_Base_SetConfig+0x40>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a2e      	ldr	r2, [pc, #184]	; (800d77c <TIM_Base_SetConfig+0xec>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d003      	beq.n	800d6d0 <TIM_Base_SetConfig+0x40>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a2d      	ldr	r2, [pc, #180]	; (800d780 <TIM_Base_SetConfig+0xf0>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d108      	bne.n	800d6e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a22      	ldr	r2, [pc, #136]	; (800d770 <TIM_Base_SetConfig+0xe0>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d013      	beq.n	800d712 <TIM_Base_SetConfig+0x82>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a21      	ldr	r2, [pc, #132]	; (800d774 <TIM_Base_SetConfig+0xe4>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d00f      	beq.n	800d712 <TIM_Base_SetConfig+0x82>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6f8:	d00b      	beq.n	800d712 <TIM_Base_SetConfig+0x82>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a1e      	ldr	r2, [pc, #120]	; (800d778 <TIM_Base_SetConfig+0xe8>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d007      	beq.n	800d712 <TIM_Base_SetConfig+0x82>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a1d      	ldr	r2, [pc, #116]	; (800d77c <TIM_Base_SetConfig+0xec>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d003      	beq.n	800d712 <TIM_Base_SetConfig+0x82>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a1c      	ldr	r2, [pc, #112]	; (800d780 <TIM_Base_SetConfig+0xf0>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d108      	bne.n	800d724 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	4313      	orrs	r3, r2
 800d722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	4313      	orrs	r3, r2
 800d730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	689a      	ldr	r2, [r3, #8]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a09      	ldr	r2, [pc, #36]	; (800d770 <TIM_Base_SetConfig+0xe0>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d003      	beq.n	800d758 <TIM_Base_SetConfig+0xc8>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a08      	ldr	r2, [pc, #32]	; (800d774 <TIM_Base_SetConfig+0xe4>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d103      	bne.n	800d760 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	691a      	ldr	r2, [r3, #16]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	615a      	str	r2, [r3, #20]
}
 800d766:	bf00      	nop
 800d768:	3714      	adds	r7, #20
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bc80      	pop	{r7}
 800d76e:	4770      	bx	lr
 800d770:	40012c00 	.word	0x40012c00
 800d774:	40013400 	.word	0x40013400
 800d778:	40000400 	.word	0x40000400
 800d77c:	40000800 	.word	0x40000800
 800d780:	40000c00 	.word	0x40000c00

0800d784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a1b      	ldr	r3, [r3, #32]
 800d792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a1b      	ldr	r3, [r3, #32]
 800d798:	f023 0201 	bic.w	r2, r3, #1
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f023 0303 	bic.w	r3, r3, #3
 800d7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f023 0302 	bic.w	r3, r3, #2
 800d7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a20      	ldr	r2, [pc, #128]	; (800d85c <TIM_OC1_SetConfig+0xd8>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d003      	beq.n	800d7e8 <TIM_OC1_SetConfig+0x64>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a1f      	ldr	r2, [pc, #124]	; (800d860 <TIM_OC1_SetConfig+0xdc>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d10c      	bne.n	800d802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	f023 0308 	bic.w	r3, r3, #8
 800d7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f023 0304 	bic.w	r3, r3, #4
 800d800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a15      	ldr	r2, [pc, #84]	; (800d85c <TIM_OC1_SetConfig+0xd8>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d003      	beq.n	800d812 <TIM_OC1_SetConfig+0x8e>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a14      	ldr	r2, [pc, #80]	; (800d860 <TIM_OC1_SetConfig+0xdc>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d111      	bne.n	800d836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	4313      	orrs	r3, r2
 800d82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	699b      	ldr	r3, [r3, #24]
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	4313      	orrs	r3, r2
 800d834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	685a      	ldr	r2, [r3, #4]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	697a      	ldr	r2, [r7, #20]
 800d84e:	621a      	str	r2, [r3, #32]
}
 800d850:	bf00      	nop
 800d852:	371c      	adds	r7, #28
 800d854:	46bd      	mov	sp, r7
 800d856:	bc80      	pop	{r7}
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	40012c00 	.word	0x40012c00
 800d860:	40013400 	.word	0x40013400

0800d864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d864:	b480      	push	{r7}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a1b      	ldr	r3, [r3, #32]
 800d878:	f023 0210 	bic.w	r2, r3, #16
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	021b      	lsls	r3, r3, #8
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	f023 0320 	bic.w	r3, r3, #32
 800d8ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	011b      	lsls	r3, r3, #4
 800d8b6:	697a      	ldr	r2, [r7, #20]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a21      	ldr	r2, [pc, #132]	; (800d944 <TIM_OC2_SetConfig+0xe0>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d003      	beq.n	800d8cc <TIM_OC2_SetConfig+0x68>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a20      	ldr	r2, [pc, #128]	; (800d948 <TIM_OC2_SetConfig+0xe4>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d10d      	bne.n	800d8e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	011b      	lsls	r3, r3, #4
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a16      	ldr	r2, [pc, #88]	; (800d944 <TIM_OC2_SetConfig+0xe0>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d003      	beq.n	800d8f8 <TIM_OC2_SetConfig+0x94>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a15      	ldr	r2, [pc, #84]	; (800d948 <TIM_OC2_SetConfig+0xe4>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d113      	bne.n	800d920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	695b      	ldr	r3, [r3, #20]
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	4313      	orrs	r3, r2
 800d912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	693a      	ldr	r2, [r7, #16]
 800d924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	621a      	str	r2, [r3, #32]
}
 800d93a:	bf00      	nop
 800d93c:	371c      	adds	r7, #28
 800d93e:	46bd      	mov	sp, r7
 800d940:	bc80      	pop	{r7}
 800d942:	4770      	bx	lr
 800d944:	40012c00 	.word	0x40012c00
 800d948:	40013400 	.word	0x40013400

0800d94c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b087      	sub	sp, #28
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6a1b      	ldr	r3, [r3, #32]
 800d95a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a1b      	ldr	r3, [r3, #32]
 800d960:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f023 0303 	bic.w	r3, r3, #3
 800d982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	697a      	ldr	r2, [r7, #20]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4a21      	ldr	r2, [pc, #132]	; (800da2c <TIM_OC3_SetConfig+0xe0>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d003      	beq.n	800d9b2 <TIM_OC3_SetConfig+0x66>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4a20      	ldr	r2, [pc, #128]	; (800da30 <TIM_OC3_SetConfig+0xe4>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d10d      	bne.n	800d9ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	021b      	lsls	r3, r3, #8
 800d9c0:	697a      	ldr	r2, [r7, #20]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a16      	ldr	r2, [pc, #88]	; (800da2c <TIM_OC3_SetConfig+0xe0>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d003      	beq.n	800d9de <TIM_OC3_SetConfig+0x92>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4a15      	ldr	r2, [pc, #84]	; (800da30 <TIM_OC3_SetConfig+0xe4>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d113      	bne.n	800da06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	011b      	lsls	r3, r3, #4
 800da00:	693a      	ldr	r2, [r7, #16]
 800da02:	4313      	orrs	r3, r2
 800da04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	621a      	str	r2, [r3, #32]
}
 800da20:	bf00      	nop
 800da22:	371c      	adds	r7, #28
 800da24:	46bd      	mov	sp, r7
 800da26:	bc80      	pop	{r7}
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	40012c00 	.word	0x40012c00
 800da30:	40013400 	.word	0x40013400

0800da34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da34:	b480      	push	{r7}
 800da36:	b087      	sub	sp, #28
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a1b      	ldr	r3, [r3, #32]
 800da42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6a1b      	ldr	r3, [r3, #32]
 800da48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	021b      	lsls	r3, r3, #8
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	4313      	orrs	r3, r2
 800da76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	031b      	lsls	r3, r3, #12
 800da86:	693a      	ldr	r2, [r7, #16]
 800da88:	4313      	orrs	r3, r2
 800da8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a11      	ldr	r2, [pc, #68]	; (800dad4 <TIM_OC4_SetConfig+0xa0>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d003      	beq.n	800da9c <TIM_OC4_SetConfig+0x68>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a10      	ldr	r2, [pc, #64]	; (800dad8 <TIM_OC4_SetConfig+0xa4>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d109      	bne.n	800dab0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800daa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	019b      	lsls	r3, r3, #6
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	4313      	orrs	r3, r2
 800daae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	621a      	str	r2, [r3, #32]
}
 800daca:	bf00      	nop
 800dacc:	371c      	adds	r7, #28
 800dace:	46bd      	mov	sp, r7
 800dad0:	bc80      	pop	{r7}
 800dad2:	4770      	bx	lr
 800dad4:	40012c00 	.word	0x40012c00
 800dad8:	40013400 	.word	0x40013400

0800dadc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dadc:	b480      	push	{r7}
 800dade:	b087      	sub	sp, #28
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6a1b      	ldr	r3, [r3, #32]
 800daec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	f023 0201 	bic.w	r2, r3, #1
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	011b      	lsls	r3, r3, #4
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	4313      	orrs	r3, r2
 800db10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	f023 030a 	bic.w	r3, r3, #10
 800db18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db1a:	697a      	ldr	r2, [r7, #20]
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	4313      	orrs	r3, r2
 800db20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	693a      	ldr	r2, [r7, #16]
 800db26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	621a      	str	r2, [r3, #32]
}
 800db2e:	bf00      	nop
 800db30:	371c      	adds	r7, #28
 800db32:	46bd      	mov	sp, r7
 800db34:	bc80      	pop	{r7}
 800db36:	4770      	bx	lr

0800db38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db38:	b480      	push	{r7}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	f023 0210 	bic.w	r2, r3, #16
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	031b      	lsls	r3, r3, #12
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	011b      	lsls	r3, r3, #4
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	621a      	str	r2, [r3, #32]
}
 800db8c:	bf00      	nop
 800db8e:	371c      	adds	r7, #28
 800db90:	46bd      	mov	sp, r7
 800db92:	bc80      	pop	{r7}
 800db94:	4770      	bx	lr

0800db96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db96:	b480      	push	{r7}
 800db98:	b085      	sub	sp, #20
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	f043 0307 	orr.w	r3, r3, #7
 800dbb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	609a      	str	r2, [r3, #8]
}
 800dbc0:	bf00      	nop
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bc80      	pop	{r7}
 800dbc8:	4770      	bx	lr

0800dbca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbca:	b480      	push	{r7}
 800dbcc:	b087      	sub	sp, #28
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	60f8      	str	r0, [r7, #12]
 800dbd2:	60b9      	str	r1, [r7, #8]
 800dbd4:	607a      	str	r2, [r7, #4]
 800dbd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbe4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	021a      	lsls	r2, r3, #8
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	431a      	orrs	r2, r3
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	609a      	str	r2, [r3, #8]
}
 800dbfe:	bf00      	nop
 800dc00:	371c      	adds	r7, #28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bc80      	pop	{r7}
 800dc06:	4770      	bx	lr

0800dc08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b087      	sub	sp, #28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f003 031f 	and.w	r3, r3, #31
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6a1a      	ldr	r2, [r3, #32]
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	43db      	mvns	r3, r3
 800dc2a:	401a      	ands	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6a1a      	ldr	r2, [r3, #32]
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f003 031f 	and.w	r3, r3, #31
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc40:	431a      	orrs	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	621a      	str	r2, [r3, #32]
}
 800dc46:	bf00      	nop
 800dc48:	371c      	adds	r7, #28
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bc80      	pop	{r7}
 800dc4e:	4770      	bx	lr

0800dc50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d101      	bne.n	800dc68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc64:	2302      	movs	r3, #2
 800dc66:	e050      	b.n	800dd0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2202      	movs	r2, #2
 800dc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a1b      	ldr	r2, [pc, #108]	; (800dd14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d018      	beq.n	800dcde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a19      	ldr	r2, [pc, #100]	; (800dd18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d013      	beq.n	800dcde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcbe:	d00e      	beq.n	800dcde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a15      	ldr	r2, [pc, #84]	; (800dd1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d009      	beq.n	800dcde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a14      	ldr	r2, [pc, #80]	; (800dd20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d004      	beq.n	800dcde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a12      	ldr	r2, [pc, #72]	; (800dd24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d10c      	bne.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	4313      	orrs	r3, r2
 800dcee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68ba      	ldr	r2, [r7, #8]
 800dcf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bc80      	pop	{r7}
 800dd12:	4770      	bx	lr
 800dd14:	40012c00 	.word	0x40012c00
 800dd18:	40013400 	.word	0x40013400
 800dd1c:	40000400 	.word	0x40000400
 800dd20:	40000800 	.word	0x40000800
 800dd24:	40000c00 	.word	0x40000c00

0800dd28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d101      	bne.n	800dd3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	e042      	b.n	800ddc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d106      	bne.n	800dd54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7f8 f91a 	bl	8005f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2224      	movs	r2, #36	; 0x24
 800dd58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68da      	ldr	r2, [r3, #12]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dd6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fa07 	bl	800e180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	691a      	ldr	r2, [r3, #16]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	695a      	ldr	r2, [r3, #20]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	68da      	ldr	r2, [r3, #12]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dda0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2220      	movs	r2, #32
 800ddb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e04a      	b.n	800de70 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7f8 f8ca 	bl	8005f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2224      	movs	r2, #36	; 0x24
 800ddf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68da      	ldr	r2, [r3, #12]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f9b7 	bl	800e180 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	691a      	ldr	r2, [r3, #16]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	695a      	ldr	r2, [r3, #20]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800de30:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	695a      	ldr	r2, [r3, #20]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f042 0208 	orr.w	r2, r2, #8
 800de40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68da      	ldr	r2, [r3, #12]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2220      	movs	r2, #32
 800de5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2220      	movs	r2, #32
 800de64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08a      	sub	sp, #40	; 0x28
 800de7c:	af02      	add	r7, sp, #8
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	603b      	str	r3, [r7, #0]
 800de84:	4613      	mov	r3, r2
 800de86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800de88:	2300      	movs	r3, #0
 800de8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b20      	cmp	r3, #32
 800de96:	d16d      	bne.n	800df74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <HAL_UART_Transmit+0x2c>
 800de9e:	88fb      	ldrh	r3, [r7, #6]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e066      	b.n	800df76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2200      	movs	r2, #0
 800deac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2221      	movs	r2, #33	; 0x21
 800deb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deb6:	f7f8 f999 	bl	80061ec <HAL_GetTick>
 800deba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	88fa      	ldrh	r2, [r7, #6]
 800dec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	88fa      	ldrh	r2, [r7, #6]
 800dec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ded0:	d108      	bne.n	800dee4 <HAL_UART_Transmit+0x6c>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d104      	bne.n	800dee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800deda:	2300      	movs	r3, #0
 800dedc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	61bb      	str	r3, [r7, #24]
 800dee2:	e003      	b.n	800deec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dee8:	2300      	movs	r3, #0
 800deea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800deec:	e02a      	b.n	800df44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2200      	movs	r2, #0
 800def6:	2180      	movs	r1, #128	; 0x80
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f000 f8d2 	bl	800e0a2 <UART_WaitOnFlagUntilTimeout>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e036      	b.n	800df76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10b      	bne.n	800df26 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	461a      	mov	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	3302      	adds	r3, #2
 800df22:	61bb      	str	r3, [r7, #24]
 800df24:	e007      	b.n	800df36 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	781a      	ldrb	r2, [r3, #0]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	3301      	adds	r3, #1
 800df34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	3b01      	subs	r3, #1
 800df3e:	b29a      	uxth	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800df48:	b29b      	uxth	r3, r3
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1cf      	bne.n	800deee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2200      	movs	r2, #0
 800df56:	2140      	movs	r1, #64	; 0x40
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 f8a2 	bl	800e0a2 <UART_WaitOnFlagUntilTimeout>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800df64:	2303      	movs	r3, #3
 800df66:	e006      	b.n	800df76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2220      	movs	r2, #32
 800df6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800df70:	2300      	movs	r3, #0
 800df72:	e000      	b.n	800df76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800df74:	2302      	movs	r3, #2
  }
}
 800df76:	4618      	mov	r0, r3
 800df78:	3720      	adds	r7, #32
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b08a      	sub	sp, #40	; 0x28
 800df82:	af02      	add	r7, sp, #8
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	603b      	str	r3, [r7, #0]
 800df8a:	4613      	mov	r3, r2
 800df8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800df8e:	2300      	movs	r3, #0
 800df90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b20      	cmp	r3, #32
 800df9c:	d17c      	bne.n	800e098 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <HAL_UART_Receive+0x2c>
 800dfa4:	88fb      	ldrh	r3, [r7, #6]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e075      	b.n	800e09a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2222      	movs	r2, #34	; 0x22
 800dfb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfc2:	f7f8 f913 	bl	80061ec <HAL_GetTick>
 800dfc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	88fa      	ldrh	r2, [r7, #6]
 800dfcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	88fa      	ldrh	r2, [r7, #6]
 800dfd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfdc:	d108      	bne.n	800dff0 <HAL_UART_Receive+0x72>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d104      	bne.n	800dff0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	61bb      	str	r3, [r7, #24]
 800dfee:	e003      	b.n	800dff8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dff4:	2300      	movs	r3, #0
 800dff6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800dff8:	e043      	b.n	800e082 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2200      	movs	r2, #0
 800e002:	2120      	movs	r1, #32
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f000 f84c 	bl	800e0a2 <UART_WaitOnFlagUntilTimeout>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800e010:	2303      	movs	r3, #3
 800e012:	e042      	b.n	800e09a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10c      	bne.n	800e034 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	b29b      	uxth	r3, r3
 800e022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e026:	b29a      	uxth	r2, r3
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	3302      	adds	r3, #2
 800e030:	61bb      	str	r3, [r7, #24]
 800e032:	e01f      	b.n	800e074 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e03c:	d007      	beq.n	800e04e <HAL_UART_Receive+0xd0>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10a      	bne.n	800e05c <HAL_UART_Receive+0xde>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d106      	bne.n	800e05c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	b2da      	uxtb	r2, r3
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	701a      	strb	r2, [r3, #0]
 800e05a:	e008      	b.n	800e06e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	3301      	adds	r3, #1
 800e072:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e078:	b29b      	uxth	r3, r3
 800e07a:	3b01      	subs	r3, #1
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e086:	b29b      	uxth	r3, r3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1b6      	bne.n	800dffa <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2220      	movs	r2, #32
 800e090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800e094:	2300      	movs	r3, #0
 800e096:	e000      	b.n	800e09a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e098:	2302      	movs	r3, #2
  }
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3720      	adds	r7, #32
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b090      	sub	sp, #64	; 0x40
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	60f8      	str	r0, [r7, #12]
 800e0aa:	60b9      	str	r1, [r7, #8]
 800e0ac:	603b      	str	r3, [r7, #0]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0b2:	e050      	b.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ba:	d04c      	beq.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d007      	beq.n	800e0d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800e0c2:	f7f8 f893 	bl	80061ec <HAL_GetTick>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	1ad3      	subs	r3, r2, r3
 800e0cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d241      	bcs.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	330c      	adds	r3, #12
 800e0d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	e853 3f00 	ldrex	r3, [r3]
 800e0e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	330c      	adds	r3, #12
 800e0f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0f2:	637a      	str	r2, [r7, #52]	; 0x34
 800e0f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0fa:	e841 2300 	strex	r3, r2, [r1]
 800e0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1e5      	bne.n	800e0d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3314      	adds	r3, #20
 800e10c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	e853 3f00 	ldrex	r3, [r3]
 800e114:	613b      	str	r3, [r7, #16]
   return(result);
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	f023 0301 	bic.w	r3, r3, #1
 800e11c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3314      	adds	r3, #20
 800e124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e126:	623a      	str	r2, [r7, #32]
 800e128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e12a:	69f9      	ldr	r1, [r7, #28]
 800e12c:	6a3a      	ldr	r2, [r7, #32]
 800e12e:	e841 2300 	strex	r3, r2, [r1]
 800e132:	61bb      	str	r3, [r7, #24]
   return(result);
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1e5      	bne.n	800e106 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2220      	movs	r2, #32
 800e13e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2220      	movs	r2, #32
 800e146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800e152:	2303      	movs	r3, #3
 800e154:	e00f      	b.n	800e176 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	4013      	ands	r3, r2
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	429a      	cmp	r2, r3
 800e164:	bf0c      	ite	eq
 800e166:	2301      	moveq	r3, #1
 800e168:	2300      	movne	r3, #0
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	461a      	mov	r2, r3
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	429a      	cmp	r2, r3
 800e172:	d09f      	beq.n	800e0b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3740      	adds	r7, #64	; 0x40
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
	...

0800e180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	68da      	ldr	r2, [r3, #12]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	430a      	orrs	r2, r1
 800e19c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	689a      	ldr	r2, [r3, #8]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	431a      	orrs	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e1ba:	f023 030c 	bic.w	r3, r3, #12
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	6812      	ldr	r2, [r2, #0]
 800e1c2:	68b9      	ldr	r1, [r7, #8]
 800e1c4:	430b      	orrs	r3, r1
 800e1c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	695b      	ldr	r3, [r3, #20]
 800e1ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	699a      	ldr	r2, [r3, #24]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a2c      	ldr	r2, [pc, #176]	; (800e294 <UART_SetConfig+0x114>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d103      	bne.n	800e1f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e1e8:	f7fe fe7e 	bl	800cee8 <HAL_RCC_GetPCLK2Freq>
 800e1ec:	60f8      	str	r0, [r7, #12]
 800e1ee:	e002      	b.n	800e1f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e1f0:	f7fe fe66 	bl	800cec0 <HAL_RCC_GetPCLK1Freq>
 800e1f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	009a      	lsls	r2, r3, #2
 800e200:	441a      	add	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	fbb2 f3f3 	udiv	r3, r2, r3
 800e20c:	4a22      	ldr	r2, [pc, #136]	; (800e298 <UART_SetConfig+0x118>)
 800e20e:	fba2 2303 	umull	r2, r3, r2, r3
 800e212:	095b      	lsrs	r3, r3, #5
 800e214:	0119      	lsls	r1, r3, #4
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	009a      	lsls	r2, r3, #2
 800e220:	441a      	add	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	fbb2 f2f3 	udiv	r2, r2, r3
 800e22c:	4b1a      	ldr	r3, [pc, #104]	; (800e298 <UART_SetConfig+0x118>)
 800e22e:	fba3 0302 	umull	r0, r3, r3, r2
 800e232:	095b      	lsrs	r3, r3, #5
 800e234:	2064      	movs	r0, #100	; 0x64
 800e236:	fb00 f303 	mul.w	r3, r0, r3
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	011b      	lsls	r3, r3, #4
 800e23e:	3332      	adds	r3, #50	; 0x32
 800e240:	4a15      	ldr	r2, [pc, #84]	; (800e298 <UART_SetConfig+0x118>)
 800e242:	fba2 2303 	umull	r2, r3, r2, r3
 800e246:	095b      	lsrs	r3, r3, #5
 800e248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e24c:	4419      	add	r1, r3
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	4613      	mov	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	009a      	lsls	r2, r3, #2
 800e258:	441a      	add	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	fbb2 f2f3 	udiv	r2, r2, r3
 800e264:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <UART_SetConfig+0x118>)
 800e266:	fba3 0302 	umull	r0, r3, r3, r2
 800e26a:	095b      	lsrs	r3, r3, #5
 800e26c:	2064      	movs	r0, #100	; 0x64
 800e26e:	fb00 f303 	mul.w	r3, r0, r3
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	011b      	lsls	r3, r3, #4
 800e276:	3332      	adds	r3, #50	; 0x32
 800e278:	4a07      	ldr	r2, [pc, #28]	; (800e298 <UART_SetConfig+0x118>)
 800e27a:	fba2 2303 	umull	r2, r3, r2, r3
 800e27e:	095b      	lsrs	r3, r3, #5
 800e280:	f003 020f 	and.w	r2, r3, #15
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	440a      	add	r2, r1
 800e28a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e28c:	bf00      	nop
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	40013800 	.word	0x40013800
 800e298:	51eb851f 	.word	0x51eb851f

0800e29c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e29c:	b084      	sub	sp, #16
 800e29e:	b480      	push	{r7}
 800e2a0:	b083      	sub	sp, #12
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	f107 0014 	add.w	r0, r7, #20
 800e2aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bc80      	pop	{r7}
 800e2b8:	b004      	add	sp, #16
 800e2ba:	4770      	bx	lr

0800e2bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e2cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e2d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3714      	adds	r7, #20
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bc80      	pop	{r7}
 800e2e6:	4770      	bx	lr

0800e2e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e2f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e2f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	b29b      	uxth	r3, r3
 800e302:	43db      	mvns	r3, r3
 800e304:	b29b      	uxth	r3, r3
 800e306:	4013      	ands	r3, r2
 800e308:	b29a      	uxth	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3714      	adds	r7, #20
 800e316:	46bd      	mov	sp, r7
 800e318:	bc80      	pop	{r7}
 800e31a:	4770      	bx	lr

0800e31c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	460b      	mov	r3, r1
 800e326:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	370c      	adds	r7, #12
 800e32e:	46bd      	mov	sp, r7
 800e330:	bc80      	pop	{r7}
 800e332:	4770      	bx	lr

0800e334 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e334:	b084      	sub	sp, #16
 800e336:	b480      	push	{r7}
 800e338:	b083      	sub	sp, #12
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	f107 0014 	add.w	r0, r7, #20
 800e342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2201      	movs	r2, #1
 800e34a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2200      	movs	r2, #0
 800e362:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bc80      	pop	{r7}
 800e370:	b004      	add	sp, #16
 800e372:	4770      	bx	lr

0800e374 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e374:	b480      	push	{r7}
 800e376:	b09d      	sub	sp, #116	; 0x74
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e37e:	2300      	movs	r3, #0
 800e380:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	4413      	add	r3, r2
 800e38e:	881b      	ldrh	r3, [r3, #0]
 800e390:	b29b      	uxth	r3, r3
 800e392:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800e396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e39a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	78db      	ldrb	r3, [r3, #3]
 800e3a2:	2b03      	cmp	r3, #3
 800e3a4:	d81f      	bhi.n	800e3e6 <USB_ActivateEndpoint+0x72>
 800e3a6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ac <USB_ActivateEndpoint+0x38>)
 800e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ac:	0800e3bd 	.word	0x0800e3bd
 800e3b0:	0800e3d9 	.word	0x0800e3d9
 800e3b4:	0800e3ef 	.word	0x0800e3ef
 800e3b8:	0800e3cb 	.word	0x0800e3cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e3bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e3c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e3c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e3c8:	e012      	b.n	800e3f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e3ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e3ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800e3d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e3d6:	e00b      	b.n	800e3f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e3d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e3dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e3e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e3e4:	e004      	b.n	800e3f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800e3ec:	e000      	b.n	800e3f0 <USB_ActivateEndpoint+0x7c>
      break;
 800e3ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	441a      	add	r2, r3
 800e3fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e3fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e40a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e40e:	b29b      	uxth	r3, r3
 800e410:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4413      	add	r3, r2
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e428:	b29a      	uxth	r2, r3
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	4313      	orrs	r3, r2
 800e432:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	441a      	add	r2, r3
 800e440:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e44c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e454:	b29b      	uxth	r3, r3
 800e456:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	7b1b      	ldrb	r3, [r3, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f040 8178 	bne.w	800e752 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	785b      	ldrb	r3, [r3, #1]
 800e466:	2b00      	cmp	r3, #0
 800e468:	f000 8084 	beq.w	800e574 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	61bb      	str	r3, [r7, #24]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e476:	b29b      	uxth	r3, r3
 800e478:	461a      	mov	r2, r3
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	4413      	add	r3, r2
 800e47e:	61bb      	str	r3, [r7, #24]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	011a      	lsls	r2, r3, #4
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	4413      	add	r3, r2
 800e48a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	88db      	ldrh	r3, [r3, #6]
 800e494:	085b      	lsrs	r3, r3, #1
 800e496:	b29b      	uxth	r3, r3
 800e498:	005b      	lsls	r3, r3, #1
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	881b      	ldrh	r3, [r3, #0]
 800e4ac:	827b      	strh	r3, [r7, #18]
 800e4ae:	8a7b      	ldrh	r3, [r7, #18]
 800e4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d01b      	beq.n	800e4f0 <USB_ActivateEndpoint+0x17c>
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	881b      	ldrh	r3, [r3, #0]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4ce:	823b      	strh	r3, [r7, #16]
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	441a      	add	r2, r3
 800e4da:	8a3b      	ldrh	r3, [r7, #16]
 800e4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	78db      	ldrb	r3, [r3, #3]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d020      	beq.n	800e53a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	881b      	ldrh	r3, [r3, #0]
 800e504:	b29b      	uxth	r3, r3
 800e506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e50a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e50e:	81bb      	strh	r3, [r7, #12]
 800e510:	89bb      	ldrh	r3, [r7, #12]
 800e512:	f083 0320 	eor.w	r3, r3, #32
 800e516:	81bb      	strh	r3, [r7, #12]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	441a      	add	r2, r3
 800e522:	89bb      	ldrh	r3, [r7, #12]
 800e524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e52c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e534:	b29b      	uxth	r3, r3
 800e536:	8013      	strh	r3, [r2, #0]
 800e538:	e2d5      	b.n	800eae6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	881b      	ldrh	r3, [r3, #0]
 800e546:	b29b      	uxth	r3, r3
 800e548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e550:	81fb      	strh	r3, [r7, #14]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	441a      	add	r2, r3
 800e55c:	89fb      	ldrh	r3, [r7, #14]
 800e55e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e56e:	b29b      	uxth	r3, r3
 800e570:	8013      	strh	r3, [r2, #0]
 800e572:	e2b8      	b.n	800eae6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	633b      	str	r3, [r7, #48]	; 0x30
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e57e:	b29b      	uxth	r3, r3
 800e580:	461a      	mov	r2, r3
 800e582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e584:	4413      	add	r3, r2
 800e586:	633b      	str	r3, [r7, #48]	; 0x30
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	011a      	lsls	r2, r3, #4
 800e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e590:	4413      	add	r3, r2
 800e592:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e596:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	88db      	ldrh	r3, [r3, #6]
 800e59c:	085b      	lsrs	r3, r3, #1
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	005b      	lsls	r3, r3, #1
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b8:	4413      	add	r3, r2
 800e5ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	011a      	lsls	r2, r3, #4
 800e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	881b      	ldrh	r3, [r3, #0]
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	801a      	strh	r2, [r3, #0]
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	691b      	ldr	r3, [r3, #16]
 800e5e0:	2b3e      	cmp	r3, #62	; 0x3e
 800e5e2:	d91d      	bls.n	800e620 <USB_ActivateEndpoint+0x2ac>
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	691b      	ldr	r3, [r3, #16]
 800e5e8:	095b      	lsrs	r3, r3, #5
 800e5ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	f003 031f 	and.w	r3, r3, #31
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d102      	bne.n	800e5fe <USB_ActivateEndpoint+0x28a>
 800e5f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	b29a      	uxth	r2, r3
 800e604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e606:	b29b      	uxth	r3, r3
 800e608:	029b      	lsls	r3, r3, #10
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	4313      	orrs	r3, r2
 800e60e:	b29b      	uxth	r3, r3
 800e610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e618:	b29a      	uxth	r2, r3
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	801a      	strh	r2, [r3, #0]
 800e61e:	e026      	b.n	800e66e <USB_ActivateEndpoint+0x2fa>
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	691b      	ldr	r3, [r3, #16]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10a      	bne.n	800e63e <USB_ActivateEndpoint+0x2ca>
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	881b      	ldrh	r3, [r3, #0]
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e636:	b29a      	uxth	r2, r3
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	801a      	strh	r2, [r3, #0]
 800e63c:	e017      	b.n	800e66e <USB_ActivateEndpoint+0x2fa>
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	085b      	lsrs	r3, r3, #1
 800e644:	66bb      	str	r3, [r7, #104]	; 0x68
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <USB_ActivateEndpoint+0x2e4>
 800e652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e654:	3301      	adds	r3, #1
 800e656:	66bb      	str	r3, [r7, #104]	; 0x68
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e660:	b29b      	uxth	r3, r3
 800e662:	029b      	lsls	r3, r3, #10
 800e664:	b29b      	uxth	r3, r3
 800e666:	4313      	orrs	r3, r2
 800e668:	b29a      	uxth	r2, r3
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	881b      	ldrh	r3, [r3, #0]
 800e67a:	847b      	strh	r3, [r7, #34]	; 0x22
 800e67c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e67e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e682:	2b00      	cmp	r3, #0
 800e684:	d01b      	beq.n	800e6be <USB_ActivateEndpoint+0x34a>
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	b29b      	uxth	r3, r3
 800e694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e69c:	843b      	strh	r3, [r7, #32]
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	441a      	add	r2, r3
 800e6a8:	8c3b      	ldrh	r3, [r7, #32]
 800e6aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d124      	bne.n	800e710 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6dc:	83bb      	strh	r3, [r7, #28]
 800e6de:	8bbb      	ldrh	r3, [r7, #28]
 800e6e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e6e4:	83bb      	strh	r3, [r7, #28]
 800e6e6:	8bbb      	ldrh	r3, [r7, #28]
 800e6e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e6ec:	83bb      	strh	r3, [r7, #28]
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	441a      	add	r2, r3
 800e6f8:	8bbb      	ldrh	r3, [r7, #28]
 800e6fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	8013      	strh	r3, [r2, #0]
 800e70e:	e1ea      	b.n	800eae6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4413      	add	r3, r2
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e726:	83fb      	strh	r3, [r7, #30]
 800e728:	8bfb      	ldrh	r3, [r7, #30]
 800e72a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e72e:	83fb      	strh	r3, [r7, #30]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	441a      	add	r2, r3
 800e73a:	8bfb      	ldrh	r3, [r7, #30]
 800e73c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	8013      	strh	r3, [r2, #0]
 800e750:	e1c9      	b.n	800eae6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	78db      	ldrb	r3, [r3, #3]
 800e756:	2b02      	cmp	r3, #2
 800e758:	d11e      	bne.n	800e798 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4413      	add	r3, r2
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	b29b      	uxth	r3, r3
 800e768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e76c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e770:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	441a      	add	r2, r3
 800e77e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e78a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e792:	b29b      	uxth	r3, r3
 800e794:	8013      	strh	r3, [r2, #0]
 800e796:	e01d      	b.n	800e7d4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4413      	add	r3, r2
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e7aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	441a      	add	r2, r3
 800e7bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800e7c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7e4:	4413      	add	r3, r2
 800e7e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	011a      	lsls	r2, r3, #4
 800e7ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e7f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	891b      	ldrh	r3, [r3, #8]
 800e7fc:	085b      	lsrs	r3, r3, #1
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	b29a      	uxth	r2, r3
 800e804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e806:	801a      	strh	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	657b      	str	r3, [r7, #84]	; 0x54
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e812:	b29b      	uxth	r3, r3
 800e814:	461a      	mov	r2, r3
 800e816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e818:	4413      	add	r3, r2
 800e81a:	657b      	str	r3, [r7, #84]	; 0x54
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	011a      	lsls	r2, r3, #4
 800e822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e824:	4413      	add	r3, r2
 800e826:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e82a:	653b      	str	r3, [r7, #80]	; 0x50
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	895b      	ldrh	r3, [r3, #10]
 800e830:	085b      	lsrs	r3, r3, #1
 800e832:	b29b      	uxth	r3, r3
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	b29a      	uxth	r2, r3
 800e838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e83a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	785b      	ldrb	r3, [r3, #1]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f040 8093 	bne.w	800e96c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	881b      	ldrh	r3, [r3, #0]
 800e852:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e856:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e85a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d01b      	beq.n	800e89a <USB_ActivateEndpoint+0x526>
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	4413      	add	r3, r2
 800e86c:	881b      	ldrh	r3, [r3, #0]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e878:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	441a      	add	r2, r3
 800e884:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e88a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e88e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e896:	b29b      	uxth	r3, r3
 800e898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4413      	add	r3, r2
 800e8a4:	881b      	ldrh	r3, [r3, #0]
 800e8a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e8a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d01b      	beq.n	800e8ea <USB_ActivateEndpoint+0x576>
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4413      	add	r3, r2
 800e8bc:	881b      	ldrh	r3, [r3, #0]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	441a      	add	r2, r3
 800e8d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e8d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e900:	873b      	strh	r3, [r7, #56]	; 0x38
 800e902:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e904:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e908:	873b      	strh	r3, [r7, #56]	; 0x38
 800e90a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e90c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e910:	873b      	strh	r3, [r7, #56]	; 0x38
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	441a      	add	r2, r3
 800e91c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e91e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92e:	b29b      	uxth	r3, r3
 800e930:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	4413      	add	r3, r2
 800e93c:	881b      	ldrh	r3, [r3, #0]
 800e93e:	b29b      	uxth	r3, r3
 800e940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e948:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	441a      	add	r2, r3
 800e954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e95a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e95e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e966:	b29b      	uxth	r3, r3
 800e968:	8013      	strh	r3, [r2, #0]
 800e96a:	e0bc      	b.n	800eae6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	4413      	add	r3, r2
 800e976:	881b      	ldrh	r3, [r3, #0]
 800e978:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e97c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e984:	2b00      	cmp	r3, #0
 800e986:	d01d      	beq.n	800e9c4 <USB_ActivateEndpoint+0x650>
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	4413      	add	r3, r2
 800e992:	881b      	ldrh	r3, [r3, #0]
 800e994:	b29b      	uxth	r3, r3
 800e996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e99e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	441a      	add	r2, r3
 800e9ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e9b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e9d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d01d      	beq.n	800ea1c <USB_ActivateEndpoint+0x6a8>
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	4413      	add	r3, r2
 800e9ea:	881b      	ldrh	r3, [r3, #0]
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	441a      	add	r2, r3
 800ea04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ea08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	78db      	ldrb	r3, [r3, #3]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d024      	beq.n	800ea6e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ea3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea42:	f083 0320 	eor.w	r3, r3, #32
 800ea46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	441a      	add	r2, r3
 800ea54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	8013      	strh	r3, [r2, #0]
 800ea6c:	e01d      	b.n	800eaaa <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	441a      	add	r2, r3
 800ea92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ea96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eaa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	881b      	ldrh	r3, [r3, #0]
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eabc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eac0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	441a      	add	r2, r3
 800eace:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ead2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ead6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800eae6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3774      	adds	r7, #116	; 0x74
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bc80      	pop	{r7}
 800eaf2:	4770      	bx	lr

0800eaf4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b08d      	sub	sp, #52	; 0x34
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	7b1b      	ldrb	r3, [r3, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f040 808e 	bne.w	800ec24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	785b      	ldrb	r3, [r3, #1]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d044      	beq.n	800eb9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	4413      	add	r3, r2
 800eb1a:	881b      	ldrh	r3, [r3, #0]
 800eb1c:	81bb      	strh	r3, [r7, #12]
 800eb1e:	89bb      	ldrh	r3, [r7, #12]
 800eb20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d01b      	beq.n	800eb60 <USB_DeactivateEndpoint+0x6c>
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	4413      	add	r3, r2
 800eb32:	881b      	ldrh	r3, [r3, #0]
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb3e:	817b      	strh	r3, [r7, #10]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	009b      	lsls	r3, r3, #2
 800eb48:	441a      	add	r2, r3
 800eb4a:	897b      	ldrh	r3, [r7, #10]
 800eb4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4413      	add	r3, r2
 800eb6a:	881b      	ldrh	r3, [r3, #0]
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb76:	813b      	strh	r3, [r7, #8]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	441a      	add	r2, r3
 800eb82:	893b      	ldrh	r3, [r7, #8]
 800eb84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	8013      	strh	r3, [r2, #0]
 800eb98:	e192      	b.n	800eec0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	4413      	add	r3, r2
 800eba4:	881b      	ldrh	r3, [r3, #0]
 800eba6:	827b      	strh	r3, [r7, #18]
 800eba8:	8a7b      	ldrh	r3, [r7, #18]
 800ebaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d01b      	beq.n	800ebea <USB_DeactivateEndpoint+0xf6>
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	4413      	add	r3, r2
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebc8:	823b      	strh	r3, [r7, #16]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	441a      	add	r2, r3
 800ebd4:	8a3b      	ldrh	r3, [r7, #16]
 800ebd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ebe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	4413      	add	r3, r2
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec00:	81fb      	strh	r3, [r7, #14]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	441a      	add	r2, r3
 800ec0c:	89fb      	ldrh	r3, [r7, #14]
 800ec0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	8013      	strh	r3, [r2, #0]
 800ec22:	e14d      	b.n	800eec0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	785b      	ldrb	r3, [r3, #1]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f040 80a5 	bne.w	800ed78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	4413      	add	r3, r2
 800ec38:	881b      	ldrh	r3, [r3, #0]
 800ec3a:	843b      	strh	r3, [r7, #32]
 800ec3c:	8c3b      	ldrh	r3, [r7, #32]
 800ec3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d01b      	beq.n	800ec7e <USB_DeactivateEndpoint+0x18a>
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4413      	add	r3, r2
 800ec50:	881b      	ldrh	r3, [r3, #0]
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec5c:	83fb      	strh	r3, [r7, #30]
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	441a      	add	r2, r3
 800ec68:	8bfb      	ldrh	r3, [r7, #30]
 800ec6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ec76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4413      	add	r3, r2
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	83bb      	strh	r3, [r7, #28]
 800ec8c:	8bbb      	ldrh	r3, [r7, #28]
 800ec8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d01b      	beq.n	800ecce <USB_DeactivateEndpoint+0x1da>
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4413      	add	r3, r2
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecac:	837b      	strh	r3, [r7, #26]
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	441a      	add	r2, r3
 800ecb8:	8b7b      	ldrh	r3, [r7, #26]
 800ecba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ecc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ece0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ece4:	833b      	strh	r3, [r7, #24]
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	441a      	add	r2, r3
 800ecf0:	8b3b      	ldrh	r3, [r7, #24]
 800ecf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ecfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	4413      	add	r3, r2
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed1c:	82fb      	strh	r3, [r7, #22]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	441a      	add	r2, r3
 800ed28:	8afb      	ldrh	r3, [r7, #22]
 800ed2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed54:	82bb      	strh	r3, [r7, #20]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	441a      	add	r2, r3
 800ed60:	8abb      	ldrh	r3, [r7, #20]
 800ed62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	8013      	strh	r3, [r2, #0]
 800ed76:	e0a3      	b.n	800eec0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	881b      	ldrh	r3, [r3, #0]
 800ed84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ed86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d01b      	beq.n	800edc8 <USB_DeactivateEndpoint+0x2d4>
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	4413      	add	r3, r2
 800ed9a:	881b      	ldrh	r3, [r3, #0]
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eda2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eda6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	441a      	add	r2, r3
 800edb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800edb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800edc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	4413      	add	r3, r2
 800edd2:	881b      	ldrh	r3, [r3, #0]
 800edd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800edd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800edd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d01b      	beq.n	800ee18 <USB_DeactivateEndpoint+0x324>
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	881b      	ldrh	r3, [r3, #0]
 800edec:	b29b      	uxth	r3, r3
 800edee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edf6:	853b      	strh	r3, [r7, #40]	; 0x28
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	441a      	add	r2, r3
 800ee02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	881b      	ldrh	r3, [r3, #0]
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	441a      	add	r2, r3
 800ee3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ee48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	881b      	ldrh	r3, [r3, #0]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee66:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	441a      	add	r2, r3
 800ee72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	4413      	add	r3, r2
 800ee92:	881b      	ldrh	r3, [r3, #0]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee9e:	847b      	strh	r3, [r7, #34]	; 0x22
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	441a      	add	r2, r3
 800eeaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eeac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eeb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eeb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3734      	adds	r7, #52	; 0x34
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bc80      	pop	{r7}
 800eeca:	4770      	bx	lr

0800eecc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b0c2      	sub	sp, #264	; 0x108
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeda:	6018      	str	r0, [r3, #0]
 800eedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eee4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	785b      	ldrb	r3, [r3, #1]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	f040 86b7 	bne.w	800fc66 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800eef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eefc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	699a      	ldr	r2, [r3, #24]
 800ef04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d908      	bls.n	800ef26 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ef14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ef24:	e007      	b.n	800ef36 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ef26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ef36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	7b1b      	ldrb	r3, [r3, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d13a      	bne.n	800efbc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ef46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6959      	ldr	r1, [r3, #20]
 800ef52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	88da      	ldrh	r2, [r3, #6]
 800ef5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ef68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ef6c:	6800      	ldr	r0, [r0, #0]
 800ef6e:	f001 fc9c 	bl	80108aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ef72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	613b      	str	r3, [r7, #16]
 800ef7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	461a      	mov	r2, r3
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	4413      	add	r3, r2
 800ef94:	613b      	str	r3, [r7, #16]
 800ef96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	011a      	lsls	r2, r3, #4
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	4413      	add	r3, r2
 800efa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800efac:	60fb      	str	r3, [r7, #12]
 800efae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	801a      	strh	r2, [r3, #0]
 800efb8:	f000 be1f 	b.w	800fbfa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800efbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	78db      	ldrb	r3, [r3, #3]
 800efc8:	2b02      	cmp	r3, #2
 800efca:	f040 8462 	bne.w	800f892 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800efce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6a1a      	ldr	r2, [r3, #32]
 800efda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	f240 83df 	bls.w	800f7aa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800efec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800effa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4413      	add	r3, r2
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	b29b      	uxth	r3, r3
 800f00a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f012:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f01a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	441a      	add	r2, r3
 800f030:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f03c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f044:	b29b      	uxth	r3, r3
 800f046:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	6a1a      	ldr	r2, [r3, #32]
 800f054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f058:	1ad2      	subs	r2, r2, r3
 800f05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f06a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4413      	add	r3, r2
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	b29b      	uxth	r3, r3
 800f084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f000 81c7 	beq.w	800f41c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	633b      	str	r3, [r7, #48]	; 0x30
 800f09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	785b      	ldrb	r3, [r3, #1]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d177      	bne.n	800f19a <USB_EPStartXfer+0x2ce>
 800f0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ca:	4413      	add	r3, r2
 800f0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	011a      	lsls	r2, r3, #4
 800f0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0de:	4413      	add	r3, r2
 800f0e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f0e4:	627b      	str	r3, [r7, #36]	; 0x24
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e8:	881b      	ldrh	r3, [r3, #0]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	801a      	strh	r2, [r3, #0]
 800f0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0fa:	2b3e      	cmp	r3, #62	; 0x3e
 800f0fc:	d921      	bls.n	800f142 <USB_EPStartXfer+0x276>
 800f0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f102:	095b      	lsrs	r3, r3, #5
 800f104:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f10c:	f003 031f 	and.w	r3, r3, #31
 800f110:	2b00      	cmp	r3, #0
 800f112:	d104      	bne.n	800f11e <USB_EPStartXfer+0x252>
 800f114:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f118:	3b01      	subs	r3, #1
 800f11a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	881b      	ldrh	r3, [r3, #0]
 800f122:	b29a      	uxth	r2, r3
 800f124:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f128:	b29b      	uxth	r3, r3
 800f12a:	029b      	lsls	r3, r3, #10
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	4313      	orrs	r3, r2
 800f130:	b29b      	uxth	r3, r3
 800f132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	801a      	strh	r2, [r3, #0]
 800f140:	e050      	b.n	800f1e4 <USB_EPStartXfer+0x318>
 800f142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10a      	bne.n	800f160 <USB_EPStartXfer+0x294>
 800f14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	b29b      	uxth	r3, r3
 800f150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f158:	b29a      	uxth	r2, r3
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	801a      	strh	r2, [r3, #0]
 800f15e:	e041      	b.n	800f1e4 <USB_EPStartXfer+0x318>
 800f160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f164:	085b      	lsrs	r3, r3, #1
 800f166:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f16e:	f003 0301 	and.w	r3, r3, #1
 800f172:	2b00      	cmp	r3, #0
 800f174:	d004      	beq.n	800f180 <USB_EPStartXfer+0x2b4>
 800f176:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f17a:	3301      	adds	r3, #1
 800f17c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	881b      	ldrh	r3, [r3, #0]
 800f184:	b29a      	uxth	r2, r3
 800f186:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	029b      	lsls	r3, r3, #10
 800f18e:	b29b      	uxth	r3, r3
 800f190:	4313      	orrs	r3, r2
 800f192:	b29a      	uxth	r2, r3
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	801a      	strh	r2, [r3, #0]
 800f198:	e024      	b.n	800f1e4 <USB_EPStartXfer+0x318>
 800f19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	785b      	ldrb	r3, [r3, #1]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d11c      	bne.n	800f1e4 <USB_EPStartXfer+0x318>
 800f1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	4413      	add	r3, r2
 800f1c0:	633b      	str	r3, [r7, #48]	; 0x30
 800f1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	011a      	lsls	r2, r3, #4
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d2:	4413      	add	r3, r2
 800f1d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	895b      	ldrh	r3, [r3, #10]
 800f1f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	6959      	ldr	r1, [r3, #20]
 800f200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f204:	b29b      	uxth	r3, r3
 800f206:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f20a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f20e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f212:	6800      	ldr	r0, [r0, #0]
 800f214:	f001 fb49 	bl	80108aa <USB_WritePMA>
            ep->xfer_buff += len;
 800f218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	695a      	ldr	r2, [r3, #20]
 800f224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f228:	441a      	add	r2, r3
 800f22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6a1a      	ldr	r2, [r3, #32]
 800f242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d90f      	bls.n	800f272 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800f252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6a1a      	ldr	r2, [r3, #32]
 800f25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f262:	1ad2      	subs	r2, r2, r3
 800f264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	621a      	str	r2, [r3, #32]
 800f270:	e00e      	b.n	800f290 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800f272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6a1b      	ldr	r3, [r3, #32]
 800f27e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2200      	movs	r2, #0
 800f28e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	785b      	ldrb	r3, [r3, #1]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d177      	bne.n	800f390 <USB_EPStartXfer+0x4c4>
 800f2a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	61bb      	str	r3, [r7, #24]
 800f2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	461a      	mov	r2, r3
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	61bb      	str	r3, [r7, #24]
 800f2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	011a      	lsls	r2, r3, #4
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f2da:	617b      	str	r3, [r7, #20]
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	881b      	ldrh	r3, [r3, #0]
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	801a      	strh	r2, [r3, #0]
 800f2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2f0:	2b3e      	cmp	r3, #62	; 0x3e
 800f2f2:	d921      	bls.n	800f338 <USB_EPStartXfer+0x46c>
 800f2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2f8:	095b      	lsrs	r3, r3, #5
 800f2fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f302:	f003 031f 	and.w	r3, r3, #31
 800f306:	2b00      	cmp	r3, #0
 800f308:	d104      	bne.n	800f314 <USB_EPStartXfer+0x448>
 800f30a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f30e:	3b01      	subs	r3, #1
 800f310:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	881b      	ldrh	r3, [r3, #0]
 800f318:	b29a      	uxth	r2, r3
 800f31a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f31e:	b29b      	uxth	r3, r3
 800f320:	029b      	lsls	r3, r3, #10
 800f322:	b29b      	uxth	r3, r3
 800f324:	4313      	orrs	r3, r2
 800f326:	b29b      	uxth	r3, r3
 800f328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f32c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f330:	b29a      	uxth	r2, r3
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	801a      	strh	r2, [r3, #0]
 800f336:	e056      	b.n	800f3e6 <USB_EPStartXfer+0x51a>
 800f338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10a      	bne.n	800f356 <USB_EPStartXfer+0x48a>
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	881b      	ldrh	r3, [r3, #0]
 800f344:	b29b      	uxth	r3, r3
 800f346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f34a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f34e:	b29a      	uxth	r2, r3
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	801a      	strh	r2, [r3, #0]
 800f354:	e047      	b.n	800f3e6 <USB_EPStartXfer+0x51a>
 800f356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f35a:	085b      	lsrs	r3, r3, #1
 800f35c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d004      	beq.n	800f376 <USB_EPStartXfer+0x4aa>
 800f36c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f370:	3301      	adds	r3, #1
 800f372:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f380:	b29b      	uxth	r3, r3
 800f382:	029b      	lsls	r3, r3, #10
 800f384:	b29b      	uxth	r3, r3
 800f386:	4313      	orrs	r3, r2
 800f388:	b29a      	uxth	r2, r3
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	801a      	strh	r2, [r3, #0]
 800f38e:	e02a      	b.n	800f3e6 <USB_EPStartXfer+0x51a>
 800f390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	785b      	ldrb	r3, [r3, #1]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d122      	bne.n	800f3e6 <USB_EPStartXfer+0x51a>
 800f3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	623b      	str	r3, [r7, #32]
 800f3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	461a      	mov	r2, r3
 800f3be:	6a3b      	ldr	r3, [r7, #32]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	623b      	str	r3, [r7, #32]
 800f3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	011a      	lsls	r2, r3, #4
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f3da:	61fb      	str	r3, [r7, #28]
 800f3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	891b      	ldrh	r3, [r3, #8]
 800f3f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	6959      	ldr	r1, [r3, #20]
 800f402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f406:	b29b      	uxth	r3, r3
 800f408:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f40c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f410:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f414:	6800      	ldr	r0, [r0, #0]
 800f416:	f001 fa48 	bl	80108aa <USB_WritePMA>
 800f41a:	e3ee      	b.n	800fbfa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	785b      	ldrb	r3, [r3, #1]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d177      	bne.n	800f51c <USB_EPStartXfer+0x650>
 800f42c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	64bb      	str	r3, [r7, #72]	; 0x48
 800f438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f43c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f446:	b29b      	uxth	r3, r3
 800f448:	461a      	mov	r2, r3
 800f44a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f44c:	4413      	add	r3, r2
 800f44e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	011a      	lsls	r2, r3, #4
 800f45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f460:	4413      	add	r3, r2
 800f462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f466:	647b      	str	r3, [r7, #68]	; 0x44
 800f468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f472:	b29a      	uxth	r2, r3
 800f474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f476:	801a      	strh	r2, [r3, #0]
 800f478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f47c:	2b3e      	cmp	r3, #62	; 0x3e
 800f47e:	d921      	bls.n	800f4c4 <USB_EPStartXfer+0x5f8>
 800f480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f484:	095b      	lsrs	r3, r3, #5
 800f486:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f48e:	f003 031f 	and.w	r3, r3, #31
 800f492:	2b00      	cmp	r3, #0
 800f494:	d104      	bne.n	800f4a0 <USB_EPStartXfer+0x5d4>
 800f496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f49a:	3b01      	subs	r3, #1
 800f49c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4a2:	881b      	ldrh	r3, [r3, #0]
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	029b      	lsls	r3, r3, #10
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4bc:	b29a      	uxth	r2, r3
 800f4be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4c0:	801a      	strh	r2, [r3, #0]
 800f4c2:	e056      	b.n	800f572 <USB_EPStartXfer+0x6a6>
 800f4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10a      	bne.n	800f4e2 <USB_EPStartXfer+0x616>
 800f4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4de:	801a      	strh	r2, [r3, #0]
 800f4e0:	e047      	b.n	800f572 <USB_EPStartXfer+0x6a6>
 800f4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4e6:	085b      	lsrs	r3, r3, #1
 800f4e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d004      	beq.n	800f502 <USB_EPStartXfer+0x636>
 800f4f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	b29a      	uxth	r2, r3
 800f508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	029b      	lsls	r3, r3, #10
 800f510:	b29b      	uxth	r3, r3
 800f512:	4313      	orrs	r3, r2
 800f514:	b29a      	uxth	r2, r3
 800f516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f518:	801a      	strh	r2, [r3, #0]
 800f51a:	e02a      	b.n	800f572 <USB_EPStartXfer+0x6a6>
 800f51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	785b      	ldrb	r3, [r3, #1]
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d122      	bne.n	800f572 <USB_EPStartXfer+0x6a6>
 800f52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	653b      	str	r3, [r7, #80]	; 0x50
 800f538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f53c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f546:	b29b      	uxth	r3, r3
 800f548:	461a      	mov	r2, r3
 800f54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f54c:	4413      	add	r3, r2
 800f54e:	653b      	str	r3, [r7, #80]	; 0x50
 800f550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	011a      	lsls	r2, r3, #4
 800f55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f560:	4413      	add	r3, r2
 800f562:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f566:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f570:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	891b      	ldrh	r3, [r3, #8]
 800f57e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6959      	ldr	r1, [r3, #20]
 800f58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f592:	b29b      	uxth	r3, r3
 800f594:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f598:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f59c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f5a0:	6800      	ldr	r0, [r0, #0]
 800f5a2:	f001 f982 	bl	80108aa <USB_WritePMA>
            ep->xfer_buff += len;
 800f5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	695a      	ldr	r2, [r3, #20]
 800f5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5b6:	441a      	add	r2, r3
 800f5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	6a1a      	ldr	r2, [r3, #32]
 800f5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	691b      	ldr	r3, [r3, #16]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d90f      	bls.n	800f600 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800f5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	6a1a      	ldr	r2, [r3, #32]
 800f5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5f0:	1ad2      	subs	r2, r2, r3
 800f5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	621a      	str	r2, [r3, #32]
 800f5fe:	e00e      	b.n	800f61e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800f600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	6a1b      	ldr	r3, [r3, #32]
 800f60c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2200      	movs	r2, #0
 800f61c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	643b      	str	r3, [r7, #64]	; 0x40
 800f62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f62e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	785b      	ldrb	r3, [r3, #1]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d177      	bne.n	800f72a <USB_EPStartXfer+0x85e>
 800f63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f63e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	63bb      	str	r3, [r7, #56]	; 0x38
 800f646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f654:	b29b      	uxth	r3, r3
 800f656:	461a      	mov	r2, r3
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	4413      	add	r3, r2
 800f65c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	011a      	lsls	r2, r3, #4
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	4413      	add	r3, r2
 800f670:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f674:	637b      	str	r3, [r7, #52]	; 0x34
 800f676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f680:	b29a      	uxth	r2, r3
 800f682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f684:	801a      	strh	r2, [r3, #0]
 800f686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f68a:	2b3e      	cmp	r3, #62	; 0x3e
 800f68c:	d921      	bls.n	800f6d2 <USB_EPStartXfer+0x806>
 800f68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f692:	095b      	lsrs	r3, r3, #5
 800f694:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f69c:	f003 031f 	and.w	r3, r3, #31
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d104      	bne.n	800f6ae <USB_EPStartXfer+0x7e2>
 800f6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	029b      	lsls	r3, r3, #10
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ce:	801a      	strh	r2, [r3, #0]
 800f6d0:	e050      	b.n	800f774 <USB_EPStartXfer+0x8a8>
 800f6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d10a      	bne.n	800f6f0 <USB_EPStartXfer+0x824>
 800f6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ec:	801a      	strh	r2, [r3, #0]
 800f6ee:	e041      	b.n	800f774 <USB_EPStartXfer+0x8a8>
 800f6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6f4:	085b      	lsrs	r3, r3, #1
 800f6f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6fe:	f003 0301 	and.w	r3, r3, #1
 800f702:	2b00      	cmp	r3, #0
 800f704:	d004      	beq.n	800f710 <USB_EPStartXfer+0x844>
 800f706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f70a:	3301      	adds	r3, #1
 800f70c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f712:	881b      	ldrh	r3, [r3, #0]
 800f714:	b29a      	uxth	r2, r3
 800f716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	029b      	lsls	r3, r3, #10
 800f71e:	b29b      	uxth	r3, r3
 800f720:	4313      	orrs	r3, r2
 800f722:	b29a      	uxth	r2, r3
 800f724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f726:	801a      	strh	r2, [r3, #0]
 800f728:	e024      	b.n	800f774 <USB_EPStartXfer+0x8a8>
 800f72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	785b      	ldrb	r3, [r3, #1]
 800f736:	2b01      	cmp	r3, #1
 800f738:	d11c      	bne.n	800f774 <USB_EPStartXfer+0x8a8>
 800f73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f748:	b29b      	uxth	r3, r3
 800f74a:	461a      	mov	r2, r3
 800f74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f74e:	4413      	add	r3, r2
 800f750:	643b      	str	r3, [r7, #64]	; 0x40
 800f752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	011a      	lsls	r2, r3, #4
 800f760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f762:	4413      	add	r3, r2
 800f764:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f76e:	b29a      	uxth	r2, r3
 800f770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f772:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	895b      	ldrh	r3, [r3, #10]
 800f780:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	6959      	ldr	r1, [r3, #20]
 800f790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f794:	b29b      	uxth	r3, r3
 800f796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f79a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f79e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f7a2:	6800      	ldr	r0, [r0, #0]
 800f7a4:	f001 f881 	bl	80108aa <USB_WritePMA>
 800f7a8:	e227      	b.n	800fbfa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6a1b      	ldr	r3, [r3, #32]
 800f7b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	4413      	add	r3, r2
 800f7d4:	881b      	ldrh	r3, [r3, #0]
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f7dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	441a      	add	r2, r3
 800f7fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f80a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f812:	b29b      	uxth	r3, r3
 800f814:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f81a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f830:	b29b      	uxth	r3, r3
 800f832:	461a      	mov	r2, r3
 800f834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f836:	4413      	add	r3, r2
 800f838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f83e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	011a      	lsls	r2, r3, #4
 800f848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f84a:	4413      	add	r3, r2
 800f84c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f850:	65bb      	str	r3, [r7, #88]	; 0x58
 800f852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f856:	b29a      	uxth	r2, r3
 800f858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f85a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	891b      	ldrh	r3, [r3, #8]
 800f868:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	6959      	ldr	r1, [r3, #20]
 800f878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f882:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f886:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f88a:	6800      	ldr	r0, [r0, #0]
 800f88c:	f001 f80d 	bl	80108aa <USB_WritePMA>
 800f890:	e1b3      	b.n	800fbfa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6a1a      	ldr	r2, [r3, #32]
 800f89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8a2:	1ad2      	subs	r2, r2, r3
 800f8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	881b      	ldrh	r3, [r3, #0]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f000 80c6 	beq.w	800fa64 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	673b      	str	r3, [r7, #112]	; 0x70
 800f8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	785b      	ldrb	r3, [r3, #1]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d177      	bne.n	800f9e4 <USB_EPStartXfer+0xb18>
 800f8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800f900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f90e:	b29b      	uxth	r3, r3
 800f910:	461a      	mov	r2, r3
 800f912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f914:	4413      	add	r3, r2
 800f916:	66bb      	str	r3, [r7, #104]	; 0x68
 800f918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	011a      	lsls	r2, r3, #4
 800f926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f928:	4413      	add	r3, r2
 800f92a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f92e:	667b      	str	r3, [r7, #100]	; 0x64
 800f930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	b29b      	uxth	r3, r3
 800f936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f93e:	801a      	strh	r2, [r3, #0]
 800f940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f944:	2b3e      	cmp	r3, #62	; 0x3e
 800f946:	d921      	bls.n	800f98c <USB_EPStartXfer+0xac0>
 800f948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f94c:	095b      	lsrs	r3, r3, #5
 800f94e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f956:	f003 031f 	and.w	r3, r3, #31
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d104      	bne.n	800f968 <USB_EPStartXfer+0xa9c>
 800f95e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f962:	3b01      	subs	r3, #1
 800f964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f96a:	881b      	ldrh	r3, [r3, #0]
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f972:	b29b      	uxth	r3, r3
 800f974:	029b      	lsls	r3, r3, #10
 800f976:	b29b      	uxth	r3, r3
 800f978:	4313      	orrs	r3, r2
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f984:	b29a      	uxth	r2, r3
 800f986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f988:	801a      	strh	r2, [r3, #0]
 800f98a:	e050      	b.n	800fa2e <USB_EPStartXfer+0xb62>
 800f98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10a      	bne.n	800f9aa <USB_EPStartXfer+0xade>
 800f994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f996:	881b      	ldrh	r3, [r3, #0]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f99e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9a6:	801a      	strh	r2, [r3, #0]
 800f9a8:	e041      	b.n	800fa2e <USB_EPStartXfer+0xb62>
 800f9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9ae:	085b      	lsrs	r3, r3, #1
 800f9b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d004      	beq.n	800f9ca <USB_EPStartXfer+0xafe>
 800f9c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f9ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	029b      	lsls	r3, r3, #10
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	b29a      	uxth	r2, r3
 800f9de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9e0:	801a      	strh	r2, [r3, #0]
 800f9e2:	e024      	b.n	800fa2e <USB_EPStartXfer+0xb62>
 800f9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	785b      	ldrb	r3, [r3, #1]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d11c      	bne.n	800fa2e <USB_EPStartXfer+0xb62>
 800f9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	461a      	mov	r2, r3
 800fa06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa08:	4413      	add	r3, r2
 800fa0a:	673b      	str	r3, [r7, #112]	; 0x70
 800fa0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	011a      	lsls	r2, r3, #4
 800fa1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa1c:	4413      	add	r3, r2
 800fa1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fa22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800fa2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	895b      	ldrh	r3, [r3, #10]
 800fa3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fa3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	6959      	ldr	r1, [r3, #20]
 800fa4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fa54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fa58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fa5c:	6800      	ldr	r0, [r0, #0]
 800fa5e:	f000 ff24 	bl	80108aa <USB_WritePMA>
 800fa62:	e0ca      	b.n	800fbfa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fa64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	785b      	ldrb	r3, [r3, #1]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d177      	bne.n	800fb64 <USB_EPStartXfer+0xc98>
 800fa74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	461a      	mov	r2, r3
 800fa92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa94:	4413      	add	r3, r2
 800fa96:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	011a      	lsls	r2, r3, #4
 800faa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800faa8:	4413      	add	r3, r2
 800faaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800faae:	67bb      	str	r3, [r7, #120]	; 0x78
 800fab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800faba:	b29a      	uxth	r2, r3
 800fabc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fabe:	801a      	strh	r2, [r3, #0]
 800fac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fac4:	2b3e      	cmp	r3, #62	; 0x3e
 800fac6:	d921      	bls.n	800fb0c <USB_EPStartXfer+0xc40>
 800fac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800facc:	095b      	lsrs	r3, r3, #5
 800face:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fad6:	f003 031f 	and.w	r3, r3, #31
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d104      	bne.n	800fae8 <USB_EPStartXfer+0xc1c>
 800fade:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fae2:	3b01      	subs	r3, #1
 800fae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	b29a      	uxth	r2, r3
 800faee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	029b      	lsls	r3, r3, #10
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	4313      	orrs	r3, r2
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb08:	801a      	strh	r2, [r3, #0]
 800fb0a:	e05c      	b.n	800fbc6 <USB_EPStartXfer+0xcfa>
 800fb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d10a      	bne.n	800fb2a <USB_EPStartXfer+0xc5e>
 800fb14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb16:	881b      	ldrh	r3, [r3, #0]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb26:	801a      	strh	r2, [r3, #0]
 800fb28:	e04d      	b.n	800fbc6 <USB_EPStartXfer+0xcfa>
 800fb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb2e:	085b      	lsrs	r3, r3, #1
 800fb30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb38:	f003 0301 	and.w	r3, r3, #1
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d004      	beq.n	800fb4a <USB_EPStartXfer+0xc7e>
 800fb40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb44:	3301      	adds	r3, #1
 800fb46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fb4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	029b      	lsls	r3, r3, #10
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb60:	801a      	strh	r2, [r3, #0]
 800fb62:	e030      	b.n	800fbc6 <USB_EPStartXfer+0xcfa>
 800fb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	785b      	ldrb	r3, [r3, #1]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d128      	bne.n	800fbc6 <USB_EPStartXfer+0xcfa>
 800fb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	461a      	mov	r2, r3
 800fb94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb98:	4413      	add	r3, r2
 800fb9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	011a      	lsls	r2, r3, #4
 800fbac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fbb0:	4413      	add	r3, r2
 800fbb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fbb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fbc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fbc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	891b      	ldrh	r3, [r3, #8]
 800fbd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fbd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	6959      	ldr	r1, [r3, #20]
 800fbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fbec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fbf0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fbf4:	6800      	ldr	r0, [r0, #0]
 800fbf6:	f000 fe58 	bl	80108aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fbfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	4413      	add	r3, r2
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc20:	817b      	strh	r3, [r7, #10]
 800fc22:	897b      	ldrh	r3, [r7, #10]
 800fc24:	f083 0310 	eor.w	r3, r3, #16
 800fc28:	817b      	strh	r3, [r7, #10]
 800fc2a:	897b      	ldrh	r3, [r7, #10]
 800fc2c:	f083 0320 	eor.w	r3, r3, #32
 800fc30:	817b      	strh	r3, [r7, #10]
 800fc32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	441a      	add	r2, r3
 800fc4c:	897b      	ldrh	r3, [r7, #10]
 800fc4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	8013      	strh	r3, [r2, #0]
 800fc62:	f000 bcde 	b.w	8010622 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fc66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	7b1b      	ldrb	r3, [r3, #12]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	f040 80bb 	bne.w	800fdee <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800fc78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	699a      	ldr	r2, [r3, #24]
 800fc84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	691b      	ldr	r3, [r3, #16]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d917      	bls.n	800fcc4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800fc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	691b      	ldr	r3, [r3, #16]
 800fca0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800fca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	699a      	ldr	r2, [r3, #24]
 800fcb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcb4:	1ad2      	subs	r2, r2, r3
 800fcb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	619a      	str	r2, [r3, #24]
 800fcc2:	e00e      	b.n	800fce2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800fcc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800fcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2200      	movs	r2, #0
 800fce0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	461a      	mov	r2, r3
 800fd02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd06:	4413      	add	r3, r2
 800fd08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fd0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	011a      	lsls	r2, r3, #4
 800fd1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd1e:	4413      	add	r3, r2
 800fd20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fd24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd3a:	801a      	strh	r2, [r3, #0]
 800fd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd40:	2b3e      	cmp	r3, #62	; 0x3e
 800fd42:	d924      	bls.n	800fd8e <USB_EPStartXfer+0xec2>
 800fd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd48:	095b      	lsrs	r3, r3, #5
 800fd4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd52:	f003 031f 	and.w	r3, r3, #31
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d104      	bne.n	800fd64 <USB_EPStartXfer+0xe98>
 800fd5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fd64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd68:	881b      	ldrh	r3, [r3, #0]
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	029b      	lsls	r3, r3, #10
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	4313      	orrs	r3, r2
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd88:	801a      	strh	r2, [r3, #0]
 800fd8a:	f000 bc10 	b.w	80105ae <USB_EPStartXfer+0x16e2>
 800fd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d10c      	bne.n	800fdb0 <USB_EPStartXfer+0xee4>
 800fd96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fda2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdac:	801a      	strh	r2, [r3, #0]
 800fdae:	e3fe      	b.n	80105ae <USB_EPStartXfer+0x16e2>
 800fdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdb4:	085b      	lsrs	r3, r3, #1
 800fdb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d004      	beq.n	800fdd0 <USB_EPStartXfer+0xf04>
 800fdc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fdca:	3301      	adds	r3, #1
 800fdcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fdd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdd4:	881b      	ldrh	r3, [r3, #0]
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	029b      	lsls	r3, r3, #10
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	4313      	orrs	r3, r2
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdea:	801a      	strh	r2, [r3, #0]
 800fdec:	e3df      	b.n	80105ae <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fdee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	78db      	ldrb	r3, [r3, #3]
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	f040 8218 	bne.w	8010230 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800fe00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	785b      	ldrb	r3, [r3, #1]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f040 809d 	bne.w	800ff4c <USB_EPStartXfer+0x1080>
 800fe12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fe20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	461a      	mov	r2, r3
 800fe32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fe36:	4413      	add	r3, r2
 800fe38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fe3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	011a      	lsls	r2, r3, #4
 800fe4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fe4e:	4413      	add	r3, r2
 800fe50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fe54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fe58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe6a:	801a      	strh	r2, [r3, #0]
 800fe6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	691b      	ldr	r3, [r3, #16]
 800fe78:	2b3e      	cmp	r3, #62	; 0x3e
 800fe7a:	d92b      	bls.n	800fed4 <USB_EPStartXfer+0x1008>
 800fe7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	691b      	ldr	r3, [r3, #16]
 800fe88:	095b      	lsrs	r3, r3, #5
 800fe8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fe8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	691b      	ldr	r3, [r3, #16]
 800fe9a:	f003 031f 	and.w	r3, r3, #31
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d104      	bne.n	800feac <USB_EPStartXfer+0xfe0>
 800fea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fea6:	3b01      	subs	r3, #1
 800fea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800feac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800feb0:	881b      	ldrh	r3, [r3, #0]
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feb8:	b29b      	uxth	r3, r3
 800feba:	029b      	lsls	r3, r3, #10
 800febc:	b29b      	uxth	r3, r3
 800febe:	4313      	orrs	r3, r2
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800feca:	b29a      	uxth	r2, r3
 800fecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fed0:	801a      	strh	r2, [r3, #0]
 800fed2:	e070      	b.n	800ffb6 <USB_EPStartXfer+0x10ea>
 800fed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d10c      	bne.n	800fefe <USB_EPStartXfer+0x1032>
 800fee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	b29b      	uxth	r3, r3
 800feec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fef4:	b29a      	uxth	r2, r3
 800fef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fefa:	801a      	strh	r2, [r3, #0]
 800fefc:	e05b      	b.n	800ffb6 <USB_EPStartXfer+0x10ea>
 800fefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	085b      	lsrs	r3, r3, #1
 800ff0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	691b      	ldr	r3, [r3, #16]
 800ff1c:	f003 0301 	and.w	r3, r3, #1
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d004      	beq.n	800ff2e <USB_EPStartXfer+0x1062>
 800ff24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff28:	3301      	adds	r3, #1
 800ff2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff32:	881b      	ldrh	r3, [r3, #0]
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	029b      	lsls	r3, r3, #10
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	4313      	orrs	r3, r2
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff48:	801a      	strh	r2, [r3, #0]
 800ff4a:	e034      	b.n	800ffb6 <USB_EPStartXfer+0x10ea>
 800ff4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	785b      	ldrb	r3, [r3, #1]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d12c      	bne.n	800ffb6 <USB_EPStartXfer+0x10ea>
 800ff5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ff6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ff80:	4413      	add	r3, r2
 800ff82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ff86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	011a      	lsls	r2, r3, #4
 800ff94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ff98:	4413      	add	r3, r2
 800ff9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ff9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ffa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	b29a      	uxth	r2, r3
 800ffb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ffb4:	801a      	strh	r2, [r3, #0]
 800ffb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ffc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	785b      	ldrb	r3, [r3, #1]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	f040 809d 	bne.w	8010110 <USB_EPStartXfer+0x1244>
 800ffd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ffe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	461a      	mov	r2, r3
 800fff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fffa:	4413      	add	r3, r2
 800fffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	011a      	lsls	r2, r3, #4
 801000e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010012:	4413      	add	r3, r2
 8010014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801001c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	b29b      	uxth	r3, r3
 8010024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010028:	b29a      	uxth	r2, r3
 801002a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801002e:	801a      	strh	r2, [r3, #0]
 8010030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	2b3e      	cmp	r3, #62	; 0x3e
 801003e:	d92b      	bls.n	8010098 <USB_EPStartXfer+0x11cc>
 8010040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	095b      	lsrs	r3, r3, #5
 801004e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	f003 031f 	and.w	r3, r3, #31
 8010062:	2b00      	cmp	r3, #0
 8010064:	d104      	bne.n	8010070 <USB_EPStartXfer+0x11a4>
 8010066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801006a:	3b01      	subs	r3, #1
 801006c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	b29a      	uxth	r2, r3
 8010078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801007c:	b29b      	uxth	r3, r3
 801007e:	029b      	lsls	r3, r3, #10
 8010080:	b29b      	uxth	r3, r3
 8010082:	4313      	orrs	r3, r2
 8010084:	b29b      	uxth	r3, r3
 8010086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801008a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801008e:	b29a      	uxth	r2, r3
 8010090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010094:	801a      	strh	r2, [r3, #0]
 8010096:	e069      	b.n	801016c <USB_EPStartXfer+0x12a0>
 8010098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801009c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	691b      	ldr	r3, [r3, #16]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d10c      	bne.n	80100c2 <USB_EPStartXfer+0x11f6>
 80100a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100be:	801a      	strh	r2, [r3, #0]
 80100c0:	e054      	b.n	801016c <USB_EPStartXfer+0x12a0>
 80100c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	085b      	lsrs	r3, r3, #1
 80100d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80100d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	691b      	ldr	r3, [r3, #16]
 80100e0:	f003 0301 	and.w	r3, r3, #1
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d004      	beq.n	80100f2 <USB_EPStartXfer+0x1226>
 80100e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100ec:	3301      	adds	r3, #1
 80100ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80100f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100fe:	b29b      	uxth	r3, r3
 8010100:	029b      	lsls	r3, r3, #10
 8010102:	b29b      	uxth	r3, r3
 8010104:	4313      	orrs	r3, r2
 8010106:	b29a      	uxth	r2, r3
 8010108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801010c:	801a      	strh	r2, [r3, #0]
 801010e:	e02d      	b.n	801016c <USB_EPStartXfer+0x12a0>
 8010110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	785b      	ldrb	r3, [r3, #1]
 801011c:	2b01      	cmp	r3, #1
 801011e:	d125      	bne.n	801016c <USB_EPStartXfer+0x12a0>
 8010120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801012e:	b29b      	uxth	r3, r3
 8010130:	461a      	mov	r2, r3
 8010132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010136:	4413      	add	r3, r2
 8010138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801013c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	011a      	lsls	r2, r3, #4
 801014a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801014e:	4413      	add	r3, r2
 8010150:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801015c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	691b      	ldr	r3, [r3, #16]
 8010164:	b29a      	uxth	r2, r3
 8010166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801016a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801016c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	69db      	ldr	r3, [r3, #28]
 8010178:	2b00      	cmp	r3, #0
 801017a:	f000 8218 	beq.w	80105ae <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801017e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801018c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	4413      	add	r3, r2
 8010198:	881b      	ldrh	r3, [r3, #0]
 801019a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801019e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80101a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d005      	beq.n	80101b6 <USB_EPStartXfer+0x12ea>
 80101aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80101ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d10d      	bne.n	80101d2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80101b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80101ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80101be:	2b00      	cmp	r3, #0
 80101c0:	f040 81f5 	bne.w	80105ae <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80101c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80101c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f040 81ee 	bne.w	80105ae <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80101d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	009b      	lsls	r3, r3, #2
 80101ea:	4413      	add	r3, r2
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101f8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80101fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801020a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	009b      	lsls	r3, r3, #2
 8010214:	441a      	add	r2, r3
 8010216:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801021a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801021e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801022a:	b29b      	uxth	r3, r3
 801022c:	8013      	strh	r3, [r2, #0]
 801022e:	e1be      	b.n	80105ae <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	78db      	ldrb	r3, [r3, #3]
 801023c:	2b01      	cmp	r3, #1
 801023e:	f040 81b4 	bne.w	80105aa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	699a      	ldr	r2, [r3, #24]
 801024e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	691b      	ldr	r3, [r3, #16]
 801025a:	429a      	cmp	r2, r3
 801025c:	d917      	bls.n	801028e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 801025e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 801026e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	699a      	ldr	r2, [r3, #24]
 801027a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801027e:	1ad2      	subs	r2, r2, r3
 8010280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	619a      	str	r2, [r3, #24]
 801028c:	e00e      	b.n	80102ac <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 801028e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	699b      	ldr	r3, [r3, #24]
 801029a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 801029e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2200      	movs	r2, #0
 80102aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80102ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	785b      	ldrb	r3, [r3, #1]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f040 8085 	bne.w	80103c8 <USB_EPStartXfer+0x14fc>
 80102be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80102cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102da:	b29b      	uxth	r3, r3
 80102dc:	461a      	mov	r2, r3
 80102de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80102e2:	4413      	add	r3, r2
 80102e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80102e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	011a      	lsls	r2, r3, #4
 80102f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80102fa:	4413      	add	r3, r2
 80102fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	b29b      	uxth	r3, r3
 801030c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010310:	b29a      	uxth	r2, r3
 8010312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010316:	801a      	strh	r2, [r3, #0]
 8010318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801031c:	2b3e      	cmp	r3, #62	; 0x3e
 801031e:	d923      	bls.n	8010368 <USB_EPStartXfer+0x149c>
 8010320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010324:	095b      	lsrs	r3, r3, #5
 8010326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801032a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801032e:	f003 031f 	and.w	r3, r3, #31
 8010332:	2b00      	cmp	r3, #0
 8010334:	d104      	bne.n	8010340 <USB_EPStartXfer+0x1474>
 8010336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801033a:	3b01      	subs	r3, #1
 801033c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010344:	881b      	ldrh	r3, [r3, #0]
 8010346:	b29a      	uxth	r2, r3
 8010348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801034c:	b29b      	uxth	r3, r3
 801034e:	029b      	lsls	r3, r3, #10
 8010350:	b29b      	uxth	r3, r3
 8010352:	4313      	orrs	r3, r2
 8010354:	b29b      	uxth	r3, r3
 8010356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801035a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801035e:	b29a      	uxth	r2, r3
 8010360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010364:	801a      	strh	r2, [r3, #0]
 8010366:	e060      	b.n	801042a <USB_EPStartXfer+0x155e>
 8010368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10c      	bne.n	801038a <USB_EPStartXfer+0x14be>
 8010370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	b29b      	uxth	r3, r3
 8010378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801037c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010380:	b29a      	uxth	r2, r3
 8010382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010386:	801a      	strh	r2, [r3, #0]
 8010388:	e04f      	b.n	801042a <USB_EPStartXfer+0x155e>
 801038a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801038e:	085b      	lsrs	r3, r3, #1
 8010390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010398:	f003 0301 	and.w	r3, r3, #1
 801039c:	2b00      	cmp	r3, #0
 801039e:	d004      	beq.n	80103aa <USB_EPStartXfer+0x14de>
 80103a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103a4:	3301      	adds	r3, #1
 80103a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80103aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	b29a      	uxth	r2, r3
 80103b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	029b      	lsls	r3, r3, #10
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	4313      	orrs	r3, r2
 80103be:	b29a      	uxth	r2, r3
 80103c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103c4:	801a      	strh	r2, [r3, #0]
 80103c6:	e030      	b.n	801042a <USB_EPStartXfer+0x155e>
 80103c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	785b      	ldrb	r3, [r3, #1]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d128      	bne.n	801042a <USB_EPStartXfer+0x155e>
 80103d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80103e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	461a      	mov	r2, r3
 80103f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80103fc:	4413      	add	r3, r2
 80103fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	011a      	lsls	r2, r3, #4
 8010410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010414:	4413      	add	r3, r2
 8010416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801041a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801041e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010422:	b29a      	uxth	r2, r3
 8010424:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010428:	801a      	strh	r2, [r3, #0]
 801042a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801042e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801043c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	785b      	ldrb	r3, [r3, #1]
 8010444:	2b00      	cmp	r3, #0
 8010446:	f040 8085 	bne.w	8010554 <USB_EPStartXfer+0x1688>
 801044a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801044e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801045c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010466:	b29b      	uxth	r3, r3
 8010468:	461a      	mov	r2, r3
 801046a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801046e:	4413      	add	r3, r2
 8010470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	011a      	lsls	r2, r3, #4
 8010482:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010486:	4413      	add	r3, r2
 8010488:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801048c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010494:	881b      	ldrh	r3, [r3, #0]
 8010496:	b29b      	uxth	r3, r3
 8010498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801049c:	b29a      	uxth	r2, r3
 801049e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80104a2:	801a      	strh	r2, [r3, #0]
 80104a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104a8:	2b3e      	cmp	r3, #62	; 0x3e
 80104aa:	d923      	bls.n	80104f4 <USB_EPStartXfer+0x1628>
 80104ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104b0:	095b      	lsrs	r3, r3, #5
 80104b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80104b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104ba:	f003 031f 	and.w	r3, r3, #31
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d104      	bne.n	80104cc <USB_EPStartXfer+0x1600>
 80104c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80104c6:	3b01      	subs	r3, #1
 80104c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80104cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80104d8:	b29b      	uxth	r3, r3
 80104da:	029b      	lsls	r3, r3, #10
 80104dc:	b29b      	uxth	r3, r3
 80104de:	4313      	orrs	r3, r2
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80104f0:	801a      	strh	r2, [r3, #0]
 80104f2:	e05c      	b.n	80105ae <USB_EPStartXfer+0x16e2>
 80104f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10c      	bne.n	8010516 <USB_EPStartXfer+0x164a>
 80104fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010500:	881b      	ldrh	r3, [r3, #0]
 8010502:	b29b      	uxth	r3, r3
 8010504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801050c:	b29a      	uxth	r2, r3
 801050e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010512:	801a      	strh	r2, [r3, #0]
 8010514:	e04b      	b.n	80105ae <USB_EPStartXfer+0x16e2>
 8010516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801051a:	085b      	lsrs	r3, r3, #1
 801051c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010524:	f003 0301 	and.w	r3, r3, #1
 8010528:	2b00      	cmp	r3, #0
 801052a:	d004      	beq.n	8010536 <USB_EPStartXfer+0x166a>
 801052c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010530:	3301      	adds	r3, #1
 8010532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801053a:	881b      	ldrh	r3, [r3, #0]
 801053c:	b29a      	uxth	r2, r3
 801053e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010542:	b29b      	uxth	r3, r3
 8010544:	029b      	lsls	r3, r3, #10
 8010546:	b29b      	uxth	r3, r3
 8010548:	4313      	orrs	r3, r2
 801054a:	b29a      	uxth	r2, r3
 801054c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010550:	801a      	strh	r2, [r3, #0]
 8010552:	e02c      	b.n	80105ae <USB_EPStartXfer+0x16e2>
 8010554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	785b      	ldrb	r3, [r3, #1]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d124      	bne.n	80105ae <USB_EPStartXfer+0x16e2>
 8010564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010572:	b29b      	uxth	r3, r3
 8010574:	461a      	mov	r2, r3
 8010576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801057a:	4413      	add	r3, r2
 801057c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	011a      	lsls	r2, r3, #4
 801058e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010592:	4413      	add	r3, r2
 8010594:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010598:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801059c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80105a6:	801a      	strh	r2, [r3, #0]
 80105a8:	e001      	b.n	80105ae <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	e03a      	b.n	8010624 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80105ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	4413      	add	r3, r2
 80105c8:	881b      	ldrh	r3, [r3, #0]
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80105d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80105dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80105e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80105e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80105e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80105ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80105f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	009b      	lsls	r3, r3, #2
 8010608:	441a      	add	r2, r3
 801060a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801060e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801061a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801061e:	b29b      	uxth	r3, r3
 8010620:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010622:	2300      	movs	r3, #0
}
 8010624:	4618      	mov	r0, r3
 8010626:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801062e:	b480      	push	{r7}
 8010630:	b085      	sub	sp, #20
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	785b      	ldrb	r3, [r3, #1]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d020      	beq.n	8010682 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	4413      	add	r3, r2
 801064a:	881b      	ldrh	r3, [r3, #0]
 801064c:	b29b      	uxth	r3, r3
 801064e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010656:	81bb      	strh	r3, [r7, #12]
 8010658:	89bb      	ldrh	r3, [r7, #12]
 801065a:	f083 0310 	eor.w	r3, r3, #16
 801065e:	81bb      	strh	r3, [r7, #12]
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	441a      	add	r2, r3
 801066a:	89bb      	ldrh	r3, [r7, #12]
 801066c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801067c:	b29b      	uxth	r3, r3
 801067e:	8013      	strh	r3, [r2, #0]
 8010680:	e01f      	b.n	80106c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	4413      	add	r3, r2
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	b29b      	uxth	r3, r3
 8010690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010698:	81fb      	strh	r3, [r7, #14]
 801069a:	89fb      	ldrh	r3, [r7, #14]
 801069c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80106a0:	81fb      	strh	r3, [r7, #14]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	441a      	add	r2, r3
 80106ac:	89fb      	ldrh	r3, [r7, #14]
 80106ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106be:	b29b      	uxth	r3, r3
 80106c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bc80      	pop	{r7}
 80106cc:	4770      	bx	lr

080106ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80106ce:	b480      	push	{r7}
 80106d0:	b087      	sub	sp, #28
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	7b1b      	ldrb	r3, [r3, #12]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f040 809d 	bne.w	801081c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	785b      	ldrb	r3, [r3, #1]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d04c      	beq.n	8010784 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	009b      	lsls	r3, r3, #2
 80106f2:	4413      	add	r3, r2
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	823b      	strh	r3, [r7, #16]
 80106f8:	8a3b      	ldrh	r3, [r7, #16]
 80106fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d01b      	beq.n	801073a <USB_EPClearStall+0x6c>
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	4413      	add	r3, r2
 801070c:	881b      	ldrh	r3, [r3, #0]
 801070e:	b29b      	uxth	r3, r3
 8010710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010718:	81fb      	strh	r3, [r7, #14]
 801071a:	687a      	ldr	r2, [r7, #4]
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	441a      	add	r2, r3
 8010724:	89fb      	ldrh	r3, [r7, #14]
 8010726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801072a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801072e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010736:	b29b      	uxth	r3, r3
 8010738:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	78db      	ldrb	r3, [r3, #3]
 801073e:	2b01      	cmp	r3, #1
 8010740:	d06c      	beq.n	801081c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	4413      	add	r3, r2
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	b29b      	uxth	r3, r3
 8010750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010758:	81bb      	strh	r3, [r7, #12]
 801075a:	89bb      	ldrh	r3, [r7, #12]
 801075c:	f083 0320 	eor.w	r3, r3, #32
 8010760:	81bb      	strh	r3, [r7, #12]
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	441a      	add	r2, r3
 801076c:	89bb      	ldrh	r3, [r7, #12]
 801076e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801077a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801077e:	b29b      	uxth	r3, r3
 8010780:	8013      	strh	r3, [r2, #0]
 8010782:	e04b      	b.n	801081c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010784:	687a      	ldr	r2, [r7, #4]
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	009b      	lsls	r3, r3, #2
 801078c:	4413      	add	r3, r2
 801078e:	881b      	ldrh	r3, [r3, #0]
 8010790:	82fb      	strh	r3, [r7, #22]
 8010792:	8afb      	ldrh	r3, [r7, #22]
 8010794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010798:	2b00      	cmp	r3, #0
 801079a:	d01b      	beq.n	80107d4 <USB_EPClearStall+0x106>
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	4413      	add	r3, r2
 80107a6:	881b      	ldrh	r3, [r3, #0]
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107b2:	82bb      	strh	r3, [r7, #20]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	441a      	add	r2, r3
 80107be:	8abb      	ldrh	r3, [r7, #20]
 80107c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80107cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	4413      	add	r3, r2
 80107de:	881b      	ldrh	r3, [r3, #0]
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107ea:	827b      	strh	r3, [r7, #18]
 80107ec:	8a7b      	ldrh	r3, [r7, #18]
 80107ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80107f2:	827b      	strh	r3, [r7, #18]
 80107f4:	8a7b      	ldrh	r3, [r7, #18]
 80107f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80107fa:	827b      	strh	r3, [r7, #18]
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	441a      	add	r2, r3
 8010806:	8a7b      	ldrh	r3, [r7, #18]
 8010808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801080c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010818:	b29b      	uxth	r3, r3
 801081a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801081c:	2300      	movs	r3, #0
}
 801081e:	4618      	mov	r0, r3
 8010820:	371c      	adds	r7, #28
 8010822:	46bd      	mov	sp, r7
 8010824:	bc80      	pop	{r7}
 8010826:	4770      	bx	lr

08010828 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	460b      	mov	r3, r1
 8010832:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010834:	78fb      	ldrb	r3, [r7, #3]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d103      	bne.n	8010842 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2280      	movs	r2, #128	; 0x80
 801083e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	bc80      	pop	{r7}
 801084c:	4770      	bx	lr

0801084e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801084e:	b480      	push	{r7}
 8010850:	b083      	sub	sp, #12
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	bc80      	pop	{r7}
 8010860:	4770      	bx	lr

08010862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8010862:	b480      	push	{r7}
 8010864:	b083      	sub	sp, #12
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	bc80      	pop	{r7}
 8010874:	4770      	bx	lr

08010876 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8010876:	b480      	push	{r7}
 8010878:	b085      	sub	sp, #20
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010884:	b29b      	uxth	r3, r3
 8010886:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010888:	68fb      	ldr	r3, [r7, #12]
}
 801088a:	4618      	mov	r0, r3
 801088c:	3714      	adds	r7, #20
 801088e:	46bd      	mov	sp, r7
 8010890:	bc80      	pop	{r7}
 8010892:	4770      	bx	lr

08010894 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bc80      	pop	{r7}
 80108a8:	4770      	bx	lr

080108aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80108aa:	b480      	push	{r7}
 80108ac:	b08b      	sub	sp, #44	; 0x2c
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	60f8      	str	r0, [r7, #12]
 80108b2:	60b9      	str	r1, [r7, #8]
 80108b4:	4611      	mov	r1, r2
 80108b6:	461a      	mov	r2, r3
 80108b8:	460b      	mov	r3, r1
 80108ba:	80fb      	strh	r3, [r7, #6]
 80108bc:	4613      	mov	r3, r2
 80108be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80108c0:	88bb      	ldrh	r3, [r7, #4]
 80108c2:	3301      	adds	r3, #1
 80108c4:	085b      	lsrs	r3, r3, #1
 80108c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80108d0:	88fb      	ldrh	r3, [r7, #6]
 80108d2:	005a      	lsls	r2, r3, #1
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	4413      	add	r3, r2
 80108d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	627b      	str	r3, [r7, #36]	; 0x24
 80108e2:	e01e      	b.n	8010922 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	3301      	adds	r3, #1
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	021b      	lsls	r3, r3, #8
 80108f2:	b21a      	sxth	r2, r3
 80108f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108f8:	4313      	orrs	r3, r2
 80108fa:	b21b      	sxth	r3, r3
 80108fc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80108fe:	6a3b      	ldr	r3, [r7, #32]
 8010900:	8a7a      	ldrh	r2, [r7, #18]
 8010902:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	3302      	adds	r3, #2
 8010908:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 801090a:	6a3b      	ldr	r3, [r7, #32]
 801090c:	3302      	adds	r3, #2
 801090e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	3301      	adds	r3, #1
 8010914:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	3301      	adds	r3, #1
 801091a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091e:	3b01      	subs	r3, #1
 8010920:	627b      	str	r3, [r7, #36]	; 0x24
 8010922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1dd      	bne.n	80108e4 <USB_WritePMA+0x3a>
  }
}
 8010928:	bf00      	nop
 801092a:	bf00      	nop
 801092c:	372c      	adds	r7, #44	; 0x2c
 801092e:	46bd      	mov	sp, r7
 8010930:	bc80      	pop	{r7}
 8010932:	4770      	bx	lr

08010934 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010934:	b480      	push	{r7}
 8010936:	b08b      	sub	sp, #44	; 0x2c
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	4611      	mov	r1, r2
 8010940:	461a      	mov	r2, r3
 8010942:	460b      	mov	r3, r1
 8010944:	80fb      	strh	r3, [r7, #6]
 8010946:	4613      	mov	r3, r2
 8010948:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801094a:	88bb      	ldrh	r3, [r7, #4]
 801094c:	085b      	lsrs	r3, r3, #1
 801094e:	b29b      	uxth	r3, r3
 8010950:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801095a:	88fb      	ldrh	r3, [r7, #6]
 801095c:	005a      	lsls	r2, r3, #1
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	4413      	add	r3, r2
 8010962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010966:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	627b      	str	r3, [r7, #36]	; 0x24
 801096c:	e01b      	b.n	80109a6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801096e:	6a3b      	ldr	r3, [r7, #32]
 8010970:	881b      	ldrh	r3, [r3, #0]
 8010972:	b29b      	uxth	r3, r3
 8010974:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010976:	6a3b      	ldr	r3, [r7, #32]
 8010978:	3302      	adds	r3, #2
 801097a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	b2da      	uxtb	r2, r3
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010984:	69fb      	ldr	r3, [r7, #28]
 8010986:	3301      	adds	r3, #1
 8010988:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	0a1b      	lsrs	r3, r3, #8
 801098e:	b2da      	uxtb	r2, r3
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	3301      	adds	r3, #1
 8010998:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	3302      	adds	r3, #2
 801099e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	3b01      	subs	r3, #1
 80109a4:	627b      	str	r3, [r7, #36]	; 0x24
 80109a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1e0      	bne.n	801096e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80109ac:	88bb      	ldrh	r3, [r7, #4]
 80109ae:	f003 0301 	and.w	r3, r3, #1
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d007      	beq.n	80109c8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80109b8:	6a3b      	ldr	r3, [r7, #32]
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	b29b      	uxth	r3, r3
 80109be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	b2da      	uxtb	r2, r3
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	701a      	strb	r2, [r3, #0]
  }
}
 80109c8:	bf00      	nop
 80109ca:	372c      	adds	r7, #44	; 0x2c
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bc80      	pop	{r7}
 80109d0:	4770      	bx	lr

080109d2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b084      	sub	sp, #16
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
 80109da:	460b      	mov	r3, r1
 80109dc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80109de:	2300      	movs	r3, #0
 80109e0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	7c1b      	ldrb	r3, [r3, #16]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d115      	bne.n	8010a16 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80109ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109ee:	2202      	movs	r2, #2
 80109f0:	2181      	movs	r1, #129	; 0x81
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f001 fe99 	bl	801272a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2201      	movs	r2, #1
 80109fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80109fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a02:	2202      	movs	r2, #2
 8010a04:	2101      	movs	r1, #1
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f001 fe8f 	bl	801272a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2201      	movs	r2, #1
 8010a10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8010a14:	e012      	b.n	8010a3c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010a16:	2340      	movs	r3, #64	; 0x40
 8010a18:	2202      	movs	r2, #2
 8010a1a:	2181      	movs	r1, #129	; 0x81
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f001 fe84 	bl	801272a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010a28:	2340      	movs	r3, #64	; 0x40
 8010a2a:	2202      	movs	r2, #2
 8010a2c:	2101      	movs	r1, #1
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f001 fe7b 	bl	801272a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2201      	movs	r2, #1
 8010a38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010a3c:	2308      	movs	r3, #8
 8010a3e:	2203      	movs	r2, #3
 8010a40:	2182      	movs	r1, #130	; 0x82
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f001 fe71 	bl	801272a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010a4e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010a52:	f001 ff91 	bl	8012978 <USBD_static_malloc>
 8010a56:	4602      	mov	r2, r0
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d102      	bne.n	8010a6e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	73fb      	strb	r3, [r7, #15]
 8010a6c:	e026      	b.n	8010abc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	2200      	movs	r2, #0
 8010a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	7c1b      	ldrb	r3, [r3, #16]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d109      	bne.n	8010aac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010aa2:	2101      	movs	r1, #1
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f001 ff31 	bl	801290c <USBD_LL_PrepareReceive>
 8010aaa:	e007      	b.n	8010abc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ab2:	2340      	movs	r3, #64	; 0x40
 8010ab4:	2101      	movs	r1, #1
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f001 ff28 	bl	801290c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b084      	sub	sp, #16
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	460b      	mov	r3, r1
 8010ad0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010ad6:	2181      	movs	r1, #129	; 0x81
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f001 fe4c 	bl	8012776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010ae4:	2101      	movs	r1, #1
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f001 fe45 	bl	8012776 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010af4:	2182      	movs	r1, #130	; 0x82
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f001 fe3d 	bl	8012776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00e      	beq.n	8010b2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f001 ff37 	bl	8012990 <USBD_static_free>
    pdev->pClassData = NULL;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8010b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3710      	adds	r7, #16
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d039      	beq.n	8010bd2 <USBD_CDC_Setup+0x9e>
 8010b5e:	2b20      	cmp	r3, #32
 8010b60:	d17f      	bne.n	8010c62 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	88db      	ldrh	r3, [r3, #6]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d029      	beq.n	8010bbe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	b25b      	sxtb	r3, r3
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	da11      	bge.n	8010b98 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b7a:	689b      	ldr	r3, [r3, #8]
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8010b80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010b82:	683a      	ldr	r2, [r7, #0]
 8010b84:	88d2      	ldrh	r2, [r2, #6]
 8010b86:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010b88:	6939      	ldr	r1, [r7, #16]
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	88db      	ldrh	r3, [r3, #6]
 8010b8e:	461a      	mov	r2, r3
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 fa0a 	bl	8011faa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8010b96:	e06b      	b.n	8010c70 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	785a      	ldrb	r2, [r3, #1]
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	88db      	ldrh	r3, [r3, #6]
 8010ba6:	b2da      	uxtb	r2, r3
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010bae:	6939      	ldr	r1, [r7, #16]
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	88db      	ldrh	r3, [r3, #6]
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f001 fa25 	bl	8012006 <USBD_CtlPrepareRx>
      break;
 8010bbc:	e058      	b.n	8010c70 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bc4:	689b      	ldr	r3, [r3, #8]
 8010bc6:	683a      	ldr	r2, [r7, #0]
 8010bc8:	7850      	ldrb	r0, [r2, #1]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	6839      	ldr	r1, [r7, #0]
 8010bce:	4798      	blx	r3
      break;
 8010bd0:	e04e      	b.n	8010c70 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	785b      	ldrb	r3, [r3, #1]
 8010bd6:	2b0b      	cmp	r3, #11
 8010bd8:	d02e      	beq.n	8010c38 <USBD_CDC_Setup+0x104>
 8010bda:	2b0b      	cmp	r3, #11
 8010bdc:	dc38      	bgt.n	8010c50 <USBD_CDC_Setup+0x11c>
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d002      	beq.n	8010be8 <USBD_CDC_Setup+0xb4>
 8010be2:	2b0a      	cmp	r3, #10
 8010be4:	d014      	beq.n	8010c10 <USBD_CDC_Setup+0xdc>
 8010be6:	e033      	b.n	8010c50 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bee:	2b03      	cmp	r3, #3
 8010bf0:	d107      	bne.n	8010c02 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8010bf2:	f107 030c 	add.w	r3, r7, #12
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f001 f9d5 	bl	8011faa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010c00:	e02e      	b.n	8010c60 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8010c02:	6839      	ldr	r1, [r7, #0]
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f001 f966 	bl	8011ed6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c0a:	2302      	movs	r3, #2
 8010c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8010c0e:	e027      	b.n	8010c60 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d107      	bne.n	8010c2a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8010c1a:	f107 030f 	add.w	r3, r7, #15
 8010c1e:	2201      	movs	r2, #1
 8010c20:	4619      	mov	r1, r3
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f001 f9c1 	bl	8011faa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010c28:	e01a      	b.n	8010c60 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8010c2a:	6839      	ldr	r1, [r7, #0]
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f001 f952 	bl	8011ed6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c32:	2302      	movs	r3, #2
 8010c34:	75fb      	strb	r3, [r7, #23]
          break;
 8010c36:	e013      	b.n	8010c60 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c3e:	2b03      	cmp	r3, #3
 8010c40:	d00d      	beq.n	8010c5e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8010c42:	6839      	ldr	r1, [r7, #0]
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f001 f946 	bl	8011ed6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c4a:	2302      	movs	r3, #2
 8010c4c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010c4e:	e006      	b.n	8010c5e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f001 f93f 	bl	8011ed6 <USBD_CtlError>
          ret = USBD_FAIL;
 8010c58:	2302      	movs	r3, #2
 8010c5a:	75fb      	strb	r3, [r7, #23]
          break;
 8010c5c:	e000      	b.n	8010c60 <USBD_CDC_Setup+0x12c>
          break;
 8010c5e:	bf00      	nop
      }
      break;
 8010c60:	e006      	b.n	8010c70 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010c62:	6839      	ldr	r1, [r7, #0]
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f001 f936 	bl	8011ed6 <USBD_CtlError>
      ret = USBD_FAIL;
 8010c6a:	2302      	movs	r3, #2
 8010c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8010c6e:	bf00      	nop
  }

  return ret;
 8010c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3718      	adds	r7, #24
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b084      	sub	sp, #16
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
 8010c82:	460b      	mov	r3, r1
 8010c84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c8c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c94:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d03a      	beq.n	8010d16 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010ca0:	78fa      	ldrb	r2, [r7, #3]
 8010ca2:	6879      	ldr	r1, [r7, #4]
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4413      	add	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	440b      	add	r3, r1
 8010cae:	331c      	adds	r3, #28
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d029      	beq.n	8010d0a <USBD_CDC_DataIn+0x90>
 8010cb6:	78fa      	ldrb	r2, [r7, #3]
 8010cb8:	6879      	ldr	r1, [r7, #4]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	440b      	add	r3, r1
 8010cc4:	331c      	adds	r3, #28
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	78f9      	ldrb	r1, [r7, #3]
 8010cca:	68b8      	ldr	r0, [r7, #8]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	009b      	lsls	r3, r3, #2
 8010cd0:	440b      	add	r3, r1
 8010cd2:	00db      	lsls	r3, r3, #3
 8010cd4:	4403      	add	r3, r0
 8010cd6:	3338      	adds	r3, #56	; 0x38
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	fbb2 f1f3 	udiv	r1, r2, r3
 8010cde:	fb01 f303 	mul.w	r3, r1, r3
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d110      	bne.n	8010d0a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010ce8:	78fa      	ldrb	r2, [r7, #3]
 8010cea:	6879      	ldr	r1, [r7, #4]
 8010cec:	4613      	mov	r3, r2
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	4413      	add	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	440b      	add	r3, r1
 8010cf6:	331c      	adds	r3, #28
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010cfc:	78f9      	ldrb	r1, [r7, #3]
 8010cfe:	2300      	movs	r3, #0
 8010d00:	2200      	movs	r2, #0
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f001 fddf 	bl	80128c6 <USBD_LL_Transmit>
 8010d08:	e003      	b.n	8010d12 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8010d12:	2300      	movs	r3, #0
 8010d14:	e000      	b.n	8010d18 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8010d16:	2302      	movs	r3, #2
  }
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3710      	adds	r7, #16
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d32:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010d34:	78fb      	ldrb	r3, [r7, #3]
 8010d36:	4619      	mov	r1, r3
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f001 fe0a 	bl	8012952 <USBD_LL_GetRxDataSize>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00d      	beq.n	8010d6c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010d64:	4611      	mov	r1, r2
 8010d66:	4798      	blx	r3

    return USBD_OK;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	e000      	b.n	8010d6e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8010d6c:	2302      	movs	r3, #2
  }
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b084      	sub	sp, #16
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d84:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d015      	beq.n	8010dbc <USBD_CDC_EP0_RxReady+0x46>
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010d96:	2bff      	cmp	r3, #255	; 0xff
 8010d98:	d010      	beq.n	8010dbc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010da0:	689b      	ldr	r3, [r3, #8]
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010da8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010db0:	b292      	uxth	r2, r2
 8010db2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	22ff      	movs	r2, #255	; 0xff
 8010db8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010dbc:	2300      	movs	r3, #0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3710      	adds	r7, #16
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
	...

08010dc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2243      	movs	r2, #67	; 0x43
 8010dd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8010dd6:	4b03      	ldr	r3, [pc, #12]	; (8010de4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	370c      	adds	r7, #12
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bc80      	pop	{r7}
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	20000720 	.word	0x20000720

08010de8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2243      	movs	r2, #67	; 0x43
 8010df4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010df6:	4b03      	ldr	r3, [pc, #12]	; (8010e04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	370c      	adds	r7, #12
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bc80      	pop	{r7}
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	200006dc 	.word	0x200006dc

08010e08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2243      	movs	r2, #67	; 0x43
 8010e14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010e16:	4b03      	ldr	r3, [pc, #12]	; (8010e24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bc80      	pop	{r7}
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	20000764 	.word	0x20000764

08010e28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	220a      	movs	r2, #10
 8010e34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010e36:	4b03      	ldr	r3, [pc, #12]	; (8010e44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bc80      	pop	{r7}
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	20000698 	.word	0x20000698

08010e48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010e52:	2302      	movs	r3, #2
 8010e54:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d005      	beq.n	8010e68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	683a      	ldr	r2, [r7, #0]
 8010e60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3714      	adds	r7, #20
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bc80      	pop	{r7}
 8010e72:	4770      	bx	lr

08010e74 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b087      	sub	sp, #28
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	4613      	mov	r3, r2
 8010e80:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	68ba      	ldr	r2, [r7, #8]
 8010e8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010e92:	88fa      	ldrh	r2, [r7, #6]
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010e9a:	2300      	movs	r3, #0
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	371c      	adds	r7, #28
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bc80      	pop	{r7}
 8010ea4:	4770      	bx	lr

08010ea6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8010ea6:	b480      	push	{r7}
 8010ea8:	b085      	sub	sp, #20
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eb6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3714      	adds	r7, #20
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bc80      	pop	{r7}
 8010eca:	4770      	bx	lr

08010ecc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d01c      	beq.n	8010f20 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d115      	bne.n	8010f1c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	2181      	movs	r1, #129	; 0x81
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f001 fcd7 	bl	80128c6 <USBD_LL_Transmit>

      return USBD_OK;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e002      	b.n	8010f22 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	e000      	b.n	8010f22 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8010f20:	2302      	movs	r3, #2
  }
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010f2a:	b580      	push	{r7, lr}
 8010f2c:	b084      	sub	sp, #16
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f38:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d017      	beq.n	8010f74 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	7c1b      	ldrb	r3, [r3, #16]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d109      	bne.n	8010f60 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f56:	2101      	movs	r1, #1
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f001 fcd7 	bl	801290c <USBD_LL_PrepareReceive>
 8010f5e:	e007      	b.n	8010f70 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f66:	2340      	movs	r3, #64	; 0x40
 8010f68:	2101      	movs	r1, #1
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f001 fcce 	bl	801290c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	e000      	b.n	8010f76 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010f74:	2302      	movs	r3, #2
  }
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3710      	adds	r7, #16
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b084      	sub	sp, #16
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	60f8      	str	r0, [r7, #12]
 8010f86:	60b9      	str	r1, [r7, #8]
 8010f88:	4613      	mov	r3, r2
 8010f8a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d101      	bne.n	8010f96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010f92:	2302      	movs	r3, #2
 8010f94:	e01a      	b.n	8010fcc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d003      	beq.n	8010fa8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	68ba      	ldr	r2, [r7, #8]
 8010fb2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	79fa      	ldrb	r2, [r7, #7]
 8010fc2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010fc4:	68f8      	ldr	r0, [r7, #12]
 8010fc6:	f001 fb3b 	bl	8012640 <USBD_LL_Init>

  return USBD_OK;
 8010fca:	2300      	movs	r3, #0
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b085      	sub	sp, #20
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d006      	beq.n	8010ff6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	683a      	ldr	r2, [r7, #0]
 8010fec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	73fb      	strb	r3, [r7, #15]
 8010ff4:	e001      	b.n	8010ffa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010ff6:	2302      	movs	r3, #2
 8010ff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3714      	adds	r7, #20
 8011000:	46bd      	mov	sp, r7
 8011002:	bc80      	pop	{r7}
 8011004:	4770      	bx	lr

08011006 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011006:	b580      	push	{r7, lr}
 8011008:	b082      	sub	sp, #8
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f001 fb70 	bl	80126f4 <USBD_LL_Start>

  return USBD_OK;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3708      	adds	r7, #8
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801101e:	b480      	push	{r7}
 8011020:	b083      	sub	sp, #12
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011026:	2300      	movs	r3, #0
}
 8011028:	4618      	mov	r0, r3
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	bc80      	pop	{r7}
 8011030:	4770      	bx	lr

08011032 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b084      	sub	sp, #16
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	460b      	mov	r3, r1
 801103c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801103e:	2302      	movs	r3, #2
 8011040:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00c      	beq.n	8011066 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	78fa      	ldrb	r2, [r7, #3]
 8011056:	4611      	mov	r1, r2
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	4798      	blx	r3
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d101      	bne.n	8011066 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011062:	2300      	movs	r3, #0
 8011064:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011066:	7bfb      	ldrb	r3, [r7, #15]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3710      	adds	r7, #16
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	460b      	mov	r3, r1
 801107a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	78fa      	ldrb	r2, [r7, #3]
 8011086:	4611      	mov	r1, r2
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	4798      	blx	r3

  return USBD_OK;
 801108c:	2300      	movs	r3, #0
}
 801108e:	4618      	mov	r0, r3
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b082      	sub	sp, #8
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80110a6:	6839      	ldr	r1, [r7, #0]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f000 fed8 	bl	8011e5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2201      	movs	r2, #1
 80110b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80110bc:	461a      	mov	r2, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80110ca:	f003 031f 	and.w	r3, r3, #31
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	d016      	beq.n	8011100 <USBD_LL_SetupStage+0x6a>
 80110d2:	2b02      	cmp	r3, #2
 80110d4:	d81c      	bhi.n	8011110 <USBD_LL_SetupStage+0x7a>
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d002      	beq.n	80110e0 <USBD_LL_SetupStage+0x4a>
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d008      	beq.n	80110f0 <USBD_LL_SetupStage+0x5a>
 80110de:	e017      	b.n	8011110 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80110e6:	4619      	mov	r1, r3
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 f9cb 	bl	8011484 <USBD_StdDevReq>
      break;
 80110ee:	e01a      	b.n	8011126 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80110f6:	4619      	mov	r1, r3
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 fa2d 	bl	8011558 <USBD_StdItfReq>
      break;
 80110fe:	e012      	b.n	8011126 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011106:	4619      	mov	r1, r3
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f000 fa6d 	bl	80115e8 <USBD_StdEPReq>
      break;
 801110e:	e00a      	b.n	8011126 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011116:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801111a:	b2db      	uxtb	r3, r3
 801111c:	4619      	mov	r1, r3
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f001 fb48 	bl	80127b4 <USBD_LL_StallEP>
      break;
 8011124:	bf00      	nop
  }

  return USBD_OK;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b086      	sub	sp, #24
 8011134:	af00      	add	r7, sp, #0
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	460b      	mov	r3, r1
 801113a:	607a      	str	r2, [r7, #4]
 801113c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801113e:	7afb      	ldrb	r3, [r7, #11]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d14b      	bne.n	80111dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801114a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011152:	2b03      	cmp	r3, #3
 8011154:	d134      	bne.n	80111c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	68da      	ldr	r2, [r3, #12]
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	429a      	cmp	r2, r3
 8011160:	d919      	bls.n	8011196 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	68da      	ldr	r2, [r3, #12]
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	691b      	ldr	r3, [r3, #16]
 801116a:	1ad2      	subs	r2, r2, r3
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	68da      	ldr	r2, [r3, #12]
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011178:	429a      	cmp	r2, r3
 801117a:	d203      	bcs.n	8011184 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8011180:	b29b      	uxth	r3, r3
 8011182:	e002      	b.n	801118a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011188:	b29b      	uxth	r3, r3
 801118a:	461a      	mov	r2, r3
 801118c:	6879      	ldr	r1, [r7, #4]
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	f000 ff57 	bl	8012042 <USBD_CtlContinueRx>
 8011194:	e038      	b.n	8011208 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d00a      	beq.n	80111b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80111a8:	2b03      	cmp	r3, #3
 80111aa:	d105      	bne.n	80111b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111b2:	691b      	ldr	r3, [r3, #16]
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	f000 ff54 	bl	8012066 <USBD_CtlSendStatus>
 80111be:	e023      	b.n	8011208 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80111c6:	2b05      	cmp	r3, #5
 80111c8:	d11e      	bne.n	8011208 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80111d2:	2100      	movs	r1, #0
 80111d4:	68f8      	ldr	r0, [r7, #12]
 80111d6:	f001 faed 	bl	80127b4 <USBD_LL_StallEP>
 80111da:	e015      	b.n	8011208 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111e2:	699b      	ldr	r3, [r3, #24]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00d      	beq.n	8011204 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80111ee:	2b03      	cmp	r3, #3
 80111f0:	d108      	bne.n	8011204 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	7afa      	ldrb	r2, [r7, #11]
 80111fc:	4611      	mov	r1, r2
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	4798      	blx	r3
 8011202:	e001      	b.n	8011208 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011204:	2302      	movs	r3, #2
 8011206:	e000      	b.n	801120a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3718      	adds	r7, #24
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b086      	sub	sp, #24
 8011216:	af00      	add	r7, sp, #0
 8011218:	60f8      	str	r0, [r7, #12]
 801121a:	460b      	mov	r3, r1
 801121c:	607a      	str	r2, [r7, #4]
 801121e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011220:	7afb      	ldrb	r3, [r7, #11]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d17f      	bne.n	8011326 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	3314      	adds	r3, #20
 801122a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011232:	2b02      	cmp	r3, #2
 8011234:	d15c      	bne.n	80112f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	68da      	ldr	r2, [r3, #12]
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	691b      	ldr	r3, [r3, #16]
 801123e:	429a      	cmp	r2, r3
 8011240:	d915      	bls.n	801126e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	68da      	ldr	r2, [r3, #12]
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	691b      	ldr	r3, [r3, #16]
 801124a:	1ad2      	subs	r2, r2, r3
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	b29b      	uxth	r3, r3
 8011256:	461a      	mov	r2, r3
 8011258:	6879      	ldr	r1, [r7, #4]
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	f000 fec1 	bl	8011fe2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011260:	2300      	movs	r3, #0
 8011262:	2200      	movs	r2, #0
 8011264:	2100      	movs	r1, #0
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f001 fb50 	bl	801290c <USBD_LL_PrepareReceive>
 801126c:	e04e      	b.n	801130c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	689b      	ldr	r3, [r3, #8]
 8011272:	697a      	ldr	r2, [r7, #20]
 8011274:	6912      	ldr	r2, [r2, #16]
 8011276:	fbb3 f1f2 	udiv	r1, r3, r2
 801127a:	fb01 f202 	mul.w	r2, r1, r2
 801127e:	1a9b      	subs	r3, r3, r2
 8011280:	2b00      	cmp	r3, #0
 8011282:	d11c      	bne.n	80112be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	689a      	ldr	r2, [r3, #8]
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801128c:	429a      	cmp	r2, r3
 801128e:	d316      	bcc.n	80112be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	689a      	ldr	r2, [r3, #8]
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801129a:	429a      	cmp	r2, r3
 801129c:	d20f      	bcs.n	80112be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801129e:	2200      	movs	r2, #0
 80112a0:	2100      	movs	r1, #0
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f000 fe9d 	bl	8011fe2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2200      	movs	r2, #0
 80112ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112b0:	2300      	movs	r3, #0
 80112b2:	2200      	movs	r2, #0
 80112b4:	2100      	movs	r1, #0
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f001 fb28 	bl	801290c <USBD_LL_PrepareReceive>
 80112bc:	e026      	b.n	801130c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d00a      	beq.n	80112e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80112d0:	2b03      	cmp	r3, #3
 80112d2:	d105      	bne.n	80112e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80112e0:	2180      	movs	r1, #128	; 0x80
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f001 fa66 	bl	80127b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	f000 fecf 	bl	801208c <USBD_CtlReceiveStatus>
 80112ee:	e00d      	b.n	801130c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80112f6:	2b04      	cmp	r3, #4
 80112f8:	d004      	beq.n	8011304 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011304:	2180      	movs	r1, #128	; 0x80
 8011306:	68f8      	ldr	r0, [r7, #12]
 8011308:	f001 fa54 	bl	80127b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011312:	2b01      	cmp	r3, #1
 8011314:	d11d      	bne.n	8011352 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f7ff fe81 	bl	801101e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2200      	movs	r2, #0
 8011320:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011324:	e015      	b.n	8011352 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801132c:	695b      	ldr	r3, [r3, #20]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00d      	beq.n	801134e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011338:	2b03      	cmp	r3, #3
 801133a:	d108      	bne.n	801134e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	7afa      	ldrb	r2, [r7, #11]
 8011346:	4611      	mov	r1, r2
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	4798      	blx	r3
 801134c:	e001      	b.n	8011352 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801134e:	2302      	movs	r3, #2
 8011350:	e000      	b.n	8011354 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011352:	2300      	movs	r3, #0
}
 8011354:	4618      	mov	r0, r3
 8011356:	3718      	adds	r7, #24
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011364:	2340      	movs	r3, #64	; 0x40
 8011366:	2200      	movs	r2, #0
 8011368:	2100      	movs	r1, #0
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f001 f9dd 	bl	801272a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2201      	movs	r2, #1
 8011374:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2240      	movs	r2, #64	; 0x40
 801137c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011380:	2340      	movs	r3, #64	; 0x40
 8011382:	2200      	movs	r2, #0
 8011384:	2180      	movs	r1, #128	; 0x80
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f001 f9cf 	bl	801272a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2201      	movs	r2, #1
 8011390:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2240      	movs	r2, #64	; 0x40
 8011396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2201      	movs	r2, #1
 801139c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2200      	movs	r2, #0
 80113b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d009      	beq.n	80113d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	6852      	ldr	r2, [r2, #4]
 80113cc:	b2d2      	uxtb	r2, r2
 80113ce:	4611      	mov	r1, r2
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	4798      	blx	r3
  }

  return USBD_OK;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3708      	adds	r7, #8
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80113de:	b480      	push	{r7}
 80113e0:	b083      	sub	sp, #12
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
 80113e6:	460b      	mov	r3, r1
 80113e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	78fa      	ldrb	r2, [r7, #3]
 80113ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bc80      	pop	{r7}
 80113fa:	4770      	bx	lr

080113fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2204      	movs	r2, #4
 8011414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011418:	2300      	movs	r3, #0
}
 801141a:	4618      	mov	r0, r3
 801141c:	370c      	adds	r7, #12
 801141e:	46bd      	mov	sp, r7
 8011420:	bc80      	pop	{r7}
 8011422:	4770      	bx	lr

08011424 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011432:	2b04      	cmp	r3, #4
 8011434:	d105      	bne.n	8011442 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	bc80      	pop	{r7}
 801144c:	4770      	bx	lr

0801144e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801144e:	b580      	push	{r7, lr}
 8011450:	b082      	sub	sp, #8
 8011452:	af00      	add	r7, sp, #0
 8011454:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801145c:	2b03      	cmp	r3, #3
 801145e:	d10b      	bne.n	8011478 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011466:	69db      	ldr	r3, [r3, #28]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d005      	beq.n	8011478 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011472:	69db      	ldr	r3, [r3, #28]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011478:	2300      	movs	r3, #0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
	...

08011484 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801149a:	2b40      	cmp	r3, #64	; 0x40
 801149c:	d005      	beq.n	80114aa <USBD_StdDevReq+0x26>
 801149e:	2b40      	cmp	r3, #64	; 0x40
 80114a0:	d84f      	bhi.n	8011542 <USBD_StdDevReq+0xbe>
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d009      	beq.n	80114ba <USBD_StdDevReq+0x36>
 80114a6:	2b20      	cmp	r3, #32
 80114a8:	d14b      	bne.n	8011542 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114b0:	689b      	ldr	r3, [r3, #8]
 80114b2:	6839      	ldr	r1, [r7, #0]
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	4798      	blx	r3
      break;
 80114b8:	e048      	b.n	801154c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	785b      	ldrb	r3, [r3, #1]
 80114be:	2b09      	cmp	r3, #9
 80114c0:	d839      	bhi.n	8011536 <USBD_StdDevReq+0xb2>
 80114c2:	a201      	add	r2, pc, #4	; (adr r2, 80114c8 <USBD_StdDevReq+0x44>)
 80114c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114c8:	08011519 	.word	0x08011519
 80114cc:	0801152d 	.word	0x0801152d
 80114d0:	08011537 	.word	0x08011537
 80114d4:	08011523 	.word	0x08011523
 80114d8:	08011537 	.word	0x08011537
 80114dc:	080114fb 	.word	0x080114fb
 80114e0:	080114f1 	.word	0x080114f1
 80114e4:	08011537 	.word	0x08011537
 80114e8:	0801150f 	.word	0x0801150f
 80114ec:	08011505 	.word	0x08011505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 f9dc 	bl	80118b0 <USBD_GetDescriptor>
          break;
 80114f8:	e022      	b.n	8011540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80114fa:	6839      	ldr	r1, [r7, #0]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 fb3f 	bl	8011b80 <USBD_SetAddress>
          break;
 8011502:	e01d      	b.n	8011540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 fb7e 	bl	8011c08 <USBD_SetConfig>
          break;
 801150c:	e018      	b.n	8011540 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801150e:	6839      	ldr	r1, [r7, #0]
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f000 fc07 	bl	8011d24 <USBD_GetConfig>
          break;
 8011516:	e013      	b.n	8011540 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011518:	6839      	ldr	r1, [r7, #0]
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fc37 	bl	8011d8e <USBD_GetStatus>
          break;
 8011520:	e00e      	b.n	8011540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011522:	6839      	ldr	r1, [r7, #0]
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f000 fc65 	bl	8011df4 <USBD_SetFeature>
          break;
 801152a:	e009      	b.n	8011540 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801152c:	6839      	ldr	r1, [r7, #0]
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 fc74 	bl	8011e1c <USBD_ClrFeature>
          break;
 8011534:	e004      	b.n	8011540 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8011536:	6839      	ldr	r1, [r7, #0]
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f000 fccc 	bl	8011ed6 <USBD_CtlError>
          break;
 801153e:	bf00      	nop
      }
      break;
 8011540:	e004      	b.n	801154c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8011542:	6839      	ldr	r1, [r7, #0]
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f000 fcc6 	bl	8011ed6 <USBD_CtlError>
      break;
 801154a:	bf00      	nop
  }

  return ret;
 801154c:	7bfb      	ldrb	r3, [r7, #15]
}
 801154e:	4618      	mov	r0, r3
 8011550:	3710      	adds	r7, #16
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop

08011558 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011562:	2300      	movs	r3, #0
 8011564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801156e:	2b40      	cmp	r3, #64	; 0x40
 8011570:	d005      	beq.n	801157e <USBD_StdItfReq+0x26>
 8011572:	2b40      	cmp	r3, #64	; 0x40
 8011574:	d82e      	bhi.n	80115d4 <USBD_StdItfReq+0x7c>
 8011576:	2b00      	cmp	r3, #0
 8011578:	d001      	beq.n	801157e <USBD_StdItfReq+0x26>
 801157a:	2b20      	cmp	r3, #32
 801157c:	d12a      	bne.n	80115d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011584:	3b01      	subs	r3, #1
 8011586:	2b02      	cmp	r3, #2
 8011588:	d81d      	bhi.n	80115c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	889b      	ldrh	r3, [r3, #4]
 801158e:	b2db      	uxtb	r3, r3
 8011590:	2b01      	cmp	r3, #1
 8011592:	d813      	bhi.n	80115bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	6839      	ldr	r1, [r7, #0]
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	4798      	blx	r3
 80115a2:	4603      	mov	r3, r0
 80115a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	88db      	ldrh	r3, [r3, #6]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d110      	bne.n	80115d0 <USBD_StdItfReq+0x78>
 80115ae:	7bfb      	ldrb	r3, [r7, #15]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d10d      	bne.n	80115d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 fd56 	bl	8012066 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80115ba:	e009      	b.n	80115d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80115bc:	6839      	ldr	r1, [r7, #0]
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f000 fc89 	bl	8011ed6 <USBD_CtlError>
          break;
 80115c4:	e004      	b.n	80115d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80115c6:	6839      	ldr	r1, [r7, #0]
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f000 fc84 	bl	8011ed6 <USBD_CtlError>
          break;
 80115ce:	e000      	b.n	80115d2 <USBD_StdItfReq+0x7a>
          break;
 80115d0:	bf00      	nop
      }
      break;
 80115d2:	e004      	b.n	80115de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80115d4:	6839      	ldr	r1, [r7, #0]
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 fc7d 	bl	8011ed6 <USBD_CtlError>
      break;
 80115dc:	bf00      	nop
  }

  return USBD_OK;
 80115de:	2300      	movs	r3, #0
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3710      	adds	r7, #16
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80115f2:	2300      	movs	r3, #0
 80115f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	889b      	ldrh	r3, [r3, #4]
 80115fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011604:	2b40      	cmp	r3, #64	; 0x40
 8011606:	d007      	beq.n	8011618 <USBD_StdEPReq+0x30>
 8011608:	2b40      	cmp	r3, #64	; 0x40
 801160a:	f200 8146 	bhi.w	801189a <USBD_StdEPReq+0x2b2>
 801160e:	2b00      	cmp	r3, #0
 8011610:	d00a      	beq.n	8011628 <USBD_StdEPReq+0x40>
 8011612:	2b20      	cmp	r3, #32
 8011614:	f040 8141 	bne.w	801189a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801161e:	689b      	ldr	r3, [r3, #8]
 8011620:	6839      	ldr	r1, [r7, #0]
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	4798      	blx	r3
      break;
 8011626:	e13d      	b.n	80118a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011630:	2b20      	cmp	r3, #32
 8011632:	d10a      	bne.n	801164a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	6839      	ldr	r1, [r7, #0]
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	4798      	blx	r3
 8011642:	4603      	mov	r3, r0
 8011644:	73fb      	strb	r3, [r7, #15]

        return ret;
 8011646:	7bfb      	ldrb	r3, [r7, #15]
 8011648:	e12d      	b.n	80118a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	785b      	ldrb	r3, [r3, #1]
 801164e:	2b03      	cmp	r3, #3
 8011650:	d007      	beq.n	8011662 <USBD_StdEPReq+0x7a>
 8011652:	2b03      	cmp	r3, #3
 8011654:	f300 811b 	bgt.w	801188e <USBD_StdEPReq+0x2a6>
 8011658:	2b00      	cmp	r3, #0
 801165a:	d072      	beq.n	8011742 <USBD_StdEPReq+0x15a>
 801165c:	2b01      	cmp	r3, #1
 801165e:	d03a      	beq.n	80116d6 <USBD_StdEPReq+0xee>
 8011660:	e115      	b.n	801188e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011668:	2b02      	cmp	r3, #2
 801166a:	d002      	beq.n	8011672 <USBD_StdEPReq+0x8a>
 801166c:	2b03      	cmp	r3, #3
 801166e:	d015      	beq.n	801169c <USBD_StdEPReq+0xb4>
 8011670:	e02b      	b.n	80116ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011672:	7bbb      	ldrb	r3, [r7, #14]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d00c      	beq.n	8011692 <USBD_StdEPReq+0xaa>
 8011678:	7bbb      	ldrb	r3, [r7, #14]
 801167a:	2b80      	cmp	r3, #128	; 0x80
 801167c:	d009      	beq.n	8011692 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801167e:	7bbb      	ldrb	r3, [r7, #14]
 8011680:	4619      	mov	r1, r3
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f001 f896 	bl	80127b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011688:	2180      	movs	r1, #128	; 0x80
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f001 f892 	bl	80127b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011690:	e020      	b.n	80116d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 fc1e 	bl	8011ed6 <USBD_CtlError>
              break;
 801169a:	e01b      	b.n	80116d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	885b      	ldrh	r3, [r3, #2]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d10e      	bne.n	80116c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80116a4:	7bbb      	ldrb	r3, [r7, #14]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00b      	beq.n	80116c2 <USBD_StdEPReq+0xda>
 80116aa:	7bbb      	ldrb	r3, [r7, #14]
 80116ac:	2b80      	cmp	r3, #128	; 0x80
 80116ae:	d008      	beq.n	80116c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	88db      	ldrh	r3, [r3, #6]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d104      	bne.n	80116c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80116b8:	7bbb      	ldrb	r3, [r7, #14]
 80116ba:	4619      	mov	r1, r3
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f001 f879 	bl	80127b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 fccf 	bl	8012066 <USBD_CtlSendStatus>

              break;
 80116c8:	e004      	b.n	80116d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80116ca:	6839      	ldr	r1, [r7, #0]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 fc02 	bl	8011ed6 <USBD_CtlError>
              break;
 80116d2:	bf00      	nop
          }
          break;
 80116d4:	e0e0      	b.n	8011898 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116dc:	2b02      	cmp	r3, #2
 80116de:	d002      	beq.n	80116e6 <USBD_StdEPReq+0xfe>
 80116e0:	2b03      	cmp	r3, #3
 80116e2:	d015      	beq.n	8011710 <USBD_StdEPReq+0x128>
 80116e4:	e026      	b.n	8011734 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80116e6:	7bbb      	ldrb	r3, [r7, #14]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d00c      	beq.n	8011706 <USBD_StdEPReq+0x11e>
 80116ec:	7bbb      	ldrb	r3, [r7, #14]
 80116ee:	2b80      	cmp	r3, #128	; 0x80
 80116f0:	d009      	beq.n	8011706 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80116f2:	7bbb      	ldrb	r3, [r7, #14]
 80116f4:	4619      	mov	r1, r3
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f001 f85c 	bl	80127b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80116fc:	2180      	movs	r1, #128	; 0x80
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f001 f858 	bl	80127b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011704:	e01c      	b.n	8011740 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8011706:	6839      	ldr	r1, [r7, #0]
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f000 fbe4 	bl	8011ed6 <USBD_CtlError>
              break;
 801170e:	e017      	b.n	8011740 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	885b      	ldrh	r3, [r3, #2]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d112      	bne.n	801173e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011718:	7bbb      	ldrb	r3, [r7, #14]
 801171a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801171e:	2b00      	cmp	r3, #0
 8011720:	d004      	beq.n	801172c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8011722:	7bbb      	ldrb	r3, [r7, #14]
 8011724:	4619      	mov	r1, r3
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f001 f863 	bl	80127f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 fc9a 	bl	8012066 <USBD_CtlSendStatus>
              }
              break;
 8011732:	e004      	b.n	801173e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8011734:	6839      	ldr	r1, [r7, #0]
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 fbcd 	bl	8011ed6 <USBD_CtlError>
              break;
 801173c:	e000      	b.n	8011740 <USBD_StdEPReq+0x158>
              break;
 801173e:	bf00      	nop
          }
          break;
 8011740:	e0aa      	b.n	8011898 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011748:	2b02      	cmp	r3, #2
 801174a:	d002      	beq.n	8011752 <USBD_StdEPReq+0x16a>
 801174c:	2b03      	cmp	r3, #3
 801174e:	d032      	beq.n	80117b6 <USBD_StdEPReq+0x1ce>
 8011750:	e097      	b.n	8011882 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011752:	7bbb      	ldrb	r3, [r7, #14]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d007      	beq.n	8011768 <USBD_StdEPReq+0x180>
 8011758:	7bbb      	ldrb	r3, [r7, #14]
 801175a:	2b80      	cmp	r3, #128	; 0x80
 801175c:	d004      	beq.n	8011768 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 801175e:	6839      	ldr	r1, [r7, #0]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 fbb8 	bl	8011ed6 <USBD_CtlError>
                break;
 8011766:	e091      	b.n	801188c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801176c:	2b00      	cmp	r3, #0
 801176e:	da0b      	bge.n	8011788 <USBD_StdEPReq+0x1a0>
 8011770:	7bbb      	ldrb	r3, [r7, #14]
 8011772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011776:	4613      	mov	r3, r2
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4413      	add	r3, r2
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	3310      	adds	r3, #16
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	4413      	add	r3, r2
 8011784:	3304      	adds	r3, #4
 8011786:	e00b      	b.n	80117a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011788:	7bbb      	ldrb	r3, [r7, #14]
 801178a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801178e:	4613      	mov	r3, r2
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	4413      	add	r3, r2
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	4413      	add	r3, r2
 801179e:	3304      	adds	r3, #4
 80117a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	2200      	movs	r2, #0
 80117a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	2202      	movs	r2, #2
 80117ac:	4619      	mov	r1, r3
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f000 fbfb 	bl	8011faa <USBD_CtlSendData>
              break;
 80117b4:	e06a      	b.n	801188c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80117b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	da11      	bge.n	80117e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80117be:	7bbb      	ldrb	r3, [r7, #14]
 80117c0:	f003 020f 	and.w	r2, r3, #15
 80117c4:	6879      	ldr	r1, [r7, #4]
 80117c6:	4613      	mov	r3, r2
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4413      	add	r3, r2
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	440b      	add	r3, r1
 80117d0:	3318      	adds	r3, #24
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d117      	bne.n	8011808 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80117d8:	6839      	ldr	r1, [r7, #0]
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f000 fb7b 	bl	8011ed6 <USBD_CtlError>
                  break;
 80117e0:	e054      	b.n	801188c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80117e2:	7bbb      	ldrb	r3, [r7, #14]
 80117e4:	f003 020f 	and.w	r2, r3, #15
 80117e8:	6879      	ldr	r1, [r7, #4]
 80117ea:	4613      	mov	r3, r2
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	4413      	add	r3, r2
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	440b      	add	r3, r1
 80117f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d104      	bne.n	8011808 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80117fe:	6839      	ldr	r1, [r7, #0]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fb68 	bl	8011ed6 <USBD_CtlError>
                  break;
 8011806:	e041      	b.n	801188c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801180c:	2b00      	cmp	r3, #0
 801180e:	da0b      	bge.n	8011828 <USBD_StdEPReq+0x240>
 8011810:	7bbb      	ldrb	r3, [r7, #14]
 8011812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011816:	4613      	mov	r3, r2
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	4413      	add	r3, r2
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	3310      	adds	r3, #16
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	4413      	add	r3, r2
 8011824:	3304      	adds	r3, #4
 8011826:	e00b      	b.n	8011840 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011828:	7bbb      	ldrb	r3, [r7, #14]
 801182a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801182e:	4613      	mov	r3, r2
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	4413      	add	r3, r2
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	4413      	add	r3, r2
 801183e:	3304      	adds	r3, #4
 8011840:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011842:	7bbb      	ldrb	r3, [r7, #14]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d002      	beq.n	801184e <USBD_StdEPReq+0x266>
 8011848:	7bbb      	ldrb	r3, [r7, #14]
 801184a:	2b80      	cmp	r3, #128	; 0x80
 801184c:	d103      	bne.n	8011856 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	2200      	movs	r2, #0
 8011852:	601a      	str	r2, [r3, #0]
 8011854:	e00e      	b.n	8011874 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8011856:	7bbb      	ldrb	r3, [r7, #14]
 8011858:	4619      	mov	r1, r3
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f000 ffe8 	bl	8012830 <USBD_LL_IsStallEP>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d003      	beq.n	801186e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	2201      	movs	r2, #1
 801186a:	601a      	str	r2, [r3, #0]
 801186c:	e002      	b.n	8011874 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	2202      	movs	r2, #2
 8011878:	4619      	mov	r1, r3
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 fb95 	bl	8011faa <USBD_CtlSendData>
              break;
 8011880:	e004      	b.n	801188c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8011882:	6839      	ldr	r1, [r7, #0]
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f000 fb26 	bl	8011ed6 <USBD_CtlError>
              break;
 801188a:	bf00      	nop
          }
          break;
 801188c:	e004      	b.n	8011898 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 801188e:	6839      	ldr	r1, [r7, #0]
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 fb20 	bl	8011ed6 <USBD_CtlError>
          break;
 8011896:	bf00      	nop
      }
      break;
 8011898:	e004      	b.n	80118a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801189a:	6839      	ldr	r1, [r7, #0]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f000 fb1a 	bl	8011ed6 <USBD_CtlError>
      break;
 80118a2:	bf00      	nop
  }

  return ret;
 80118a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
	...

080118b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80118ba:	2300      	movs	r3, #0
 80118bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80118be:	2300      	movs	r3, #0
 80118c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80118c2:	2300      	movs	r3, #0
 80118c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	885b      	ldrh	r3, [r3, #2]
 80118ca:	0a1b      	lsrs	r3, r3, #8
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	3b01      	subs	r3, #1
 80118d0:	2b06      	cmp	r3, #6
 80118d2:	f200 8128 	bhi.w	8011b26 <USBD_GetDescriptor+0x276>
 80118d6:	a201      	add	r2, pc, #4	; (adr r2, 80118dc <USBD_GetDescriptor+0x2c>)
 80118d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118dc:	080118f9 	.word	0x080118f9
 80118e0:	08011911 	.word	0x08011911
 80118e4:	08011951 	.word	0x08011951
 80118e8:	08011b27 	.word	0x08011b27
 80118ec:	08011b27 	.word	0x08011b27
 80118f0:	08011ac7 	.word	0x08011ac7
 80118f4:	08011af3 	.word	0x08011af3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	7c12      	ldrb	r2, [r2, #16]
 8011904:	f107 0108 	add.w	r1, r7, #8
 8011908:	4610      	mov	r0, r2
 801190a:	4798      	blx	r3
 801190c:	60f8      	str	r0, [r7, #12]
      break;
 801190e:	e112      	b.n	8011b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	7c1b      	ldrb	r3, [r3, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10d      	bne.n	8011934 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011920:	f107 0208 	add.w	r2, r7, #8
 8011924:	4610      	mov	r0, r2
 8011926:	4798      	blx	r3
 8011928:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	3301      	adds	r3, #1
 801192e:	2202      	movs	r2, #2
 8011930:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011932:	e100      	b.n	8011b36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801193c:	f107 0208 	add.w	r2, r7, #8
 8011940:	4610      	mov	r0, r2
 8011942:	4798      	blx	r3
 8011944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	3301      	adds	r3, #1
 801194a:	2202      	movs	r2, #2
 801194c:	701a      	strb	r2, [r3, #0]
      break;
 801194e:	e0f2      	b.n	8011b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	885b      	ldrh	r3, [r3, #2]
 8011954:	b2db      	uxtb	r3, r3
 8011956:	2b05      	cmp	r3, #5
 8011958:	f200 80ac 	bhi.w	8011ab4 <USBD_GetDescriptor+0x204>
 801195c:	a201      	add	r2, pc, #4	; (adr r2, 8011964 <USBD_GetDescriptor+0xb4>)
 801195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011962:	bf00      	nop
 8011964:	0801197d 	.word	0x0801197d
 8011968:	080119b1 	.word	0x080119b1
 801196c:	080119e5 	.word	0x080119e5
 8011970:	08011a19 	.word	0x08011a19
 8011974:	08011a4d 	.word	0x08011a4d
 8011978:	08011a81 	.word	0x08011a81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00b      	beq.n	80119a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	7c12      	ldrb	r2, [r2, #16]
 8011994:	f107 0108 	add.w	r1, r7, #8
 8011998:	4610      	mov	r0, r2
 801199a:	4798      	blx	r3
 801199c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801199e:	e091      	b.n	8011ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80119a0:	6839      	ldr	r1, [r7, #0]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 fa97 	bl	8011ed6 <USBD_CtlError>
            err++;
 80119a8:	7afb      	ldrb	r3, [r7, #11]
 80119aa:	3301      	adds	r3, #1
 80119ac:	72fb      	strb	r3, [r7, #11]
          break;
 80119ae:	e089      	b.n	8011ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d00b      	beq.n	80119d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80119c2:	689b      	ldr	r3, [r3, #8]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	7c12      	ldrb	r2, [r2, #16]
 80119c8:	f107 0108 	add.w	r1, r7, #8
 80119cc:	4610      	mov	r0, r2
 80119ce:	4798      	blx	r3
 80119d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119d2:	e077      	b.n	8011ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80119d4:	6839      	ldr	r1, [r7, #0]
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 fa7d 	bl	8011ed6 <USBD_CtlError>
            err++;
 80119dc:	7afb      	ldrb	r3, [r7, #11]
 80119de:	3301      	adds	r3, #1
 80119e0:	72fb      	strb	r3, [r7, #11]
          break;
 80119e2:	e06f      	b.n	8011ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00b      	beq.n	8011a08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	7c12      	ldrb	r2, [r2, #16]
 80119fc:	f107 0108 	add.w	r1, r7, #8
 8011a00:	4610      	mov	r0, r2
 8011a02:	4798      	blx	r3
 8011a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a06:	e05d      	b.n	8011ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 fa63 	bl	8011ed6 <USBD_CtlError>
            err++;
 8011a10:	7afb      	ldrb	r3, [r7, #11]
 8011a12:	3301      	adds	r3, #1
 8011a14:	72fb      	strb	r3, [r7, #11]
          break;
 8011a16:	e055      	b.n	8011ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a1e:	691b      	ldr	r3, [r3, #16]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00b      	beq.n	8011a3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a2a:	691b      	ldr	r3, [r3, #16]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	7c12      	ldrb	r2, [r2, #16]
 8011a30:	f107 0108 	add.w	r1, r7, #8
 8011a34:	4610      	mov	r0, r2
 8011a36:	4798      	blx	r3
 8011a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a3a:	e043      	b.n	8011ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a3c:	6839      	ldr	r1, [r7, #0]
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 fa49 	bl	8011ed6 <USBD_CtlError>
            err++;
 8011a44:	7afb      	ldrb	r3, [r7, #11]
 8011a46:	3301      	adds	r3, #1
 8011a48:	72fb      	strb	r3, [r7, #11]
          break;
 8011a4a:	e03b      	b.n	8011ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a52:	695b      	ldr	r3, [r3, #20]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00b      	beq.n	8011a70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a5e:	695b      	ldr	r3, [r3, #20]
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	7c12      	ldrb	r2, [r2, #16]
 8011a64:	f107 0108 	add.w	r1, r7, #8
 8011a68:	4610      	mov	r0, r2
 8011a6a:	4798      	blx	r3
 8011a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a6e:	e029      	b.n	8011ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f000 fa2f 	bl	8011ed6 <USBD_CtlError>
            err++;
 8011a78:	7afb      	ldrb	r3, [r7, #11]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8011a7e:	e021      	b.n	8011ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a86:	699b      	ldr	r3, [r3, #24]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d00b      	beq.n	8011aa4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a92:	699b      	ldr	r3, [r3, #24]
 8011a94:	687a      	ldr	r2, [r7, #4]
 8011a96:	7c12      	ldrb	r2, [r2, #16]
 8011a98:	f107 0108 	add.w	r1, r7, #8
 8011a9c:	4610      	mov	r0, r2
 8011a9e:	4798      	blx	r3
 8011aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011aa2:	e00f      	b.n	8011ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fa15 	bl	8011ed6 <USBD_CtlError>
            err++;
 8011aac:	7afb      	ldrb	r3, [r7, #11]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8011ab2:	e007      	b.n	8011ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8011ab4:	6839      	ldr	r1, [r7, #0]
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f000 fa0d 	bl	8011ed6 <USBD_CtlError>
          err++;
 8011abc:	7afb      	ldrb	r3, [r7, #11]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8011ac2:	e038      	b.n	8011b36 <USBD_GetDescriptor+0x286>
 8011ac4:	e037      	b.n	8011b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	7c1b      	ldrb	r3, [r3, #16]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d109      	bne.n	8011ae2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad6:	f107 0208 	add.w	r2, r7, #8
 8011ada:	4610      	mov	r0, r2
 8011adc:	4798      	blx	r3
 8011ade:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ae0:	e029      	b.n	8011b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011ae2:	6839      	ldr	r1, [r7, #0]
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f9f6 	bl	8011ed6 <USBD_CtlError>
        err++;
 8011aea:	7afb      	ldrb	r3, [r7, #11]
 8011aec:	3301      	adds	r3, #1
 8011aee:	72fb      	strb	r3, [r7, #11]
      break;
 8011af0:	e021      	b.n	8011b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	7c1b      	ldrb	r3, [r3, #16]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d10d      	bne.n	8011b16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b02:	f107 0208 	add.w	r2, r7, #8
 8011b06:	4610      	mov	r0, r2
 8011b08:	4798      	blx	r3
 8011b0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	3301      	adds	r3, #1
 8011b10:	2207      	movs	r2, #7
 8011b12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b14:	e00f      	b.n	8011b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 f9dc 	bl	8011ed6 <USBD_CtlError>
        err++;
 8011b1e:	7afb      	ldrb	r3, [r7, #11]
 8011b20:	3301      	adds	r3, #1
 8011b22:	72fb      	strb	r3, [r7, #11]
      break;
 8011b24:	e007      	b.n	8011b36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011b26:	6839      	ldr	r1, [r7, #0]
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 f9d4 	bl	8011ed6 <USBD_CtlError>
      err++;
 8011b2e:	7afb      	ldrb	r3, [r7, #11]
 8011b30:	3301      	adds	r3, #1
 8011b32:	72fb      	strb	r3, [r7, #11]
      break;
 8011b34:	bf00      	nop
  }

  if (err != 0U)
 8011b36:	7afb      	ldrb	r3, [r7, #11]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d11c      	bne.n	8011b76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8011b3c:	893b      	ldrh	r3, [r7, #8]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d011      	beq.n	8011b66 <USBD_GetDescriptor+0x2b6>
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	88db      	ldrh	r3, [r3, #6]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d00d      	beq.n	8011b66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	88da      	ldrh	r2, [r3, #6]
 8011b4e:	893b      	ldrh	r3, [r7, #8]
 8011b50:	4293      	cmp	r3, r2
 8011b52:	bf28      	it	cs
 8011b54:	4613      	movcs	r3, r2
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011b5a:	893b      	ldrh	r3, [r7, #8]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	68f9      	ldr	r1, [r7, #12]
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f000 fa22 	bl	8011faa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	88db      	ldrh	r3, [r3, #6]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d104      	bne.n	8011b78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 fa79 	bl	8012066 <USBD_CtlSendStatus>
 8011b74:	e000      	b.n	8011b78 <USBD_GetDescriptor+0x2c8>
    return;
 8011b76:	bf00      	nop
    }
  }
}
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop

08011b80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	889b      	ldrh	r3, [r3, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d130      	bne.n	8011bf4 <USBD_SetAddress+0x74>
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	88db      	ldrh	r3, [r3, #6]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d12c      	bne.n	8011bf4 <USBD_SetAddress+0x74>
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	885b      	ldrh	r3, [r3, #2]
 8011b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8011ba0:	d828      	bhi.n	8011bf4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	885b      	ldrh	r3, [r3, #2]
 8011ba6:	b2db      	uxtb	r3, r3
 8011ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bb4:	2b03      	cmp	r3, #3
 8011bb6:	d104      	bne.n	8011bc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011bb8:	6839      	ldr	r1, [r7, #0]
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 f98b 	bl	8011ed6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bc0:	e01d      	b.n	8011bfe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	7bfa      	ldrb	r2, [r7, #15]
 8011bc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011bca:	7bfb      	ldrb	r3, [r7, #15]
 8011bcc:	4619      	mov	r1, r3
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 fe5a 	bl	8012888 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f000 fa46 	bl	8012066 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011bda:	7bfb      	ldrb	r3, [r7, #15]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d004      	beq.n	8011bea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2202      	movs	r2, #2
 8011be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011be8:	e009      	b.n	8011bfe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2201      	movs	r2, #1
 8011bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bf2:	e004      	b.n	8011bfe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011bf4:	6839      	ldr	r1, [r7, #0]
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f000 f96d 	bl	8011ed6 <USBD_CtlError>
  }
}
 8011bfc:	bf00      	nop
 8011bfe:	bf00      	nop
 8011c00:	3710      	adds	r7, #16
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
	...

08011c08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	885b      	ldrh	r3, [r3, #2]
 8011c16:	b2da      	uxtb	r2, r3
 8011c18:	4b41      	ldr	r3, [pc, #260]	; (8011d20 <USBD_SetConfig+0x118>)
 8011c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011c1c:	4b40      	ldr	r3, [pc, #256]	; (8011d20 <USBD_SetConfig+0x118>)
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d904      	bls.n	8011c2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8011c24:	6839      	ldr	r1, [r7, #0]
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f000 f955 	bl	8011ed6 <USBD_CtlError>
 8011c2c:	e075      	b.n	8011d1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d002      	beq.n	8011c3e <USBD_SetConfig+0x36>
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	d023      	beq.n	8011c84 <USBD_SetConfig+0x7c>
 8011c3c:	e062      	b.n	8011d04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8011c3e:	4b38      	ldr	r3, [pc, #224]	; (8011d20 <USBD_SetConfig+0x118>)
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d01a      	beq.n	8011c7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8011c46:	4b36      	ldr	r3, [pc, #216]	; (8011d20 <USBD_SetConfig+0x118>)
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2203      	movs	r2, #3
 8011c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011c58:	4b31      	ldr	r3, [pc, #196]	; (8011d20 <USBD_SetConfig+0x118>)
 8011c5a:	781b      	ldrb	r3, [r3, #0]
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7ff f9e7 	bl	8011032 <USBD_SetClassConfig>
 8011c64:	4603      	mov	r3, r0
 8011c66:	2b02      	cmp	r3, #2
 8011c68:	d104      	bne.n	8011c74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 f932 	bl	8011ed6 <USBD_CtlError>
            return;
 8011c72:	e052      	b.n	8011d1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f000 f9f6 	bl	8012066 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011c7a:	e04e      	b.n	8011d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 f9f2 	bl	8012066 <USBD_CtlSendStatus>
        break;
 8011c82:	e04a      	b.n	8011d1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8011c84:	4b26      	ldr	r3, [pc, #152]	; (8011d20 <USBD_SetConfig+0x118>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d112      	bne.n	8011cb2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2202      	movs	r2, #2
 8011c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8011c94:	4b22      	ldr	r3, [pc, #136]	; (8011d20 <USBD_SetConfig+0x118>)
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	461a      	mov	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8011c9e:	4b20      	ldr	r3, [pc, #128]	; (8011d20 <USBD_SetConfig+0x118>)
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7ff f9e3 	bl	8011070 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 f9db 	bl	8012066 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011cb0:	e033      	b.n	8011d1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8011cb2:	4b1b      	ldr	r3, [pc, #108]	; (8011d20 <USBD_SetConfig+0x118>)
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d01d      	beq.n	8011cfc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f7ff f9d1 	bl	8011070 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8011cce:	4b14      	ldr	r3, [pc, #80]	; (8011d20 <USBD_SetConfig+0x118>)
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011cd8:	4b11      	ldr	r3, [pc, #68]	; (8011d20 <USBD_SetConfig+0x118>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	4619      	mov	r1, r3
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7ff f9a7 	bl	8011032 <USBD_SetClassConfig>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b02      	cmp	r3, #2
 8011ce8:	d104      	bne.n	8011cf4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8011cea:	6839      	ldr	r1, [r7, #0]
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f000 f8f2 	bl	8011ed6 <USBD_CtlError>
            return;
 8011cf2:	e012      	b.n	8011d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 f9b6 	bl	8012066 <USBD_CtlSendStatus>
        break;
 8011cfa:	e00e      	b.n	8011d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 f9b2 	bl	8012066 <USBD_CtlSendStatus>
        break;
 8011d02:	e00a      	b.n	8011d1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8011d04:	6839      	ldr	r1, [r7, #0]
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f8e5 	bl	8011ed6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8011d0c:	4b04      	ldr	r3, [pc, #16]	; (8011d20 <USBD_SetConfig+0x118>)
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	4619      	mov	r1, r3
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff f9ac 	bl	8011070 <USBD_ClrClassConfig>
        break;
 8011d18:	bf00      	nop
    }
  }
}
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	200028a4 	.word	0x200028a4

08011d24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b082      	sub	sp, #8
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	88db      	ldrh	r3, [r3, #6]
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d004      	beq.n	8011d40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011d36:	6839      	ldr	r1, [r7, #0]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 f8cc 	bl	8011ed6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011d3e:	e022      	b.n	8011d86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	dc02      	bgt.n	8011d50 <USBD_GetConfig+0x2c>
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	dc03      	bgt.n	8011d56 <USBD_GetConfig+0x32>
 8011d4e:	e015      	b.n	8011d7c <USBD_GetConfig+0x58>
 8011d50:	2b03      	cmp	r3, #3
 8011d52:	d00b      	beq.n	8011d6c <USBD_GetConfig+0x48>
 8011d54:	e012      	b.n	8011d7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	3308      	adds	r3, #8
 8011d60:	2201      	movs	r2, #1
 8011d62:	4619      	mov	r1, r3
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 f920 	bl	8011faa <USBD_CtlSendData>
        break;
 8011d6a:	e00c      	b.n	8011d86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3304      	adds	r3, #4
 8011d70:	2201      	movs	r2, #1
 8011d72:	4619      	mov	r1, r3
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f000 f918 	bl	8011faa <USBD_CtlSendData>
        break;
 8011d7a:	e004      	b.n	8011d86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8011d7c:	6839      	ldr	r1, [r7, #0]
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 f8a9 	bl	8011ed6 <USBD_CtlError>
        break;
 8011d84:	bf00      	nop
}
 8011d86:	bf00      	nop
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b082      	sub	sp, #8
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
 8011d96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d9e:	3b01      	subs	r3, #1
 8011da0:	2b02      	cmp	r3, #2
 8011da2:	d81e      	bhi.n	8011de2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	88db      	ldrh	r3, [r3, #6]
 8011da8:	2b02      	cmp	r3, #2
 8011daa:	d004      	beq.n	8011db6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8011dac:	6839      	ldr	r1, [r7, #0]
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f891 	bl	8011ed6 <USBD_CtlError>
        break;
 8011db4:	e01a      	b.n	8011dec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2201      	movs	r2, #1
 8011dba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d005      	beq.n	8011dd2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	f043 0202 	orr.w	r2, r3, #2
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	330c      	adds	r3, #12
 8011dd6:	2202      	movs	r2, #2
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 f8e5 	bl	8011faa <USBD_CtlSendData>
      break;
 8011de0:	e004      	b.n	8011dec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8011de2:	6839      	ldr	r1, [r7, #0]
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 f876 	bl	8011ed6 <USBD_CtlError>
      break;
 8011dea:	bf00      	nop
  }
}
 8011dec:	bf00      	nop
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	885b      	ldrh	r3, [r3, #2]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d106      	bne.n	8011e14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2201      	movs	r2, #1
 8011e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f000 f929 	bl	8012066 <USBD_CtlSendStatus>
  }
}
 8011e14:	bf00      	nop
 8011e16:	3708      	adds	r7, #8
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	2b02      	cmp	r3, #2
 8011e30:	d80b      	bhi.n	8011e4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	885b      	ldrh	r3, [r3, #2]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d10c      	bne.n	8011e54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f000 f90f 	bl	8012066 <USBD_CtlSendStatus>
      }
      break;
 8011e48:	e004      	b.n	8011e54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8011e4a:	6839      	ldr	r1, [r7, #0]
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f000 f842 	bl	8011ed6 <USBD_CtlError>
      break;
 8011e52:	e000      	b.n	8011e56 <USBD_ClrFeature+0x3a>
      break;
 8011e54:	bf00      	nop
  }
}
 8011e56:	bf00      	nop
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	781a      	ldrb	r2, [r3, #0]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	785a      	ldrb	r2, [r3, #1]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	3302      	adds	r3, #2
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	3303      	adds	r3, #3
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	021b      	lsls	r3, r3, #8
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	4413      	add	r3, r2
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	3304      	adds	r3, #4
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	3305      	adds	r3, #5
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	021b      	lsls	r3, r3, #8
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	4413      	add	r3, r2
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	3306      	adds	r3, #6
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	3307      	adds	r3, #7
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	021b      	lsls	r3, r3, #8
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	4413      	add	r3, r2
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	80da      	strh	r2, [r3, #6]

}
 8011ecc:	bf00      	nop
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bc80      	pop	{r7}
 8011ed4:	4770      	bx	lr

08011ed6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	b082      	sub	sp, #8
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
 8011ede:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8011ee0:	2180      	movs	r1, #128	; 0x80
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f000 fc66 	bl	80127b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8011ee8:	2100      	movs	r1, #0
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fc62 	bl	80127b4 <USBD_LL_StallEP>
}
 8011ef0:	bf00      	nop
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011f04:	2300      	movs	r3, #0
 8011f06:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d032      	beq.n	8011f74 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f000 f834 	bl	8011f7c <USBD_GetLen>
 8011f14:	4603      	mov	r3, r0
 8011f16:	3301      	adds	r3, #1
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	005b      	lsls	r3, r3, #1
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	1c5a      	adds	r2, r3, #1
 8011f26:	75fa      	strb	r2, [r7, #23]
 8011f28:	461a      	mov	r2, r3
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	4413      	add	r3, r2
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	7812      	ldrb	r2, [r2, #0]
 8011f32:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011f34:	7dfb      	ldrb	r3, [r7, #23]
 8011f36:	1c5a      	adds	r2, r3, #1
 8011f38:	75fa      	strb	r2, [r7, #23]
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	4413      	add	r3, r2
 8011f40:	2203      	movs	r2, #3
 8011f42:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011f44:	e012      	b.n	8011f6c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	1c5a      	adds	r2, r3, #1
 8011f4a:	60fa      	str	r2, [r7, #12]
 8011f4c:	7dfa      	ldrb	r2, [r7, #23]
 8011f4e:	1c51      	adds	r1, r2, #1
 8011f50:	75f9      	strb	r1, [r7, #23]
 8011f52:	4611      	mov	r1, r2
 8011f54:	68ba      	ldr	r2, [r7, #8]
 8011f56:	440a      	add	r2, r1
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011f5c:	7dfb      	ldrb	r3, [r7, #23]
 8011f5e:	1c5a      	adds	r2, r3, #1
 8011f60:	75fa      	strb	r2, [r7, #23]
 8011f62:	461a      	mov	r2, r3
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	4413      	add	r3, r2
 8011f68:	2200      	movs	r2, #0
 8011f6a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1e8      	bne.n	8011f46 <USBD_GetString+0x4e>
    }
  }
}
 8011f74:	bf00      	nop
 8011f76:	3718      	adds	r7, #24
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011f84:	2300      	movs	r3, #0
 8011f86:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8011f88:	e005      	b.n	8011f96 <USBD_GetLen+0x1a>
  {
    len++;
 8011f8a:	7bfb      	ldrb	r3, [r7, #15]
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	3301      	adds	r3, #1
 8011f94:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d1f5      	bne.n	8011f8a <USBD_GetLen+0xe>
  }

  return len;
 8011f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3714      	adds	r7, #20
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bc80      	pop	{r7}
 8011fa8:	4770      	bx	lr

08011faa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b084      	sub	sp, #16
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	60f8      	str	r0, [r7, #12]
 8011fb2:	60b9      	str	r1, [r7, #8]
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2202      	movs	r2, #2
 8011fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011fc0:	88fa      	ldrh	r2, [r7, #6]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011fc6:	88fa      	ldrh	r2, [r7, #6]
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011fcc:	88fb      	ldrh	r3, [r7, #6]
 8011fce:	68ba      	ldr	r2, [r7, #8]
 8011fd0:	2100      	movs	r1, #0
 8011fd2:	68f8      	ldr	r0, [r7, #12]
 8011fd4:	f000 fc77 	bl	80128c6 <USBD_LL_Transmit>

  return USBD_OK;
 8011fd8:	2300      	movs	r3, #0
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3710      	adds	r7, #16
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}

08011fe2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8011fe2:	b580      	push	{r7, lr}
 8011fe4:	b084      	sub	sp, #16
 8011fe6:	af00      	add	r7, sp, #0
 8011fe8:	60f8      	str	r0, [r7, #12]
 8011fea:	60b9      	str	r1, [r7, #8]
 8011fec:	4613      	mov	r3, r2
 8011fee:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011ff0:	88fb      	ldrh	r3, [r7, #6]
 8011ff2:	68ba      	ldr	r2, [r7, #8]
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f000 fc65 	bl	80128c6 <USBD_LL_Transmit>

  return USBD_OK;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b084      	sub	sp, #16
 801200a:	af00      	add	r7, sp, #0
 801200c:	60f8      	str	r0, [r7, #12]
 801200e:	60b9      	str	r1, [r7, #8]
 8012010:	4613      	mov	r3, r2
 8012012:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2203      	movs	r2, #3
 8012018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801201c:	88fa      	ldrh	r2, [r7, #6]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8012024:	88fa      	ldrh	r2, [r7, #6]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801202c:	88fb      	ldrh	r3, [r7, #6]
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	2100      	movs	r1, #0
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f000 fc6a 	bl	801290c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3710      	adds	r7, #16
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}

08012042 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8012042:	b580      	push	{r7, lr}
 8012044:	b084      	sub	sp, #16
 8012046:	af00      	add	r7, sp, #0
 8012048:	60f8      	str	r0, [r7, #12]
 801204a:	60b9      	str	r1, [r7, #8]
 801204c:	4613      	mov	r3, r2
 801204e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012050:	88fb      	ldrh	r3, [r7, #6]
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	2100      	movs	r1, #0
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f000 fc58 	bl	801290c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801205c:	2300      	movs	r3, #0
}
 801205e:	4618      	mov	r0, r3
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012066:	b580      	push	{r7, lr}
 8012068:	b082      	sub	sp, #8
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2204      	movs	r2, #4
 8012072:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012076:	2300      	movs	r3, #0
 8012078:	2200      	movs	r2, #0
 801207a:	2100      	movs	r1, #0
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 fc22 	bl	80128c6 <USBD_LL_Transmit>

  return USBD_OK;
 8012082:	2300      	movs	r3, #0
}
 8012084:	4618      	mov	r0, r3
 8012086:	3708      	adds	r7, #8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2205      	movs	r2, #5
 8012098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801209c:	2300      	movs	r3, #0
 801209e:	2200      	movs	r2, #0
 80120a0:	2100      	movs	r1, #0
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f000 fc32 	bl	801290c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80120a8:	2300      	movs	r3, #0
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
	...

080120b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80120b8:	2200      	movs	r2, #0
 80120ba:	4912      	ldr	r1, [pc, #72]	; (8012104 <MX_USB_DEVICE_Init+0x50>)
 80120bc:	4812      	ldr	r0, [pc, #72]	; (8012108 <MX_USB_DEVICE_Init+0x54>)
 80120be:	f7fe ff5e 	bl	8010f7e <USBD_Init>
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d001      	beq.n	80120cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80120c8:	f7f2 f9a4 	bl	8004414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80120cc:	490f      	ldr	r1, [pc, #60]	; (801210c <MX_USB_DEVICE_Init+0x58>)
 80120ce:	480e      	ldr	r0, [pc, #56]	; (8012108 <MX_USB_DEVICE_Init+0x54>)
 80120d0:	f7fe ff80 	bl	8010fd4 <USBD_RegisterClass>
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d001      	beq.n	80120de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80120da:	f7f2 f99b 	bl	8004414 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80120de:	490c      	ldr	r1, [pc, #48]	; (8012110 <MX_USB_DEVICE_Init+0x5c>)
 80120e0:	4809      	ldr	r0, [pc, #36]	; (8012108 <MX_USB_DEVICE_Init+0x54>)
 80120e2:	f7fe feb1 	bl	8010e48 <USBD_CDC_RegisterInterface>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80120ec:	f7f2 f992 	bl	8004414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80120f0:	4805      	ldr	r0, [pc, #20]	; (8012108 <MX_USB_DEVICE_Init+0x54>)
 80120f2:	f7fe ff88 	bl	8011006 <USBD_Start>
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d001      	beq.n	8012100 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80120fc:	f7f2 f98a 	bl	8004414 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012100:	bf00      	nop
 8012102:	bd80      	pop	{r7, pc}
 8012104:	200007c0 	.word	0x200007c0
 8012108:	200028a8 	.word	0x200028a8
 801210c:	200006a4 	.word	0x200006a4
 8012110:	200007a8 	.word	0x200007a8

08012114 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012118:	2200      	movs	r2, #0
 801211a:	4905      	ldr	r1, [pc, #20]	; (8012130 <CDC_Init_FS+0x1c>)
 801211c:	4805      	ldr	r0, [pc, #20]	; (8012134 <CDC_Init_FS+0x20>)
 801211e:	f7fe fea9 	bl	8010e74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012122:	4905      	ldr	r1, [pc, #20]	; (8012138 <CDC_Init_FS+0x24>)
 8012124:	4803      	ldr	r0, [pc, #12]	; (8012134 <CDC_Init_FS+0x20>)
 8012126:	f7fe febe 	bl	8010ea6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801212a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801212c:	4618      	mov	r0, r3
 801212e:	bd80      	pop	{r7, pc}
 8012130:	20002f6c 	.word	0x20002f6c
 8012134:	200028a8 	.word	0x200028a8
 8012138:	20002b6c 	.word	0x20002b6c

0801213c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801213c:	b480      	push	{r7}
 801213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012140:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012142:	4618      	mov	r0, r3
 8012144:	46bd      	mov	sp, r7
 8012146:	bc80      	pop	{r7}
 8012148:	4770      	bx	lr
	...

0801214c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	4603      	mov	r3, r0
 8012154:	6039      	str	r1, [r7, #0]
 8012156:	71fb      	strb	r3, [r7, #7]
 8012158:	4613      	mov	r3, r2
 801215a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801215c:	79fb      	ldrb	r3, [r7, #7]
 801215e:	2b23      	cmp	r3, #35	; 0x23
 8012160:	d85c      	bhi.n	801221c <CDC_Control_FS+0xd0>
 8012162:	a201      	add	r2, pc, #4	; (adr r2, 8012168 <CDC_Control_FS+0x1c>)
 8012164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012168:	0801221d 	.word	0x0801221d
 801216c:	0801221d 	.word	0x0801221d
 8012170:	0801221d 	.word	0x0801221d
 8012174:	0801221d 	.word	0x0801221d
 8012178:	0801221d 	.word	0x0801221d
 801217c:	0801221d 	.word	0x0801221d
 8012180:	0801221d 	.word	0x0801221d
 8012184:	0801221d 	.word	0x0801221d
 8012188:	0801221d 	.word	0x0801221d
 801218c:	0801221d 	.word	0x0801221d
 8012190:	0801221d 	.word	0x0801221d
 8012194:	0801221d 	.word	0x0801221d
 8012198:	0801221d 	.word	0x0801221d
 801219c:	0801221d 	.word	0x0801221d
 80121a0:	0801221d 	.word	0x0801221d
 80121a4:	0801221d 	.word	0x0801221d
 80121a8:	0801221d 	.word	0x0801221d
 80121ac:	0801221d 	.word	0x0801221d
 80121b0:	0801221d 	.word	0x0801221d
 80121b4:	0801221d 	.word	0x0801221d
 80121b8:	0801221d 	.word	0x0801221d
 80121bc:	0801221d 	.word	0x0801221d
 80121c0:	0801221d 	.word	0x0801221d
 80121c4:	0801221d 	.word	0x0801221d
 80121c8:	0801221d 	.word	0x0801221d
 80121cc:	0801221d 	.word	0x0801221d
 80121d0:	0801221d 	.word	0x0801221d
 80121d4:	0801221d 	.word	0x0801221d
 80121d8:	0801221d 	.word	0x0801221d
 80121dc:	0801221d 	.word	0x0801221d
 80121e0:	0801221d 	.word	0x0801221d
 80121e4:	0801221d 	.word	0x0801221d
 80121e8:	080121f9 	.word	0x080121f9
 80121ec:	0801220b 	.word	0x0801220b
 80121f0:	0801221d 	.word	0x0801221d
 80121f4:	0801221d 	.word	0x0801221d
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
        	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80121f8:	4b0c      	ldr	r3, [pc, #48]	; (801222c <CDC_Control_FS+0xe0>)
 80121fa:	683a      	ldr	r2, [r7, #0]
 80121fc:	6810      	ldr	r0, [r2, #0]
 80121fe:	6018      	str	r0, [r3, #0]
 8012200:	8891      	ldrh	r1, [r2, #4]
 8012202:	7992      	ldrb	r2, [r2, #6]
 8012204:	8099      	strh	r1, [r3, #4]
 8012206:	719a      	strb	r2, [r3, #6]
    break;
 8012208:	e009      	b.n	801221e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	4a07      	ldr	r2, [pc, #28]	; (801222c <CDC_Control_FS+0xe0>)
 801220e:	6810      	ldr	r0, [r2, #0]
 8012210:	6018      	str	r0, [r3, #0]
 8012212:	8891      	ldrh	r1, [r2, #4]
 8012214:	7992      	ldrb	r2, [r2, #6]
 8012216:	8099      	strh	r1, [r3, #4]
 8012218:	719a      	strb	r2, [r3, #6]
    break;
 801221a:	e000      	b.n	801221e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801221c:	bf00      	nop
  }

  return (USBD_OK);
 801221e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012220:	4618      	mov	r0, r3
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	bc80      	pop	{r7}
 8012228:	4770      	bx	lr
 801222a:	bf00      	nop
 801222c:	200007b8 	.word	0x200007b8

08012230 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801223a:	6879      	ldr	r1, [r7, #4]
 801223c:	4808      	ldr	r0, [pc, #32]	; (8012260 <CDC_Receive_FS+0x30>)
 801223e:	f7fe fe32 	bl	8010ea6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012242:	4807      	ldr	r0, [pc, #28]	; (8012260 <CDC_Receive_FS+0x30>)
 8012244:	f7fe fe71 	bl	8010f2a <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	b2db      	uxtb	r3, r3
 801224e:	4619      	mov	r1, r3
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7f2 f831 	bl	80042b8 <CDC_ReveiveCallback>

  return (USBD_OK);
 8012256:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012258:	4618      	mov	r0, r3
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	200028a8 	.word	0x200028a8

08012264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	460b      	mov	r3, r1
 801226e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012270:	2300      	movs	r3, #0
 8012272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012274:	4b0d      	ldr	r3, [pc, #52]	; (80122ac <CDC_Transmit_FS+0x48>)
 8012276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801227a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012282:	2b00      	cmp	r3, #0
 8012284:	d001      	beq.n	801228a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012286:	2301      	movs	r3, #1
 8012288:	e00b      	b.n	80122a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801228a:	887b      	ldrh	r3, [r7, #2]
 801228c:	461a      	mov	r2, r3
 801228e:	6879      	ldr	r1, [r7, #4]
 8012290:	4806      	ldr	r0, [pc, #24]	; (80122ac <CDC_Transmit_FS+0x48>)
 8012292:	f7fe fdef 	bl	8010e74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012296:	4805      	ldr	r0, [pc, #20]	; (80122ac <CDC_Transmit_FS+0x48>)
 8012298:	f7fe fe18 	bl	8010ecc <USBD_CDC_TransmitPacket>
 801229c:	4603      	mov	r3, r0
 801229e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80122a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	200028a8 	.word	0x200028a8

080122b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	4603      	mov	r3, r0
 80122b8:	6039      	str	r1, [r7, #0]
 80122ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	2212      	movs	r2, #18
 80122c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80122c2:	4b03      	ldr	r3, [pc, #12]	; (80122d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bc80      	pop	{r7}
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop
 80122d0:	200007dc 	.word	0x200007dc

080122d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	4603      	mov	r3, r0
 80122dc:	6039      	str	r1, [r7, #0]
 80122de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	2204      	movs	r2, #4
 80122e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80122e6:	4b03      	ldr	r3, [pc, #12]	; (80122f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	370c      	adds	r7, #12
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bc80      	pop	{r7}
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	200007f0 	.word	0x200007f0

080122f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	6039      	str	r1, [r7, #0]
 8012302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012304:	79fb      	ldrb	r3, [r7, #7]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d105      	bne.n	8012316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801230a:	683a      	ldr	r2, [r7, #0]
 801230c:	4907      	ldr	r1, [pc, #28]	; (801232c <USBD_FS_ProductStrDescriptor+0x34>)
 801230e:	4808      	ldr	r0, [pc, #32]	; (8012330 <USBD_FS_ProductStrDescriptor+0x38>)
 8012310:	f7ff fdf2 	bl	8011ef8 <USBD_GetString>
 8012314:	e004      	b.n	8012320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012316:	683a      	ldr	r2, [r7, #0]
 8012318:	4904      	ldr	r1, [pc, #16]	; (801232c <USBD_FS_ProductStrDescriptor+0x34>)
 801231a:	4805      	ldr	r0, [pc, #20]	; (8012330 <USBD_FS_ProductStrDescriptor+0x38>)
 801231c:	f7ff fdec 	bl	8011ef8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012320:	4b02      	ldr	r3, [pc, #8]	; (801232c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012322:	4618      	mov	r0, r3
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	2000336c 	.word	0x2000336c
 8012330:	08015c30 	.word	0x08015c30

08012334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	4603      	mov	r3, r0
 801233c:	6039      	str	r1, [r7, #0]
 801233e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012340:	683a      	ldr	r2, [r7, #0]
 8012342:	4904      	ldr	r1, [pc, #16]	; (8012354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012344:	4804      	ldr	r0, [pc, #16]	; (8012358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012346:	f7ff fdd7 	bl	8011ef8 <USBD_GetString>
  return USBD_StrDesc;
 801234a:	4b02      	ldr	r3, [pc, #8]	; (8012354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801234c:	4618      	mov	r0, r3
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	2000336c 	.word	0x2000336c
 8012358:	08015c48 	.word	0x08015c48

0801235c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	4603      	mov	r3, r0
 8012364:	6039      	str	r1, [r7, #0]
 8012366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	221a      	movs	r2, #26
 801236c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801236e:	f000 f843 	bl	80123f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012372:	4b02      	ldr	r3, [pc, #8]	; (801237c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012374:	4618      	mov	r0, r3
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	200007f4 	.word	0x200007f4

08012380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	4603      	mov	r3, r0
 8012388:	6039      	str	r1, [r7, #0]
 801238a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801238c:	79fb      	ldrb	r3, [r7, #7]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d105      	bne.n	801239e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012392:	683a      	ldr	r2, [r7, #0]
 8012394:	4907      	ldr	r1, [pc, #28]	; (80123b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012396:	4808      	ldr	r0, [pc, #32]	; (80123b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012398:	f7ff fdae 	bl	8011ef8 <USBD_GetString>
 801239c:	e004      	b.n	80123a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801239e:	683a      	ldr	r2, [r7, #0]
 80123a0:	4904      	ldr	r1, [pc, #16]	; (80123b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80123a2:	4805      	ldr	r0, [pc, #20]	; (80123b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80123a4:	f7ff fda8 	bl	8011ef8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80123a8:	4b02      	ldr	r3, [pc, #8]	; (80123b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	2000336c 	.word	0x2000336c
 80123b8:	08015c54 	.word	0x08015c54

080123bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	4603      	mov	r3, r0
 80123c4:	6039      	str	r1, [r7, #0]
 80123c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123c8:	79fb      	ldrb	r3, [r7, #7]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d105      	bne.n	80123da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80123ce:	683a      	ldr	r2, [r7, #0]
 80123d0:	4907      	ldr	r1, [pc, #28]	; (80123f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80123d2:	4808      	ldr	r0, [pc, #32]	; (80123f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80123d4:	f7ff fd90 	bl	8011ef8 <USBD_GetString>
 80123d8:	e004      	b.n	80123e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	4904      	ldr	r1, [pc, #16]	; (80123f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80123de:	4805      	ldr	r0, [pc, #20]	; (80123f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80123e0:	f7ff fd8a 	bl	8011ef8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80123e4:	4b02      	ldr	r3, [pc, #8]	; (80123f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3708      	adds	r7, #8
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	2000336c 	.word	0x2000336c
 80123f4:	08015c60 	.word	0x08015c60

080123f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80123fe:	4b0f      	ldr	r3, [pc, #60]	; (801243c <Get_SerialNum+0x44>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012404:	4b0e      	ldr	r3, [pc, #56]	; (8012440 <Get_SerialNum+0x48>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801240a:	4b0e      	ldr	r3, [pc, #56]	; (8012444 <Get_SerialNum+0x4c>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012410:	68fa      	ldr	r2, [r7, #12]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	4413      	add	r3, r2
 8012416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d009      	beq.n	8012432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801241e:	2208      	movs	r2, #8
 8012420:	4909      	ldr	r1, [pc, #36]	; (8012448 <Get_SerialNum+0x50>)
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	f000 f814 	bl	8012450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012428:	2204      	movs	r2, #4
 801242a:	4908      	ldr	r1, [pc, #32]	; (801244c <Get_SerialNum+0x54>)
 801242c:	68b8      	ldr	r0, [r7, #8]
 801242e:	f000 f80f 	bl	8012450 <IntToUnicode>
  }
}
 8012432:	bf00      	nop
 8012434:	3710      	adds	r7, #16
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	1ffff7e8 	.word	0x1ffff7e8
 8012440:	1ffff7ec 	.word	0x1ffff7ec
 8012444:	1ffff7f0 	.word	0x1ffff7f0
 8012448:	200007f6 	.word	0x200007f6
 801244c:	20000806 	.word	0x20000806

08012450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012450:	b480      	push	{r7}
 8012452:	b087      	sub	sp, #28
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	4613      	mov	r3, r2
 801245c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801245e:	2300      	movs	r3, #0
 8012460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012462:	2300      	movs	r3, #0
 8012464:	75fb      	strb	r3, [r7, #23]
 8012466:	e027      	b.n	80124b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	0f1b      	lsrs	r3, r3, #28
 801246c:	2b09      	cmp	r3, #9
 801246e:	d80b      	bhi.n	8012488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	0f1b      	lsrs	r3, r3, #28
 8012474:	b2da      	uxtb	r2, r3
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	4619      	mov	r1, r3
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	440b      	add	r3, r1
 8012480:	3230      	adds	r2, #48	; 0x30
 8012482:	b2d2      	uxtb	r2, r2
 8012484:	701a      	strb	r2, [r3, #0]
 8012486:	e00a      	b.n	801249e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	0f1b      	lsrs	r3, r3, #28
 801248c:	b2da      	uxtb	r2, r3
 801248e:	7dfb      	ldrb	r3, [r7, #23]
 8012490:	005b      	lsls	r3, r3, #1
 8012492:	4619      	mov	r1, r3
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	440b      	add	r3, r1
 8012498:	3237      	adds	r2, #55	; 0x37
 801249a:	b2d2      	uxtb	r2, r2
 801249c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	011b      	lsls	r3, r3, #4
 80124a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80124a4:	7dfb      	ldrb	r3, [r7, #23]
 80124a6:	005b      	lsls	r3, r3, #1
 80124a8:	3301      	adds	r3, #1
 80124aa:	68ba      	ldr	r2, [r7, #8]
 80124ac:	4413      	add	r3, r2
 80124ae:	2200      	movs	r2, #0
 80124b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80124b2:	7dfb      	ldrb	r3, [r7, #23]
 80124b4:	3301      	adds	r3, #1
 80124b6:	75fb      	strb	r3, [r7, #23]
 80124b8:	7dfa      	ldrb	r2, [r7, #23]
 80124ba:	79fb      	ldrb	r3, [r7, #7]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d3d3      	bcc.n	8012468 <IntToUnicode+0x18>
  }
}
 80124c0:	bf00      	nop
 80124c2:	bf00      	nop
 80124c4:	371c      	adds	r7, #28
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bc80      	pop	{r7}
 80124ca:	4770      	bx	lr

080124cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80124cc:	b480      	push	{r7}
 80124ce:	b085      	sub	sp, #20
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4a09      	ldr	r2, [pc, #36]	; (8012500 <HAL_PCD_MspInit+0x34>)
 80124da:	4293      	cmp	r3, r2
 80124dc:	d10b      	bne.n	80124f6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80124de:	4b09      	ldr	r3, [pc, #36]	; (8012504 <HAL_PCD_MspInit+0x38>)
 80124e0:	69db      	ldr	r3, [r3, #28]
 80124e2:	4a08      	ldr	r2, [pc, #32]	; (8012504 <HAL_PCD_MspInit+0x38>)
 80124e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80124e8:	61d3      	str	r3, [r2, #28]
 80124ea:	4b06      	ldr	r3, [pc, #24]	; (8012504 <HAL_PCD_MspInit+0x38>)
 80124ec:	69db      	ldr	r3, [r3, #28]
 80124ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124f2:	60fb      	str	r3, [r7, #12]
 80124f4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80124f6:	bf00      	nop
 80124f8:	3714      	adds	r7, #20
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bc80      	pop	{r7}
 80124fe:	4770      	bx	lr
 8012500:	40005c00 	.word	0x40005c00
 8012504:	40021000 	.word	0x40021000

08012508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801251c:	4619      	mov	r1, r3
 801251e:	4610      	mov	r0, r2
 8012520:	f7fe fdb9 	bl	8011096 <USBD_LL_SetupStage>
}
 8012524:	bf00      	nop
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	460b      	mov	r3, r1
 8012536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801253e:	78fa      	ldrb	r2, [r7, #3]
 8012540:	6879      	ldr	r1, [r7, #4]
 8012542:	4613      	mov	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	4413      	add	r3, r2
 8012548:	00db      	lsls	r3, r3, #3
 801254a:	440b      	add	r3, r1
 801254c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	78fb      	ldrb	r3, [r7, #3]
 8012554:	4619      	mov	r1, r3
 8012556:	f7fe fdeb 	bl	8011130 <USBD_LL_DataOutStage>
}
 801255a:	bf00      	nop
 801255c:	3708      	adds	r7, #8
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}

08012562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012562:	b580      	push	{r7, lr}
 8012564:	b082      	sub	sp, #8
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
 801256a:	460b      	mov	r3, r1
 801256c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8012574:	78fa      	ldrb	r2, [r7, #3]
 8012576:	6879      	ldr	r1, [r7, #4]
 8012578:	4613      	mov	r3, r2
 801257a:	009b      	lsls	r3, r3, #2
 801257c:	4413      	add	r3, r2
 801257e:	00db      	lsls	r3, r3, #3
 8012580:	440b      	add	r3, r1
 8012582:	333c      	adds	r3, #60	; 0x3c
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	78fb      	ldrb	r3, [r7, #3]
 8012588:	4619      	mov	r1, r3
 801258a:	f7fe fe42 	bl	8011212 <USBD_LL_DataInStage>
}
 801258e:	bf00      	nop
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012596:	b580      	push	{r7, lr}
 8012598:	b082      	sub	sp, #8
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fe ff52 	bl	801144e <USBD_LL_SOF>
}
 80125aa:	bf00      	nop
 80125ac:	3708      	adds	r7, #8
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b084      	sub	sp, #16
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80125ba:	2301      	movs	r3, #1
 80125bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	689b      	ldr	r3, [r3, #8]
 80125c2:	2b02      	cmp	r3, #2
 80125c4:	d001      	beq.n	80125ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80125c6:	f7f1 ff25 	bl	8004414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80125d0:	7bfa      	ldrb	r2, [r7, #15]
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7fe ff02 	bl	80113de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7fe febb 	bl	801135c <USBD_LL_Reset>
}
 80125e6:	bf00      	nop
 80125e8:	3710      	adds	r7, #16
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
	...

080125f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fe fefc 	bl	80113fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	699b      	ldr	r3, [r3, #24]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d005      	beq.n	8012618 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801260c:	4b04      	ldr	r3, [pc, #16]	; (8012620 <HAL_PCD_SuspendCallback+0x30>)
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	4a03      	ldr	r2, [pc, #12]	; (8012620 <HAL_PCD_SuspendCallback+0x30>)
 8012612:	f043 0306 	orr.w	r3, r3, #6
 8012616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012618:	bf00      	nop
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	e000ed00 	.word	0xe000ed00

08012624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012632:	4618      	mov	r0, r3
 8012634:	f7fe fef6 	bl	8011424 <USBD_LL_Resume>
}
 8012638:	bf00      	nop
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012648:	4a28      	ldr	r2, [pc, #160]	; (80126ec <USBD_LL_Init+0xac>)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4a26      	ldr	r2, [pc, #152]	; (80126ec <USBD_LL_Init+0xac>)
 8012654:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8012658:	4b24      	ldr	r3, [pc, #144]	; (80126ec <USBD_LL_Init+0xac>)
 801265a:	4a25      	ldr	r2, [pc, #148]	; (80126f0 <USBD_LL_Init+0xb0>)
 801265c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801265e:	4b23      	ldr	r3, [pc, #140]	; (80126ec <USBD_LL_Init+0xac>)
 8012660:	2208      	movs	r2, #8
 8012662:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012664:	4b21      	ldr	r3, [pc, #132]	; (80126ec <USBD_LL_Init+0xac>)
 8012666:	2202      	movs	r2, #2
 8012668:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801266a:	4b20      	ldr	r3, [pc, #128]	; (80126ec <USBD_LL_Init+0xac>)
 801266c:	2200      	movs	r2, #0
 801266e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012670:	4b1e      	ldr	r3, [pc, #120]	; (80126ec <USBD_LL_Init+0xac>)
 8012672:	2200      	movs	r2, #0
 8012674:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012676:	4b1d      	ldr	r3, [pc, #116]	; (80126ec <USBD_LL_Init+0xac>)
 8012678:	2200      	movs	r2, #0
 801267a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801267c:	481b      	ldr	r0, [pc, #108]	; (80126ec <USBD_LL_Init+0xac>)
 801267e:	f7f8 fae4 	bl	800ac4a <HAL_PCD_Init>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d001      	beq.n	801268c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8012688:	f7f1 fec4 	bl	8004414 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012692:	2318      	movs	r3, #24
 8012694:	2200      	movs	r2, #0
 8012696:	2100      	movs	r1, #0
 8012698:	f7fa f803 	bl	800c6a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80126a2:	2358      	movs	r3, #88	; 0x58
 80126a4:	2200      	movs	r2, #0
 80126a6:	2180      	movs	r1, #128	; 0x80
 80126a8:	f7f9 fffb 	bl	800c6a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80126b2:	23c0      	movs	r3, #192	; 0xc0
 80126b4:	2200      	movs	r2, #0
 80126b6:	2181      	movs	r1, #129	; 0x81
 80126b8:	f7f9 fff3 	bl	800c6a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80126c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80126c6:	2200      	movs	r2, #0
 80126c8:	2101      	movs	r1, #1
 80126ca:	f7f9 ffea 	bl	800c6a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80126d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126d8:	2200      	movs	r2, #0
 80126da:	2182      	movs	r1, #130	; 0x82
 80126dc:	f7f9 ffe1 	bl	800c6a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	2000356c 	.word	0x2000356c
 80126f0:	40005c00 	.word	0x40005c00

080126f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b084      	sub	sp, #16
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126fc:	2300      	movs	r3, #0
 80126fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012700:	2300      	movs	r3, #0
 8012702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801270a:	4618      	mov	r0, r3
 801270c:	f7f8 fb9c 	bl	800ae48 <HAL_PCD_Start>
 8012710:	4603      	mov	r3, r0
 8012712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012714:	7bfb      	ldrb	r3, [r7, #15]
 8012716:	4618      	mov	r0, r3
 8012718:	f000 f94e 	bl	80129b8 <USBD_Get_USB_Status>
 801271c:	4603      	mov	r3, r0
 801271e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012720:	7bbb      	ldrb	r3, [r7, #14]
}
 8012722:	4618      	mov	r0, r3
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}

0801272a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801272a:	b580      	push	{r7, lr}
 801272c:	b084      	sub	sp, #16
 801272e:	af00      	add	r7, sp, #0
 8012730:	6078      	str	r0, [r7, #4]
 8012732:	4608      	mov	r0, r1
 8012734:	4611      	mov	r1, r2
 8012736:	461a      	mov	r2, r3
 8012738:	4603      	mov	r3, r0
 801273a:	70fb      	strb	r3, [r7, #3]
 801273c:	460b      	mov	r3, r1
 801273e:	70bb      	strb	r3, [r7, #2]
 8012740:	4613      	mov	r3, r2
 8012742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012744:	2300      	movs	r3, #0
 8012746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012748:	2300      	movs	r3, #0
 801274a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012752:	78bb      	ldrb	r3, [r7, #2]
 8012754:	883a      	ldrh	r2, [r7, #0]
 8012756:	78f9      	ldrb	r1, [r7, #3]
 8012758:	f7f8 fcf1 	bl	800b13e <HAL_PCD_EP_Open>
 801275c:	4603      	mov	r3, r0
 801275e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012760:	7bfb      	ldrb	r3, [r7, #15]
 8012762:	4618      	mov	r0, r3
 8012764:	f000 f928 	bl	80129b8 <USBD_Get_USB_Status>
 8012768:	4603      	mov	r3, r0
 801276a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801276c:	7bbb      	ldrb	r3, [r7, #14]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3710      	adds	r7, #16
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}

08012776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b084      	sub	sp, #16
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
 801277e:	460b      	mov	r3, r1
 8012780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012782:	2300      	movs	r3, #0
 8012784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012786:	2300      	movs	r3, #0
 8012788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012790:	78fa      	ldrb	r2, [r7, #3]
 8012792:	4611      	mov	r1, r2
 8012794:	4618      	mov	r0, r3
 8012796:	f7f8 fd2f 	bl	800b1f8 <HAL_PCD_EP_Close>
 801279a:	4603      	mov	r3, r0
 801279c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801279e:	7bfb      	ldrb	r3, [r7, #15]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f000 f909 	bl	80129b8 <USBD_Get_USB_Status>
 80127a6:	4603      	mov	r3, r0
 80127a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3710      	adds	r7, #16
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	460b      	mov	r3, r1
 80127be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127c0:	2300      	movs	r3, #0
 80127c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127c4:	2300      	movs	r3, #0
 80127c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127ce:	78fa      	ldrb	r2, [r7, #3]
 80127d0:	4611      	mov	r1, r2
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7f8 fdd7 	bl	800b386 <HAL_PCD_EP_SetStall>
 80127d8:	4603      	mov	r3, r0
 80127da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127dc:	7bfb      	ldrb	r3, [r7, #15]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 f8ea 	bl	80129b8 <USBD_Get_USB_Status>
 80127e4:	4603      	mov	r3, r0
 80127e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b084      	sub	sp, #16
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	460b      	mov	r3, r1
 80127fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127fe:	2300      	movs	r3, #0
 8012800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012802:	2300      	movs	r3, #0
 8012804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801280c:	78fa      	ldrb	r2, [r7, #3]
 801280e:	4611      	mov	r1, r2
 8012810:	4618      	mov	r0, r3
 8012812:	f7f8 fe18 	bl	800b446 <HAL_PCD_EP_ClrStall>
 8012816:	4603      	mov	r3, r0
 8012818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801281a:	7bfb      	ldrb	r3, [r7, #15]
 801281c:	4618      	mov	r0, r3
 801281e:	f000 f8cb 	bl	80129b8 <USBD_Get_USB_Status>
 8012822:	4603      	mov	r3, r0
 8012824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012826:	7bbb      	ldrb	r3, [r7, #14]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012830:	b480      	push	{r7}
 8012832:	b085      	sub	sp, #20
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	460b      	mov	r3, r1
 801283a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012848:	2b00      	cmp	r3, #0
 801284a:	da0c      	bge.n	8012866 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801284c:	78fb      	ldrb	r3, [r7, #3]
 801284e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012852:	68f9      	ldr	r1, [r7, #12]
 8012854:	1c5a      	adds	r2, r3, #1
 8012856:	4613      	mov	r3, r2
 8012858:	009b      	lsls	r3, r3, #2
 801285a:	4413      	add	r3, r2
 801285c:	00db      	lsls	r3, r3, #3
 801285e:	440b      	add	r3, r1
 8012860:	3302      	adds	r3, #2
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	e00b      	b.n	801287e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012866:	78fb      	ldrb	r3, [r7, #3]
 8012868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801286c:	68f9      	ldr	r1, [r7, #12]
 801286e:	4613      	mov	r3, r2
 8012870:	009b      	lsls	r3, r3, #2
 8012872:	4413      	add	r3, r2
 8012874:	00db      	lsls	r3, r3, #3
 8012876:	440b      	add	r3, r1
 8012878:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801287c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801287e:	4618      	mov	r0, r3
 8012880:	3714      	adds	r7, #20
 8012882:	46bd      	mov	sp, r7
 8012884:	bc80      	pop	{r7}
 8012886:	4770      	bx	lr

08012888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012894:	2300      	movs	r3, #0
 8012896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012898:	2300      	movs	r3, #0
 801289a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80128a2:	78fa      	ldrb	r2, [r7, #3]
 80128a4:	4611      	mov	r1, r2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f8 fc24 	bl	800b0f4 <HAL_PCD_SetAddress>
 80128ac:	4603      	mov	r3, r0
 80128ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128b0:	7bfb      	ldrb	r3, [r7, #15]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 f880 	bl	80129b8 <USBD_Get_USB_Status>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3710      	adds	r7, #16
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}

080128c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80128c6:	b580      	push	{r7, lr}
 80128c8:	b086      	sub	sp, #24
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	60f8      	str	r0, [r7, #12]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	461a      	mov	r2, r3
 80128d2:	460b      	mov	r3, r1
 80128d4:	72fb      	strb	r3, [r7, #11]
 80128d6:	4613      	mov	r3, r2
 80128d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128da:	2300      	movs	r3, #0
 80128dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80128e8:	893b      	ldrh	r3, [r7, #8]
 80128ea:	7af9      	ldrb	r1, [r7, #11]
 80128ec:	687a      	ldr	r2, [r7, #4]
 80128ee:	f7f8 fd13 	bl	800b318 <HAL_PCD_EP_Transmit>
 80128f2:	4603      	mov	r3, r0
 80128f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128f6:	7dfb      	ldrb	r3, [r7, #23]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f000 f85d 	bl	80129b8 <USBD_Get_USB_Status>
 80128fe:	4603      	mov	r3, r0
 8012900:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012902:	7dbb      	ldrb	r3, [r7, #22]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	607a      	str	r2, [r7, #4]
 8012916:	461a      	mov	r2, r3
 8012918:	460b      	mov	r3, r1
 801291a:	72fb      	strb	r3, [r7, #11]
 801291c:	4613      	mov	r3, r2
 801291e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012920:	2300      	movs	r3, #0
 8012922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801292e:	893b      	ldrh	r3, [r7, #8]
 8012930:	7af9      	ldrb	r1, [r7, #11]
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	f7f8 fca8 	bl	800b288 <HAL_PCD_EP_Receive>
 8012938:	4603      	mov	r3, r0
 801293a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801293c:	7dfb      	ldrb	r3, [r7, #23]
 801293e:	4618      	mov	r0, r3
 8012940:	f000 f83a 	bl	80129b8 <USBD_Get_USB_Status>
 8012944:	4603      	mov	r3, r0
 8012946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012948:	7dbb      	ldrb	r3, [r7, #22]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3718      	adds	r7, #24
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b082      	sub	sp, #8
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	460b      	mov	r3, r1
 801295c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012964:	78fa      	ldrb	r2, [r7, #3]
 8012966:	4611      	mov	r1, r2
 8012968:	4618      	mov	r0, r3
 801296a:	f7f8 fcbe 	bl	800b2ea <HAL_PCD_EP_GetRxCount>
 801296e:	4603      	mov	r3, r0
}
 8012970:	4618      	mov	r0, r3
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012980:	4b02      	ldr	r3, [pc, #8]	; (801298c <USBD_static_malloc+0x14>)
}
 8012982:	4618      	mov	r0, r3
 8012984:	370c      	adds	r7, #12
 8012986:	46bd      	mov	sp, r7
 8012988:	bc80      	pop	{r7}
 801298a:	4770      	bx	lr
 801298c:	2000385c 	.word	0x2000385c

08012990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]

}
 8012998:	bf00      	nop
 801299a:	370c      	adds	r7, #12
 801299c:	46bd      	mov	sp, r7
 801299e:	bc80      	pop	{r7}
 80129a0:	4770      	bx	lr

080129a2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129a2:	b480      	push	{r7}
 80129a4:	b083      	sub	sp, #12
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
 80129aa:	460b      	mov	r3, r1
 80129ac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80129ae:	bf00      	nop
 80129b0:	370c      	adds	r7, #12
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bc80      	pop	{r7}
 80129b6:	4770      	bx	lr

080129b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b085      	sub	sp, #20
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129c2:	2300      	movs	r3, #0
 80129c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80129c6:	79fb      	ldrb	r3, [r7, #7]
 80129c8:	2b03      	cmp	r3, #3
 80129ca:	d817      	bhi.n	80129fc <USBD_Get_USB_Status+0x44>
 80129cc:	a201      	add	r2, pc, #4	; (adr r2, 80129d4 <USBD_Get_USB_Status+0x1c>)
 80129ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129d2:	bf00      	nop
 80129d4:	080129e5 	.word	0x080129e5
 80129d8:	080129eb 	.word	0x080129eb
 80129dc:	080129f1 	.word	0x080129f1
 80129e0:	080129f7 	.word	0x080129f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80129e4:	2300      	movs	r3, #0
 80129e6:	73fb      	strb	r3, [r7, #15]
    break;
 80129e8:	e00b      	b.n	8012a02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80129ea:	2302      	movs	r3, #2
 80129ec:	73fb      	strb	r3, [r7, #15]
    break;
 80129ee:	e008      	b.n	8012a02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80129f0:	2301      	movs	r3, #1
 80129f2:	73fb      	strb	r3, [r7, #15]
    break;
 80129f4:	e005      	b.n	8012a02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80129f6:	2302      	movs	r3, #2
 80129f8:	73fb      	strb	r3, [r7, #15]
    break;
 80129fa:	e002      	b.n	8012a02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80129fc:	2302      	movs	r3, #2
 80129fe:	73fb      	strb	r3, [r7, #15]
    break;
 8012a00:	bf00      	nop
  }
  return usb_status;
 8012a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3714      	adds	r7, #20
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bc80      	pop	{r7}
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop

08012a10 <atoi>:
 8012a10:	220a      	movs	r2, #10
 8012a12:	2100      	movs	r1, #0
 8012a14:	f000 bd8a 	b.w	801352c <strtol>

08012a18 <__errno>:
 8012a18:	4b01      	ldr	r3, [pc, #4]	; (8012a20 <__errno+0x8>)
 8012a1a:	6818      	ldr	r0, [r3, #0]
 8012a1c:	4770      	bx	lr
 8012a1e:	bf00      	nop
 8012a20:	20000810 	.word	0x20000810

08012a24 <__libc_init_array>:
 8012a24:	b570      	push	{r4, r5, r6, lr}
 8012a26:	2600      	movs	r6, #0
 8012a28:	4d0c      	ldr	r5, [pc, #48]	; (8012a5c <__libc_init_array+0x38>)
 8012a2a:	4c0d      	ldr	r4, [pc, #52]	; (8012a60 <__libc_init_array+0x3c>)
 8012a2c:	1b64      	subs	r4, r4, r5
 8012a2e:	10a4      	asrs	r4, r4, #2
 8012a30:	42a6      	cmp	r6, r4
 8012a32:	d109      	bne.n	8012a48 <__libc_init_array+0x24>
 8012a34:	f002 ffde 	bl	80159f4 <_init>
 8012a38:	2600      	movs	r6, #0
 8012a3a:	4d0a      	ldr	r5, [pc, #40]	; (8012a64 <__libc_init_array+0x40>)
 8012a3c:	4c0a      	ldr	r4, [pc, #40]	; (8012a68 <__libc_init_array+0x44>)
 8012a3e:	1b64      	subs	r4, r4, r5
 8012a40:	10a4      	asrs	r4, r4, #2
 8012a42:	42a6      	cmp	r6, r4
 8012a44:	d105      	bne.n	8012a52 <__libc_init_array+0x2e>
 8012a46:	bd70      	pop	{r4, r5, r6, pc}
 8012a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a4c:	4798      	blx	r3
 8012a4e:	3601      	adds	r6, #1
 8012a50:	e7ee      	b.n	8012a30 <__libc_init_array+0xc>
 8012a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a56:	4798      	blx	r3
 8012a58:	3601      	adds	r6, #1
 8012a5a:	e7f2      	b.n	8012a42 <__libc_init_array+0x1e>
 8012a5c:	080162c4 	.word	0x080162c4
 8012a60:	080162c4 	.word	0x080162c4
 8012a64:	080162c4 	.word	0x080162c4
 8012a68:	080162c8 	.word	0x080162c8

08012a6c <memset>:
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	4402      	add	r2, r0
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d100      	bne.n	8012a76 <memset+0xa>
 8012a74:	4770      	bx	lr
 8012a76:	f803 1b01 	strb.w	r1, [r3], #1
 8012a7a:	e7f9      	b.n	8012a70 <memset+0x4>

08012a7c <__cvt>:
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a82:	461f      	mov	r7, r3
 8012a84:	bfbb      	ittet	lt
 8012a86:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8012a8a:	461f      	movlt	r7, r3
 8012a8c:	2300      	movge	r3, #0
 8012a8e:	232d      	movlt	r3, #45	; 0x2d
 8012a90:	b088      	sub	sp, #32
 8012a92:	4614      	mov	r4, r2
 8012a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a96:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012a98:	7013      	strb	r3, [r2, #0]
 8012a9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8012aa0:	f023 0820 	bic.w	r8, r3, #32
 8012aa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012aa8:	d005      	beq.n	8012ab6 <__cvt+0x3a>
 8012aaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012aae:	d100      	bne.n	8012ab2 <__cvt+0x36>
 8012ab0:	3501      	adds	r5, #1
 8012ab2:	2302      	movs	r3, #2
 8012ab4:	e000      	b.n	8012ab8 <__cvt+0x3c>
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	aa07      	add	r2, sp, #28
 8012aba:	9204      	str	r2, [sp, #16]
 8012abc:	aa06      	add	r2, sp, #24
 8012abe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8012ac2:	e9cd 3500 	strd	r3, r5, [sp]
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	463b      	mov	r3, r7
 8012aca:	f000 fde5 	bl	8013698 <_dtoa_r>
 8012ace:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	d102      	bne.n	8012adc <__cvt+0x60>
 8012ad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ad8:	07db      	lsls	r3, r3, #31
 8012ada:	d522      	bpl.n	8012b22 <__cvt+0xa6>
 8012adc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012ae0:	eb06 0905 	add.w	r9, r6, r5
 8012ae4:	d110      	bne.n	8012b08 <__cvt+0x8c>
 8012ae6:	7833      	ldrb	r3, [r6, #0]
 8012ae8:	2b30      	cmp	r3, #48	; 0x30
 8012aea:	d10a      	bne.n	8012b02 <__cvt+0x86>
 8012aec:	2200      	movs	r2, #0
 8012aee:	2300      	movs	r3, #0
 8012af0:	4620      	mov	r0, r4
 8012af2:	4639      	mov	r1, r7
 8012af4:	f7ed ffc4 	bl	8000a80 <__aeabi_dcmpeq>
 8012af8:	b918      	cbnz	r0, 8012b02 <__cvt+0x86>
 8012afa:	f1c5 0501 	rsb	r5, r5, #1
 8012afe:	f8ca 5000 	str.w	r5, [sl]
 8012b02:	f8da 3000 	ldr.w	r3, [sl]
 8012b06:	4499      	add	r9, r3
 8012b08:	2200      	movs	r2, #0
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	4639      	mov	r1, r7
 8012b10:	f7ed ffb6 	bl	8000a80 <__aeabi_dcmpeq>
 8012b14:	b108      	cbz	r0, 8012b1a <__cvt+0x9e>
 8012b16:	f8cd 901c 	str.w	r9, [sp, #28]
 8012b1a:	2230      	movs	r2, #48	; 0x30
 8012b1c:	9b07      	ldr	r3, [sp, #28]
 8012b1e:	454b      	cmp	r3, r9
 8012b20:	d307      	bcc.n	8012b32 <__cvt+0xb6>
 8012b22:	4630      	mov	r0, r6
 8012b24:	9b07      	ldr	r3, [sp, #28]
 8012b26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012b28:	1b9b      	subs	r3, r3, r6
 8012b2a:	6013      	str	r3, [r2, #0]
 8012b2c:	b008      	add	sp, #32
 8012b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b32:	1c59      	adds	r1, r3, #1
 8012b34:	9107      	str	r1, [sp, #28]
 8012b36:	701a      	strb	r2, [r3, #0]
 8012b38:	e7f0      	b.n	8012b1c <__cvt+0xa0>

08012b3a <__exponent>:
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b3e:	2900      	cmp	r1, #0
 8012b40:	f803 2b02 	strb.w	r2, [r3], #2
 8012b44:	bfb6      	itet	lt
 8012b46:	222d      	movlt	r2, #45	; 0x2d
 8012b48:	222b      	movge	r2, #43	; 0x2b
 8012b4a:	4249      	neglt	r1, r1
 8012b4c:	2909      	cmp	r1, #9
 8012b4e:	7042      	strb	r2, [r0, #1]
 8012b50:	dd2b      	ble.n	8012baa <__exponent+0x70>
 8012b52:	f10d 0407 	add.w	r4, sp, #7
 8012b56:	46a4      	mov	ip, r4
 8012b58:	270a      	movs	r7, #10
 8012b5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8012b5e:	460a      	mov	r2, r1
 8012b60:	46a6      	mov	lr, r4
 8012b62:	fb07 1516 	mls	r5, r7, r6, r1
 8012b66:	2a63      	cmp	r2, #99	; 0x63
 8012b68:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8012b6c:	4631      	mov	r1, r6
 8012b6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012b72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012b76:	dcf0      	bgt.n	8012b5a <__exponent+0x20>
 8012b78:	3130      	adds	r1, #48	; 0x30
 8012b7a:	f1ae 0502 	sub.w	r5, lr, #2
 8012b7e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012b82:	4629      	mov	r1, r5
 8012b84:	1c44      	adds	r4, r0, #1
 8012b86:	4561      	cmp	r1, ip
 8012b88:	d30a      	bcc.n	8012ba0 <__exponent+0x66>
 8012b8a:	f10d 0209 	add.w	r2, sp, #9
 8012b8e:	eba2 020e 	sub.w	r2, r2, lr
 8012b92:	4565      	cmp	r5, ip
 8012b94:	bf88      	it	hi
 8012b96:	2200      	movhi	r2, #0
 8012b98:	4413      	add	r3, r2
 8012b9a:	1a18      	subs	r0, r3, r0
 8012b9c:	b003      	add	sp, #12
 8012b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ba0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ba4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012ba8:	e7ed      	b.n	8012b86 <__exponent+0x4c>
 8012baa:	2330      	movs	r3, #48	; 0x30
 8012bac:	3130      	adds	r1, #48	; 0x30
 8012bae:	7083      	strb	r3, [r0, #2]
 8012bb0:	70c1      	strb	r1, [r0, #3]
 8012bb2:	1d03      	adds	r3, r0, #4
 8012bb4:	e7f1      	b.n	8012b9a <__exponent+0x60>
	...

08012bb8 <_printf_float>:
 8012bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bbc:	b091      	sub	sp, #68	; 0x44
 8012bbe:	460c      	mov	r4, r1
 8012bc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012bc4:	4616      	mov	r6, r2
 8012bc6:	461f      	mov	r7, r3
 8012bc8:	4605      	mov	r5, r0
 8012bca:	f001 fb65 	bl	8014298 <_localeconv_r>
 8012bce:	6803      	ldr	r3, [r0, #0]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8012bd4:	f7ed fb28 	bl	8000228 <strlen>
 8012bd8:	2300      	movs	r3, #0
 8012bda:	930e      	str	r3, [sp, #56]	; 0x38
 8012bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8012be0:	900a      	str	r0, [sp, #40]	; 0x28
 8012be2:	3307      	adds	r3, #7
 8012be4:	f023 0307 	bic.w	r3, r3, #7
 8012be8:	f103 0208 	add.w	r2, r3, #8
 8012bec:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8012bf4:	f8c8 2000 	str.w	r2, [r8]
 8012bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012c00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8012c04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c0e:	4640      	mov	r0, r8
 8012c10:	4b9c      	ldr	r3, [pc, #624]	; (8012e84 <_printf_float+0x2cc>)
 8012c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c14:	f7ed ff66 	bl	8000ae4 <__aeabi_dcmpun>
 8012c18:	bb70      	cbnz	r0, 8012c78 <_printf_float+0xc0>
 8012c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c1e:	4640      	mov	r0, r8
 8012c20:	4b98      	ldr	r3, [pc, #608]	; (8012e84 <_printf_float+0x2cc>)
 8012c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c24:	f7ed ff40 	bl	8000aa8 <__aeabi_dcmple>
 8012c28:	bb30      	cbnz	r0, 8012c78 <_printf_float+0xc0>
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	4640      	mov	r0, r8
 8012c30:	4651      	mov	r1, sl
 8012c32:	f7ed ff2f 	bl	8000a94 <__aeabi_dcmplt>
 8012c36:	b110      	cbz	r0, 8012c3e <_printf_float+0x86>
 8012c38:	232d      	movs	r3, #45	; 0x2d
 8012c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c3e:	4b92      	ldr	r3, [pc, #584]	; (8012e88 <_printf_float+0x2d0>)
 8012c40:	4892      	ldr	r0, [pc, #584]	; (8012e8c <_printf_float+0x2d4>)
 8012c42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012c46:	bf94      	ite	ls
 8012c48:	4698      	movls	r8, r3
 8012c4a:	4680      	movhi	r8, r0
 8012c4c:	2303      	movs	r3, #3
 8012c4e:	f04f 0a00 	mov.w	sl, #0
 8012c52:	6123      	str	r3, [r4, #16]
 8012c54:	f02b 0304 	bic.w	r3, fp, #4
 8012c58:	6023      	str	r3, [r4, #0]
 8012c5a:	4633      	mov	r3, r6
 8012c5c:	4621      	mov	r1, r4
 8012c5e:	4628      	mov	r0, r5
 8012c60:	9700      	str	r7, [sp, #0]
 8012c62:	aa0f      	add	r2, sp, #60	; 0x3c
 8012c64:	f000 f9d4 	bl	8013010 <_printf_common>
 8012c68:	3001      	adds	r0, #1
 8012c6a:	f040 8090 	bne.w	8012d8e <_printf_float+0x1d6>
 8012c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c72:	b011      	add	sp, #68	; 0x44
 8012c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c78:	4642      	mov	r2, r8
 8012c7a:	4653      	mov	r3, sl
 8012c7c:	4640      	mov	r0, r8
 8012c7e:	4651      	mov	r1, sl
 8012c80:	f7ed ff30 	bl	8000ae4 <__aeabi_dcmpun>
 8012c84:	b148      	cbz	r0, 8012c9a <_printf_float+0xe2>
 8012c86:	f1ba 0f00 	cmp.w	sl, #0
 8012c8a:	bfb8      	it	lt
 8012c8c:	232d      	movlt	r3, #45	; 0x2d
 8012c8e:	4880      	ldr	r0, [pc, #512]	; (8012e90 <_printf_float+0x2d8>)
 8012c90:	bfb8      	it	lt
 8012c92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012c96:	4b7f      	ldr	r3, [pc, #508]	; (8012e94 <_printf_float+0x2dc>)
 8012c98:	e7d3      	b.n	8012c42 <_printf_float+0x8a>
 8012c9a:	6863      	ldr	r3, [r4, #4]
 8012c9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	d142      	bne.n	8012d2a <_printf_float+0x172>
 8012ca4:	2306      	movs	r3, #6
 8012ca6:	6063      	str	r3, [r4, #4]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	9206      	str	r2, [sp, #24]
 8012cac:	aa0e      	add	r2, sp, #56	; 0x38
 8012cae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8012cb2:	aa0d      	add	r2, sp, #52	; 0x34
 8012cb4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8012cb8:	9203      	str	r2, [sp, #12]
 8012cba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8012cbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012cc2:	6023      	str	r3, [r4, #0]
 8012cc4:	6863      	ldr	r3, [r4, #4]
 8012cc6:	4642      	mov	r2, r8
 8012cc8:	9300      	str	r3, [sp, #0]
 8012cca:	4628      	mov	r0, r5
 8012ccc:	4653      	mov	r3, sl
 8012cce:	910b      	str	r1, [sp, #44]	; 0x2c
 8012cd0:	f7ff fed4 	bl	8012a7c <__cvt>
 8012cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012cd6:	4680      	mov	r8, r0
 8012cd8:	2947      	cmp	r1, #71	; 0x47
 8012cda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012cdc:	d108      	bne.n	8012cf0 <_printf_float+0x138>
 8012cde:	1cc8      	adds	r0, r1, #3
 8012ce0:	db02      	blt.n	8012ce8 <_printf_float+0x130>
 8012ce2:	6863      	ldr	r3, [r4, #4]
 8012ce4:	4299      	cmp	r1, r3
 8012ce6:	dd40      	ble.n	8012d6a <_printf_float+0x1b2>
 8012ce8:	f1a9 0902 	sub.w	r9, r9, #2
 8012cec:	fa5f f989 	uxtb.w	r9, r9
 8012cf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012cf4:	d81f      	bhi.n	8012d36 <_printf_float+0x17e>
 8012cf6:	464a      	mov	r2, r9
 8012cf8:	3901      	subs	r1, #1
 8012cfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012cfe:	910d      	str	r1, [sp, #52]	; 0x34
 8012d00:	f7ff ff1b 	bl	8012b3a <__exponent>
 8012d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d06:	4682      	mov	sl, r0
 8012d08:	1813      	adds	r3, r2, r0
 8012d0a:	2a01      	cmp	r2, #1
 8012d0c:	6123      	str	r3, [r4, #16]
 8012d0e:	dc02      	bgt.n	8012d16 <_printf_float+0x15e>
 8012d10:	6822      	ldr	r2, [r4, #0]
 8012d12:	07d2      	lsls	r2, r2, #31
 8012d14:	d501      	bpl.n	8012d1a <_printf_float+0x162>
 8012d16:	3301      	adds	r3, #1
 8012d18:	6123      	str	r3, [r4, #16]
 8012d1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d09b      	beq.n	8012c5a <_printf_float+0xa2>
 8012d22:	232d      	movs	r3, #45	; 0x2d
 8012d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d28:	e797      	b.n	8012c5a <_printf_float+0xa2>
 8012d2a:	2947      	cmp	r1, #71	; 0x47
 8012d2c:	d1bc      	bne.n	8012ca8 <_printf_float+0xf0>
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1ba      	bne.n	8012ca8 <_printf_float+0xf0>
 8012d32:	2301      	movs	r3, #1
 8012d34:	e7b7      	b.n	8012ca6 <_printf_float+0xee>
 8012d36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012d3a:	d118      	bne.n	8012d6e <_printf_float+0x1b6>
 8012d3c:	2900      	cmp	r1, #0
 8012d3e:	6863      	ldr	r3, [r4, #4]
 8012d40:	dd0b      	ble.n	8012d5a <_printf_float+0x1a2>
 8012d42:	6121      	str	r1, [r4, #16]
 8012d44:	b913      	cbnz	r3, 8012d4c <_printf_float+0x194>
 8012d46:	6822      	ldr	r2, [r4, #0]
 8012d48:	07d0      	lsls	r0, r2, #31
 8012d4a:	d502      	bpl.n	8012d52 <_printf_float+0x19a>
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	440b      	add	r3, r1
 8012d50:	6123      	str	r3, [r4, #16]
 8012d52:	f04f 0a00 	mov.w	sl, #0
 8012d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8012d58:	e7df      	b.n	8012d1a <_printf_float+0x162>
 8012d5a:	b913      	cbnz	r3, 8012d62 <_printf_float+0x1aa>
 8012d5c:	6822      	ldr	r2, [r4, #0]
 8012d5e:	07d2      	lsls	r2, r2, #31
 8012d60:	d501      	bpl.n	8012d66 <_printf_float+0x1ae>
 8012d62:	3302      	adds	r3, #2
 8012d64:	e7f4      	b.n	8012d50 <_printf_float+0x198>
 8012d66:	2301      	movs	r3, #1
 8012d68:	e7f2      	b.n	8012d50 <_printf_float+0x198>
 8012d6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d70:	4299      	cmp	r1, r3
 8012d72:	db05      	blt.n	8012d80 <_printf_float+0x1c8>
 8012d74:	6823      	ldr	r3, [r4, #0]
 8012d76:	6121      	str	r1, [r4, #16]
 8012d78:	07d8      	lsls	r0, r3, #31
 8012d7a:	d5ea      	bpl.n	8012d52 <_printf_float+0x19a>
 8012d7c:	1c4b      	adds	r3, r1, #1
 8012d7e:	e7e7      	b.n	8012d50 <_printf_float+0x198>
 8012d80:	2900      	cmp	r1, #0
 8012d82:	bfcc      	ite	gt
 8012d84:	2201      	movgt	r2, #1
 8012d86:	f1c1 0202 	rsble	r2, r1, #2
 8012d8a:	4413      	add	r3, r2
 8012d8c:	e7e0      	b.n	8012d50 <_printf_float+0x198>
 8012d8e:	6823      	ldr	r3, [r4, #0]
 8012d90:	055a      	lsls	r2, r3, #21
 8012d92:	d407      	bmi.n	8012da4 <_printf_float+0x1ec>
 8012d94:	6923      	ldr	r3, [r4, #16]
 8012d96:	4642      	mov	r2, r8
 8012d98:	4631      	mov	r1, r6
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	47b8      	blx	r7
 8012d9e:	3001      	adds	r0, #1
 8012da0:	d12b      	bne.n	8012dfa <_printf_float+0x242>
 8012da2:	e764      	b.n	8012c6e <_printf_float+0xb6>
 8012da4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012da8:	f240 80dd 	bls.w	8012f66 <_printf_float+0x3ae>
 8012dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012db0:	2200      	movs	r2, #0
 8012db2:	2300      	movs	r3, #0
 8012db4:	f7ed fe64 	bl	8000a80 <__aeabi_dcmpeq>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	d033      	beq.n	8012e24 <_printf_float+0x26c>
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	4631      	mov	r1, r6
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	4a35      	ldr	r2, [pc, #212]	; (8012e98 <_printf_float+0x2e0>)
 8012dc4:	47b8      	blx	r7
 8012dc6:	3001      	adds	r0, #1
 8012dc8:	f43f af51 	beq.w	8012c6e <_printf_float+0xb6>
 8012dcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	db02      	blt.n	8012dda <_printf_float+0x222>
 8012dd4:	6823      	ldr	r3, [r4, #0]
 8012dd6:	07d8      	lsls	r0, r3, #31
 8012dd8:	d50f      	bpl.n	8012dfa <_printf_float+0x242>
 8012dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012dde:	4631      	mov	r1, r6
 8012de0:	4628      	mov	r0, r5
 8012de2:	47b8      	blx	r7
 8012de4:	3001      	adds	r0, #1
 8012de6:	f43f af42 	beq.w	8012c6e <_printf_float+0xb6>
 8012dea:	f04f 0800 	mov.w	r8, #0
 8012dee:	f104 091a 	add.w	r9, r4, #26
 8012df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012df4:	3b01      	subs	r3, #1
 8012df6:	4543      	cmp	r3, r8
 8012df8:	dc09      	bgt.n	8012e0e <_printf_float+0x256>
 8012dfa:	6823      	ldr	r3, [r4, #0]
 8012dfc:	079b      	lsls	r3, r3, #30
 8012dfe:	f100 8102 	bmi.w	8013006 <_printf_float+0x44e>
 8012e02:	68e0      	ldr	r0, [r4, #12]
 8012e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e06:	4298      	cmp	r0, r3
 8012e08:	bfb8      	it	lt
 8012e0a:	4618      	movlt	r0, r3
 8012e0c:	e731      	b.n	8012c72 <_printf_float+0xba>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	464a      	mov	r2, r9
 8012e12:	4631      	mov	r1, r6
 8012e14:	4628      	mov	r0, r5
 8012e16:	47b8      	blx	r7
 8012e18:	3001      	adds	r0, #1
 8012e1a:	f43f af28 	beq.w	8012c6e <_printf_float+0xb6>
 8012e1e:	f108 0801 	add.w	r8, r8, #1
 8012e22:	e7e6      	b.n	8012df2 <_printf_float+0x23a>
 8012e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	dc38      	bgt.n	8012e9c <_printf_float+0x2e4>
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	4631      	mov	r1, r6
 8012e2e:	4628      	mov	r0, r5
 8012e30:	4a19      	ldr	r2, [pc, #100]	; (8012e98 <_printf_float+0x2e0>)
 8012e32:	47b8      	blx	r7
 8012e34:	3001      	adds	r0, #1
 8012e36:	f43f af1a 	beq.w	8012c6e <_printf_float+0xb6>
 8012e3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	d102      	bne.n	8012e48 <_printf_float+0x290>
 8012e42:	6823      	ldr	r3, [r4, #0]
 8012e44:	07d9      	lsls	r1, r3, #31
 8012e46:	d5d8      	bpl.n	8012dfa <_printf_float+0x242>
 8012e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e4c:	4631      	mov	r1, r6
 8012e4e:	4628      	mov	r0, r5
 8012e50:	47b8      	blx	r7
 8012e52:	3001      	adds	r0, #1
 8012e54:	f43f af0b 	beq.w	8012c6e <_printf_float+0xb6>
 8012e58:	f04f 0900 	mov.w	r9, #0
 8012e5c:	f104 0a1a 	add.w	sl, r4, #26
 8012e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e62:	425b      	negs	r3, r3
 8012e64:	454b      	cmp	r3, r9
 8012e66:	dc01      	bgt.n	8012e6c <_printf_float+0x2b4>
 8012e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e6a:	e794      	b.n	8012d96 <_printf_float+0x1de>
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	4652      	mov	r2, sl
 8012e70:	4631      	mov	r1, r6
 8012e72:	4628      	mov	r0, r5
 8012e74:	47b8      	blx	r7
 8012e76:	3001      	adds	r0, #1
 8012e78:	f43f aef9 	beq.w	8012c6e <_printf_float+0xb6>
 8012e7c:	f109 0901 	add.w	r9, r9, #1
 8012e80:	e7ee      	b.n	8012e60 <_printf_float+0x2a8>
 8012e82:	bf00      	nop
 8012e84:	7fefffff 	.word	0x7fefffff
 8012e88:	08015e88 	.word	0x08015e88
 8012e8c:	08015e8c 	.word	0x08015e8c
 8012e90:	08015e94 	.word	0x08015e94
 8012e94:	08015e90 	.word	0x08015e90
 8012e98:	08015e98 	.word	0x08015e98
 8012e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	bfa8      	it	ge
 8012ea4:	461a      	movge	r2, r3
 8012ea6:	2a00      	cmp	r2, #0
 8012ea8:	4691      	mov	r9, r2
 8012eaa:	dc37      	bgt.n	8012f1c <_printf_float+0x364>
 8012eac:	f04f 0b00 	mov.w	fp, #0
 8012eb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012eb4:	f104 021a 	add.w	r2, r4, #26
 8012eb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012ebc:	ebaa 0309 	sub.w	r3, sl, r9
 8012ec0:	455b      	cmp	r3, fp
 8012ec2:	dc33      	bgt.n	8012f2c <_printf_float+0x374>
 8012ec4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	db3b      	blt.n	8012f44 <_printf_float+0x38c>
 8012ecc:	6823      	ldr	r3, [r4, #0]
 8012ece:	07da      	lsls	r2, r3, #31
 8012ed0:	d438      	bmi.n	8012f44 <_printf_float+0x38c>
 8012ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ed4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012ed6:	eba3 020a 	sub.w	r2, r3, sl
 8012eda:	eba3 0901 	sub.w	r9, r3, r1
 8012ede:	4591      	cmp	r9, r2
 8012ee0:	bfa8      	it	ge
 8012ee2:	4691      	movge	r9, r2
 8012ee4:	f1b9 0f00 	cmp.w	r9, #0
 8012ee8:	dc34      	bgt.n	8012f54 <_printf_float+0x39c>
 8012eea:	f04f 0800 	mov.w	r8, #0
 8012eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ef2:	f104 0a1a 	add.w	sl, r4, #26
 8012ef6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012efa:	1a9b      	subs	r3, r3, r2
 8012efc:	eba3 0309 	sub.w	r3, r3, r9
 8012f00:	4543      	cmp	r3, r8
 8012f02:	f77f af7a 	ble.w	8012dfa <_printf_float+0x242>
 8012f06:	2301      	movs	r3, #1
 8012f08:	4652      	mov	r2, sl
 8012f0a:	4631      	mov	r1, r6
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	47b8      	blx	r7
 8012f10:	3001      	adds	r0, #1
 8012f12:	f43f aeac 	beq.w	8012c6e <_printf_float+0xb6>
 8012f16:	f108 0801 	add.w	r8, r8, #1
 8012f1a:	e7ec      	b.n	8012ef6 <_printf_float+0x33e>
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	4631      	mov	r1, r6
 8012f20:	4642      	mov	r2, r8
 8012f22:	4628      	mov	r0, r5
 8012f24:	47b8      	blx	r7
 8012f26:	3001      	adds	r0, #1
 8012f28:	d1c0      	bne.n	8012eac <_printf_float+0x2f4>
 8012f2a:	e6a0      	b.n	8012c6e <_printf_float+0xb6>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	4631      	mov	r1, r6
 8012f30:	4628      	mov	r0, r5
 8012f32:	920b      	str	r2, [sp, #44]	; 0x2c
 8012f34:	47b8      	blx	r7
 8012f36:	3001      	adds	r0, #1
 8012f38:	f43f ae99 	beq.w	8012c6e <_printf_float+0xb6>
 8012f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f3e:	f10b 0b01 	add.w	fp, fp, #1
 8012f42:	e7b9      	b.n	8012eb8 <_printf_float+0x300>
 8012f44:	4631      	mov	r1, r6
 8012f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	47b8      	blx	r7
 8012f4e:	3001      	adds	r0, #1
 8012f50:	d1bf      	bne.n	8012ed2 <_printf_float+0x31a>
 8012f52:	e68c      	b.n	8012c6e <_printf_float+0xb6>
 8012f54:	464b      	mov	r3, r9
 8012f56:	4631      	mov	r1, r6
 8012f58:	4628      	mov	r0, r5
 8012f5a:	eb08 020a 	add.w	r2, r8, sl
 8012f5e:	47b8      	blx	r7
 8012f60:	3001      	adds	r0, #1
 8012f62:	d1c2      	bne.n	8012eea <_printf_float+0x332>
 8012f64:	e683      	b.n	8012c6e <_printf_float+0xb6>
 8012f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f68:	2a01      	cmp	r2, #1
 8012f6a:	dc01      	bgt.n	8012f70 <_printf_float+0x3b8>
 8012f6c:	07db      	lsls	r3, r3, #31
 8012f6e:	d537      	bpl.n	8012fe0 <_printf_float+0x428>
 8012f70:	2301      	movs	r3, #1
 8012f72:	4642      	mov	r2, r8
 8012f74:	4631      	mov	r1, r6
 8012f76:	4628      	mov	r0, r5
 8012f78:	47b8      	blx	r7
 8012f7a:	3001      	adds	r0, #1
 8012f7c:	f43f ae77 	beq.w	8012c6e <_printf_float+0xb6>
 8012f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f84:	4631      	mov	r1, r6
 8012f86:	4628      	mov	r0, r5
 8012f88:	47b8      	blx	r7
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	f43f ae6f 	beq.w	8012c6e <_printf_float+0xb6>
 8012f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f94:	2200      	movs	r2, #0
 8012f96:	2300      	movs	r3, #0
 8012f98:	f7ed fd72 	bl	8000a80 <__aeabi_dcmpeq>
 8012f9c:	b9d8      	cbnz	r0, 8012fd6 <_printf_float+0x41e>
 8012f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fa0:	f108 0201 	add.w	r2, r8, #1
 8012fa4:	3b01      	subs	r3, #1
 8012fa6:	4631      	mov	r1, r6
 8012fa8:	4628      	mov	r0, r5
 8012faa:	47b8      	blx	r7
 8012fac:	3001      	adds	r0, #1
 8012fae:	d10e      	bne.n	8012fce <_printf_float+0x416>
 8012fb0:	e65d      	b.n	8012c6e <_printf_float+0xb6>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	464a      	mov	r2, r9
 8012fb6:	4631      	mov	r1, r6
 8012fb8:	4628      	mov	r0, r5
 8012fba:	47b8      	blx	r7
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	f43f ae56 	beq.w	8012c6e <_printf_float+0xb6>
 8012fc2:	f108 0801 	add.w	r8, r8, #1
 8012fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fc8:	3b01      	subs	r3, #1
 8012fca:	4543      	cmp	r3, r8
 8012fcc:	dcf1      	bgt.n	8012fb2 <_printf_float+0x3fa>
 8012fce:	4653      	mov	r3, sl
 8012fd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012fd4:	e6e0      	b.n	8012d98 <_printf_float+0x1e0>
 8012fd6:	f04f 0800 	mov.w	r8, #0
 8012fda:	f104 091a 	add.w	r9, r4, #26
 8012fde:	e7f2      	b.n	8012fc6 <_printf_float+0x40e>
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	4642      	mov	r2, r8
 8012fe4:	e7df      	b.n	8012fa6 <_printf_float+0x3ee>
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	464a      	mov	r2, r9
 8012fea:	4631      	mov	r1, r6
 8012fec:	4628      	mov	r0, r5
 8012fee:	47b8      	blx	r7
 8012ff0:	3001      	adds	r0, #1
 8012ff2:	f43f ae3c 	beq.w	8012c6e <_printf_float+0xb6>
 8012ff6:	f108 0801 	add.w	r8, r8, #1
 8012ffa:	68e3      	ldr	r3, [r4, #12]
 8012ffc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012ffe:	1a5b      	subs	r3, r3, r1
 8013000:	4543      	cmp	r3, r8
 8013002:	dcf0      	bgt.n	8012fe6 <_printf_float+0x42e>
 8013004:	e6fd      	b.n	8012e02 <_printf_float+0x24a>
 8013006:	f04f 0800 	mov.w	r8, #0
 801300a:	f104 0919 	add.w	r9, r4, #25
 801300e:	e7f4      	b.n	8012ffa <_printf_float+0x442>

08013010 <_printf_common>:
 8013010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013014:	4616      	mov	r6, r2
 8013016:	4699      	mov	r9, r3
 8013018:	688a      	ldr	r2, [r1, #8]
 801301a:	690b      	ldr	r3, [r1, #16]
 801301c:	4607      	mov	r7, r0
 801301e:	4293      	cmp	r3, r2
 8013020:	bfb8      	it	lt
 8013022:	4613      	movlt	r3, r2
 8013024:	6033      	str	r3, [r6, #0]
 8013026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801302a:	460c      	mov	r4, r1
 801302c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013030:	b10a      	cbz	r2, 8013036 <_printf_common+0x26>
 8013032:	3301      	adds	r3, #1
 8013034:	6033      	str	r3, [r6, #0]
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	0699      	lsls	r1, r3, #26
 801303a:	bf42      	ittt	mi
 801303c:	6833      	ldrmi	r3, [r6, #0]
 801303e:	3302      	addmi	r3, #2
 8013040:	6033      	strmi	r3, [r6, #0]
 8013042:	6825      	ldr	r5, [r4, #0]
 8013044:	f015 0506 	ands.w	r5, r5, #6
 8013048:	d106      	bne.n	8013058 <_printf_common+0x48>
 801304a:	f104 0a19 	add.w	sl, r4, #25
 801304e:	68e3      	ldr	r3, [r4, #12]
 8013050:	6832      	ldr	r2, [r6, #0]
 8013052:	1a9b      	subs	r3, r3, r2
 8013054:	42ab      	cmp	r3, r5
 8013056:	dc28      	bgt.n	80130aa <_printf_common+0x9a>
 8013058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801305c:	1e13      	subs	r3, r2, #0
 801305e:	6822      	ldr	r2, [r4, #0]
 8013060:	bf18      	it	ne
 8013062:	2301      	movne	r3, #1
 8013064:	0692      	lsls	r2, r2, #26
 8013066:	d42d      	bmi.n	80130c4 <_printf_common+0xb4>
 8013068:	4649      	mov	r1, r9
 801306a:	4638      	mov	r0, r7
 801306c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013070:	47c0      	blx	r8
 8013072:	3001      	adds	r0, #1
 8013074:	d020      	beq.n	80130b8 <_printf_common+0xa8>
 8013076:	6823      	ldr	r3, [r4, #0]
 8013078:	68e5      	ldr	r5, [r4, #12]
 801307a:	f003 0306 	and.w	r3, r3, #6
 801307e:	2b04      	cmp	r3, #4
 8013080:	bf18      	it	ne
 8013082:	2500      	movne	r5, #0
 8013084:	6832      	ldr	r2, [r6, #0]
 8013086:	f04f 0600 	mov.w	r6, #0
 801308a:	68a3      	ldr	r3, [r4, #8]
 801308c:	bf08      	it	eq
 801308e:	1aad      	subeq	r5, r5, r2
 8013090:	6922      	ldr	r2, [r4, #16]
 8013092:	bf08      	it	eq
 8013094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013098:	4293      	cmp	r3, r2
 801309a:	bfc4      	itt	gt
 801309c:	1a9b      	subgt	r3, r3, r2
 801309e:	18ed      	addgt	r5, r5, r3
 80130a0:	341a      	adds	r4, #26
 80130a2:	42b5      	cmp	r5, r6
 80130a4:	d11a      	bne.n	80130dc <_printf_common+0xcc>
 80130a6:	2000      	movs	r0, #0
 80130a8:	e008      	b.n	80130bc <_printf_common+0xac>
 80130aa:	2301      	movs	r3, #1
 80130ac:	4652      	mov	r2, sl
 80130ae:	4649      	mov	r1, r9
 80130b0:	4638      	mov	r0, r7
 80130b2:	47c0      	blx	r8
 80130b4:	3001      	adds	r0, #1
 80130b6:	d103      	bne.n	80130c0 <_printf_common+0xb0>
 80130b8:	f04f 30ff 	mov.w	r0, #4294967295
 80130bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130c0:	3501      	adds	r5, #1
 80130c2:	e7c4      	b.n	801304e <_printf_common+0x3e>
 80130c4:	2030      	movs	r0, #48	; 0x30
 80130c6:	18e1      	adds	r1, r4, r3
 80130c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80130cc:	1c5a      	adds	r2, r3, #1
 80130ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80130d2:	4422      	add	r2, r4
 80130d4:	3302      	adds	r3, #2
 80130d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80130da:	e7c5      	b.n	8013068 <_printf_common+0x58>
 80130dc:	2301      	movs	r3, #1
 80130de:	4622      	mov	r2, r4
 80130e0:	4649      	mov	r1, r9
 80130e2:	4638      	mov	r0, r7
 80130e4:	47c0      	blx	r8
 80130e6:	3001      	adds	r0, #1
 80130e8:	d0e6      	beq.n	80130b8 <_printf_common+0xa8>
 80130ea:	3601      	adds	r6, #1
 80130ec:	e7d9      	b.n	80130a2 <_printf_common+0x92>
	...

080130f0 <_printf_i>:
 80130f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130f4:	7e0f      	ldrb	r7, [r1, #24]
 80130f6:	4691      	mov	r9, r2
 80130f8:	2f78      	cmp	r7, #120	; 0x78
 80130fa:	4680      	mov	r8, r0
 80130fc:	460c      	mov	r4, r1
 80130fe:	469a      	mov	sl, r3
 8013100:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013106:	d807      	bhi.n	8013118 <_printf_i+0x28>
 8013108:	2f62      	cmp	r7, #98	; 0x62
 801310a:	d80a      	bhi.n	8013122 <_printf_i+0x32>
 801310c:	2f00      	cmp	r7, #0
 801310e:	f000 80d9 	beq.w	80132c4 <_printf_i+0x1d4>
 8013112:	2f58      	cmp	r7, #88	; 0x58
 8013114:	f000 80a4 	beq.w	8013260 <_printf_i+0x170>
 8013118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801311c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013120:	e03a      	b.n	8013198 <_printf_i+0xa8>
 8013122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013126:	2b15      	cmp	r3, #21
 8013128:	d8f6      	bhi.n	8013118 <_printf_i+0x28>
 801312a:	a101      	add	r1, pc, #4	; (adr r1, 8013130 <_printf_i+0x40>)
 801312c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013130:	08013189 	.word	0x08013189
 8013134:	0801319d 	.word	0x0801319d
 8013138:	08013119 	.word	0x08013119
 801313c:	08013119 	.word	0x08013119
 8013140:	08013119 	.word	0x08013119
 8013144:	08013119 	.word	0x08013119
 8013148:	0801319d 	.word	0x0801319d
 801314c:	08013119 	.word	0x08013119
 8013150:	08013119 	.word	0x08013119
 8013154:	08013119 	.word	0x08013119
 8013158:	08013119 	.word	0x08013119
 801315c:	080132ab 	.word	0x080132ab
 8013160:	080131cd 	.word	0x080131cd
 8013164:	0801328d 	.word	0x0801328d
 8013168:	08013119 	.word	0x08013119
 801316c:	08013119 	.word	0x08013119
 8013170:	080132cd 	.word	0x080132cd
 8013174:	08013119 	.word	0x08013119
 8013178:	080131cd 	.word	0x080131cd
 801317c:	08013119 	.word	0x08013119
 8013180:	08013119 	.word	0x08013119
 8013184:	08013295 	.word	0x08013295
 8013188:	682b      	ldr	r3, [r5, #0]
 801318a:	1d1a      	adds	r2, r3, #4
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	602a      	str	r2, [r5, #0]
 8013190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013198:	2301      	movs	r3, #1
 801319a:	e0a4      	b.n	80132e6 <_printf_i+0x1f6>
 801319c:	6820      	ldr	r0, [r4, #0]
 801319e:	6829      	ldr	r1, [r5, #0]
 80131a0:	0606      	lsls	r6, r0, #24
 80131a2:	f101 0304 	add.w	r3, r1, #4
 80131a6:	d50a      	bpl.n	80131be <_printf_i+0xce>
 80131a8:	680e      	ldr	r6, [r1, #0]
 80131aa:	602b      	str	r3, [r5, #0]
 80131ac:	2e00      	cmp	r6, #0
 80131ae:	da03      	bge.n	80131b8 <_printf_i+0xc8>
 80131b0:	232d      	movs	r3, #45	; 0x2d
 80131b2:	4276      	negs	r6, r6
 80131b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131b8:	230a      	movs	r3, #10
 80131ba:	485e      	ldr	r0, [pc, #376]	; (8013334 <_printf_i+0x244>)
 80131bc:	e019      	b.n	80131f2 <_printf_i+0x102>
 80131be:	680e      	ldr	r6, [r1, #0]
 80131c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80131c4:	602b      	str	r3, [r5, #0]
 80131c6:	bf18      	it	ne
 80131c8:	b236      	sxthne	r6, r6
 80131ca:	e7ef      	b.n	80131ac <_printf_i+0xbc>
 80131cc:	682b      	ldr	r3, [r5, #0]
 80131ce:	6820      	ldr	r0, [r4, #0]
 80131d0:	1d19      	adds	r1, r3, #4
 80131d2:	6029      	str	r1, [r5, #0]
 80131d4:	0601      	lsls	r1, r0, #24
 80131d6:	d501      	bpl.n	80131dc <_printf_i+0xec>
 80131d8:	681e      	ldr	r6, [r3, #0]
 80131da:	e002      	b.n	80131e2 <_printf_i+0xf2>
 80131dc:	0646      	lsls	r6, r0, #25
 80131de:	d5fb      	bpl.n	80131d8 <_printf_i+0xe8>
 80131e0:	881e      	ldrh	r6, [r3, #0]
 80131e2:	2f6f      	cmp	r7, #111	; 0x6f
 80131e4:	bf0c      	ite	eq
 80131e6:	2308      	moveq	r3, #8
 80131e8:	230a      	movne	r3, #10
 80131ea:	4852      	ldr	r0, [pc, #328]	; (8013334 <_printf_i+0x244>)
 80131ec:	2100      	movs	r1, #0
 80131ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80131f2:	6865      	ldr	r5, [r4, #4]
 80131f4:	2d00      	cmp	r5, #0
 80131f6:	bfa8      	it	ge
 80131f8:	6821      	ldrge	r1, [r4, #0]
 80131fa:	60a5      	str	r5, [r4, #8]
 80131fc:	bfa4      	itt	ge
 80131fe:	f021 0104 	bicge.w	r1, r1, #4
 8013202:	6021      	strge	r1, [r4, #0]
 8013204:	b90e      	cbnz	r6, 801320a <_printf_i+0x11a>
 8013206:	2d00      	cmp	r5, #0
 8013208:	d04d      	beq.n	80132a6 <_printf_i+0x1b6>
 801320a:	4615      	mov	r5, r2
 801320c:	fbb6 f1f3 	udiv	r1, r6, r3
 8013210:	fb03 6711 	mls	r7, r3, r1, r6
 8013214:	5dc7      	ldrb	r7, [r0, r7]
 8013216:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801321a:	4637      	mov	r7, r6
 801321c:	42bb      	cmp	r3, r7
 801321e:	460e      	mov	r6, r1
 8013220:	d9f4      	bls.n	801320c <_printf_i+0x11c>
 8013222:	2b08      	cmp	r3, #8
 8013224:	d10b      	bne.n	801323e <_printf_i+0x14e>
 8013226:	6823      	ldr	r3, [r4, #0]
 8013228:	07de      	lsls	r6, r3, #31
 801322a:	d508      	bpl.n	801323e <_printf_i+0x14e>
 801322c:	6923      	ldr	r3, [r4, #16]
 801322e:	6861      	ldr	r1, [r4, #4]
 8013230:	4299      	cmp	r1, r3
 8013232:	bfde      	ittt	le
 8013234:	2330      	movle	r3, #48	; 0x30
 8013236:	f805 3c01 	strble.w	r3, [r5, #-1]
 801323a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801323e:	1b52      	subs	r2, r2, r5
 8013240:	6122      	str	r2, [r4, #16]
 8013242:	464b      	mov	r3, r9
 8013244:	4621      	mov	r1, r4
 8013246:	4640      	mov	r0, r8
 8013248:	f8cd a000 	str.w	sl, [sp]
 801324c:	aa03      	add	r2, sp, #12
 801324e:	f7ff fedf 	bl	8013010 <_printf_common>
 8013252:	3001      	adds	r0, #1
 8013254:	d14c      	bne.n	80132f0 <_printf_i+0x200>
 8013256:	f04f 30ff 	mov.w	r0, #4294967295
 801325a:	b004      	add	sp, #16
 801325c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013260:	4834      	ldr	r0, [pc, #208]	; (8013334 <_printf_i+0x244>)
 8013262:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013266:	6829      	ldr	r1, [r5, #0]
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	f851 6b04 	ldr.w	r6, [r1], #4
 801326e:	6029      	str	r1, [r5, #0]
 8013270:	061d      	lsls	r5, r3, #24
 8013272:	d514      	bpl.n	801329e <_printf_i+0x1ae>
 8013274:	07df      	lsls	r7, r3, #31
 8013276:	bf44      	itt	mi
 8013278:	f043 0320 	orrmi.w	r3, r3, #32
 801327c:	6023      	strmi	r3, [r4, #0]
 801327e:	b91e      	cbnz	r6, 8013288 <_printf_i+0x198>
 8013280:	6823      	ldr	r3, [r4, #0]
 8013282:	f023 0320 	bic.w	r3, r3, #32
 8013286:	6023      	str	r3, [r4, #0]
 8013288:	2310      	movs	r3, #16
 801328a:	e7af      	b.n	80131ec <_printf_i+0xfc>
 801328c:	6823      	ldr	r3, [r4, #0]
 801328e:	f043 0320 	orr.w	r3, r3, #32
 8013292:	6023      	str	r3, [r4, #0]
 8013294:	2378      	movs	r3, #120	; 0x78
 8013296:	4828      	ldr	r0, [pc, #160]	; (8013338 <_printf_i+0x248>)
 8013298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801329c:	e7e3      	b.n	8013266 <_printf_i+0x176>
 801329e:	0659      	lsls	r1, r3, #25
 80132a0:	bf48      	it	mi
 80132a2:	b2b6      	uxthmi	r6, r6
 80132a4:	e7e6      	b.n	8013274 <_printf_i+0x184>
 80132a6:	4615      	mov	r5, r2
 80132a8:	e7bb      	b.n	8013222 <_printf_i+0x132>
 80132aa:	682b      	ldr	r3, [r5, #0]
 80132ac:	6826      	ldr	r6, [r4, #0]
 80132ae:	1d18      	adds	r0, r3, #4
 80132b0:	6961      	ldr	r1, [r4, #20]
 80132b2:	6028      	str	r0, [r5, #0]
 80132b4:	0635      	lsls	r5, r6, #24
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	d501      	bpl.n	80132be <_printf_i+0x1ce>
 80132ba:	6019      	str	r1, [r3, #0]
 80132bc:	e002      	b.n	80132c4 <_printf_i+0x1d4>
 80132be:	0670      	lsls	r0, r6, #25
 80132c0:	d5fb      	bpl.n	80132ba <_printf_i+0x1ca>
 80132c2:	8019      	strh	r1, [r3, #0]
 80132c4:	2300      	movs	r3, #0
 80132c6:	4615      	mov	r5, r2
 80132c8:	6123      	str	r3, [r4, #16]
 80132ca:	e7ba      	b.n	8013242 <_printf_i+0x152>
 80132cc:	682b      	ldr	r3, [r5, #0]
 80132ce:	2100      	movs	r1, #0
 80132d0:	1d1a      	adds	r2, r3, #4
 80132d2:	602a      	str	r2, [r5, #0]
 80132d4:	681d      	ldr	r5, [r3, #0]
 80132d6:	6862      	ldr	r2, [r4, #4]
 80132d8:	4628      	mov	r0, r5
 80132da:	f000 ffe9 	bl	80142b0 <memchr>
 80132de:	b108      	cbz	r0, 80132e4 <_printf_i+0x1f4>
 80132e0:	1b40      	subs	r0, r0, r5
 80132e2:	6060      	str	r0, [r4, #4]
 80132e4:	6863      	ldr	r3, [r4, #4]
 80132e6:	6123      	str	r3, [r4, #16]
 80132e8:	2300      	movs	r3, #0
 80132ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132ee:	e7a8      	b.n	8013242 <_printf_i+0x152>
 80132f0:	462a      	mov	r2, r5
 80132f2:	4649      	mov	r1, r9
 80132f4:	4640      	mov	r0, r8
 80132f6:	6923      	ldr	r3, [r4, #16]
 80132f8:	47d0      	blx	sl
 80132fa:	3001      	adds	r0, #1
 80132fc:	d0ab      	beq.n	8013256 <_printf_i+0x166>
 80132fe:	6823      	ldr	r3, [r4, #0]
 8013300:	079b      	lsls	r3, r3, #30
 8013302:	d413      	bmi.n	801332c <_printf_i+0x23c>
 8013304:	68e0      	ldr	r0, [r4, #12]
 8013306:	9b03      	ldr	r3, [sp, #12]
 8013308:	4298      	cmp	r0, r3
 801330a:	bfb8      	it	lt
 801330c:	4618      	movlt	r0, r3
 801330e:	e7a4      	b.n	801325a <_printf_i+0x16a>
 8013310:	2301      	movs	r3, #1
 8013312:	4632      	mov	r2, r6
 8013314:	4649      	mov	r1, r9
 8013316:	4640      	mov	r0, r8
 8013318:	47d0      	blx	sl
 801331a:	3001      	adds	r0, #1
 801331c:	d09b      	beq.n	8013256 <_printf_i+0x166>
 801331e:	3501      	adds	r5, #1
 8013320:	68e3      	ldr	r3, [r4, #12]
 8013322:	9903      	ldr	r1, [sp, #12]
 8013324:	1a5b      	subs	r3, r3, r1
 8013326:	42ab      	cmp	r3, r5
 8013328:	dcf2      	bgt.n	8013310 <_printf_i+0x220>
 801332a:	e7eb      	b.n	8013304 <_printf_i+0x214>
 801332c:	2500      	movs	r5, #0
 801332e:	f104 0619 	add.w	r6, r4, #25
 8013332:	e7f5      	b.n	8013320 <_printf_i+0x230>
 8013334:	08015e9a 	.word	0x08015e9a
 8013338:	08015eab 	.word	0x08015eab

0801333c <siprintf>:
 801333c:	b40e      	push	{r1, r2, r3}
 801333e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013342:	b500      	push	{lr}
 8013344:	b09c      	sub	sp, #112	; 0x70
 8013346:	ab1d      	add	r3, sp, #116	; 0x74
 8013348:	9002      	str	r0, [sp, #8]
 801334a:	9006      	str	r0, [sp, #24]
 801334c:	9107      	str	r1, [sp, #28]
 801334e:	9104      	str	r1, [sp, #16]
 8013350:	4808      	ldr	r0, [pc, #32]	; (8013374 <siprintf+0x38>)
 8013352:	4909      	ldr	r1, [pc, #36]	; (8013378 <siprintf+0x3c>)
 8013354:	f853 2b04 	ldr.w	r2, [r3], #4
 8013358:	9105      	str	r1, [sp, #20]
 801335a:	6800      	ldr	r0, [r0, #0]
 801335c:	a902      	add	r1, sp, #8
 801335e:	9301      	str	r3, [sp, #4]
 8013360:	f001 fc90 	bl	8014c84 <_svfiprintf_r>
 8013364:	2200      	movs	r2, #0
 8013366:	9b02      	ldr	r3, [sp, #8]
 8013368:	701a      	strb	r2, [r3, #0]
 801336a:	b01c      	add	sp, #112	; 0x70
 801336c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013370:	b003      	add	sp, #12
 8013372:	4770      	bx	lr
 8013374:	20000810 	.word	0x20000810
 8013378:	ffff0208 	.word	0xffff0208

0801337c <strtok>:
 801337c:	4b16      	ldr	r3, [pc, #88]	; (80133d8 <strtok+0x5c>)
 801337e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013382:	681f      	ldr	r7, [r3, #0]
 8013384:	4605      	mov	r5, r0
 8013386:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8013388:	460e      	mov	r6, r1
 801338a:	b9ec      	cbnz	r4, 80133c8 <strtok+0x4c>
 801338c:	2050      	movs	r0, #80	; 0x50
 801338e:	f000 ff87 	bl	80142a0 <malloc>
 8013392:	4602      	mov	r2, r0
 8013394:	65b8      	str	r0, [r7, #88]	; 0x58
 8013396:	b920      	cbnz	r0, 80133a2 <strtok+0x26>
 8013398:	2157      	movs	r1, #87	; 0x57
 801339a:	4b10      	ldr	r3, [pc, #64]	; (80133dc <strtok+0x60>)
 801339c:	4810      	ldr	r0, [pc, #64]	; (80133e0 <strtok+0x64>)
 801339e:	f000 f8cf 	bl	8013540 <__assert_func>
 80133a2:	e9c0 4400 	strd	r4, r4, [r0]
 80133a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80133aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80133ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80133b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80133b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80133ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80133be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80133c2:	6184      	str	r4, [r0, #24]
 80133c4:	7704      	strb	r4, [r0, #28]
 80133c6:	6244      	str	r4, [r0, #36]	; 0x24
 80133c8:	4631      	mov	r1, r6
 80133ca:	4628      	mov	r0, r5
 80133cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80133ce:	2301      	movs	r3, #1
 80133d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133d4:	f000 b806 	b.w	80133e4 <__strtok_r>
 80133d8:	20000810 	.word	0x20000810
 80133dc:	08015ebc 	.word	0x08015ebc
 80133e0:	08015ed3 	.word	0x08015ed3

080133e4 <__strtok_r>:
 80133e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133e6:	b908      	cbnz	r0, 80133ec <__strtok_r+0x8>
 80133e8:	6810      	ldr	r0, [r2, #0]
 80133ea:	b188      	cbz	r0, 8013410 <__strtok_r+0x2c>
 80133ec:	4604      	mov	r4, r0
 80133ee:	460f      	mov	r7, r1
 80133f0:	4620      	mov	r0, r4
 80133f2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80133f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80133fa:	b91e      	cbnz	r6, 8013404 <__strtok_r+0x20>
 80133fc:	b965      	cbnz	r5, 8013418 <__strtok_r+0x34>
 80133fe:	4628      	mov	r0, r5
 8013400:	6015      	str	r5, [r2, #0]
 8013402:	e005      	b.n	8013410 <__strtok_r+0x2c>
 8013404:	42b5      	cmp	r5, r6
 8013406:	d1f6      	bne.n	80133f6 <__strtok_r+0x12>
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1f0      	bne.n	80133ee <__strtok_r+0xa>
 801340c:	6014      	str	r4, [r2, #0]
 801340e:	7003      	strb	r3, [r0, #0]
 8013410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013412:	461c      	mov	r4, r3
 8013414:	e00c      	b.n	8013430 <__strtok_r+0x4c>
 8013416:	b915      	cbnz	r5, 801341e <__strtok_r+0x3a>
 8013418:	460e      	mov	r6, r1
 801341a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801341e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013422:	42ab      	cmp	r3, r5
 8013424:	d1f7      	bne.n	8013416 <__strtok_r+0x32>
 8013426:	2b00      	cmp	r3, #0
 8013428:	d0f3      	beq.n	8013412 <__strtok_r+0x2e>
 801342a:	2300      	movs	r3, #0
 801342c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013430:	6014      	str	r4, [r2, #0]
 8013432:	e7ed      	b.n	8013410 <__strtok_r+0x2c>

08013434 <_strtol_l.constprop.0>:
 8013434:	2b01      	cmp	r3, #1
 8013436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801343a:	4680      	mov	r8, r0
 801343c:	d001      	beq.n	8013442 <_strtol_l.constprop.0+0xe>
 801343e:	2b24      	cmp	r3, #36	; 0x24
 8013440:	d906      	bls.n	8013450 <_strtol_l.constprop.0+0x1c>
 8013442:	f7ff fae9 	bl	8012a18 <__errno>
 8013446:	2316      	movs	r3, #22
 8013448:	6003      	str	r3, [r0, #0]
 801344a:	2000      	movs	r0, #0
 801344c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013450:	460d      	mov	r5, r1
 8013452:	4f35      	ldr	r7, [pc, #212]	; (8013528 <_strtol_l.constprop.0+0xf4>)
 8013454:	4628      	mov	r0, r5
 8013456:	f815 4b01 	ldrb.w	r4, [r5], #1
 801345a:	5de6      	ldrb	r6, [r4, r7]
 801345c:	f016 0608 	ands.w	r6, r6, #8
 8013460:	d1f8      	bne.n	8013454 <_strtol_l.constprop.0+0x20>
 8013462:	2c2d      	cmp	r4, #45	; 0x2d
 8013464:	d12f      	bne.n	80134c6 <_strtol_l.constprop.0+0x92>
 8013466:	2601      	movs	r6, #1
 8013468:	782c      	ldrb	r4, [r5, #0]
 801346a:	1c85      	adds	r5, r0, #2
 801346c:	2b00      	cmp	r3, #0
 801346e:	d057      	beq.n	8013520 <_strtol_l.constprop.0+0xec>
 8013470:	2b10      	cmp	r3, #16
 8013472:	d109      	bne.n	8013488 <_strtol_l.constprop.0+0x54>
 8013474:	2c30      	cmp	r4, #48	; 0x30
 8013476:	d107      	bne.n	8013488 <_strtol_l.constprop.0+0x54>
 8013478:	7828      	ldrb	r0, [r5, #0]
 801347a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801347e:	2858      	cmp	r0, #88	; 0x58
 8013480:	d149      	bne.n	8013516 <_strtol_l.constprop.0+0xe2>
 8013482:	2310      	movs	r3, #16
 8013484:	786c      	ldrb	r4, [r5, #1]
 8013486:	3502      	adds	r5, #2
 8013488:	2700      	movs	r7, #0
 801348a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 801348e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013492:	fbbe f9f3 	udiv	r9, lr, r3
 8013496:	4638      	mov	r0, r7
 8013498:	fb03 ea19 	mls	sl, r3, r9, lr
 801349c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80134a0:	f1bc 0f09 	cmp.w	ip, #9
 80134a4:	d814      	bhi.n	80134d0 <_strtol_l.constprop.0+0x9c>
 80134a6:	4664      	mov	r4, ip
 80134a8:	42a3      	cmp	r3, r4
 80134aa:	dd22      	ble.n	80134f2 <_strtol_l.constprop.0+0xbe>
 80134ac:	2f00      	cmp	r7, #0
 80134ae:	db1d      	blt.n	80134ec <_strtol_l.constprop.0+0xb8>
 80134b0:	4581      	cmp	r9, r0
 80134b2:	d31b      	bcc.n	80134ec <_strtol_l.constprop.0+0xb8>
 80134b4:	d101      	bne.n	80134ba <_strtol_l.constprop.0+0x86>
 80134b6:	45a2      	cmp	sl, r4
 80134b8:	db18      	blt.n	80134ec <_strtol_l.constprop.0+0xb8>
 80134ba:	2701      	movs	r7, #1
 80134bc:	fb00 4003 	mla	r0, r0, r3, r4
 80134c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134c4:	e7ea      	b.n	801349c <_strtol_l.constprop.0+0x68>
 80134c6:	2c2b      	cmp	r4, #43	; 0x2b
 80134c8:	bf04      	itt	eq
 80134ca:	782c      	ldrbeq	r4, [r5, #0]
 80134cc:	1c85      	addeq	r5, r0, #2
 80134ce:	e7cd      	b.n	801346c <_strtol_l.constprop.0+0x38>
 80134d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80134d4:	f1bc 0f19 	cmp.w	ip, #25
 80134d8:	d801      	bhi.n	80134de <_strtol_l.constprop.0+0xaa>
 80134da:	3c37      	subs	r4, #55	; 0x37
 80134dc:	e7e4      	b.n	80134a8 <_strtol_l.constprop.0+0x74>
 80134de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80134e2:	f1bc 0f19 	cmp.w	ip, #25
 80134e6:	d804      	bhi.n	80134f2 <_strtol_l.constprop.0+0xbe>
 80134e8:	3c57      	subs	r4, #87	; 0x57
 80134ea:	e7dd      	b.n	80134a8 <_strtol_l.constprop.0+0x74>
 80134ec:	f04f 37ff 	mov.w	r7, #4294967295
 80134f0:	e7e6      	b.n	80134c0 <_strtol_l.constprop.0+0x8c>
 80134f2:	2f00      	cmp	r7, #0
 80134f4:	da07      	bge.n	8013506 <_strtol_l.constprop.0+0xd2>
 80134f6:	2322      	movs	r3, #34	; 0x22
 80134f8:	4670      	mov	r0, lr
 80134fa:	f8c8 3000 	str.w	r3, [r8]
 80134fe:	2a00      	cmp	r2, #0
 8013500:	d0a4      	beq.n	801344c <_strtol_l.constprop.0+0x18>
 8013502:	1e69      	subs	r1, r5, #1
 8013504:	e005      	b.n	8013512 <_strtol_l.constprop.0+0xde>
 8013506:	b106      	cbz	r6, 801350a <_strtol_l.constprop.0+0xd6>
 8013508:	4240      	negs	r0, r0
 801350a:	2a00      	cmp	r2, #0
 801350c:	d09e      	beq.n	801344c <_strtol_l.constprop.0+0x18>
 801350e:	2f00      	cmp	r7, #0
 8013510:	d1f7      	bne.n	8013502 <_strtol_l.constprop.0+0xce>
 8013512:	6011      	str	r1, [r2, #0]
 8013514:	e79a      	b.n	801344c <_strtol_l.constprop.0+0x18>
 8013516:	2430      	movs	r4, #48	; 0x30
 8013518:	2b00      	cmp	r3, #0
 801351a:	d1b5      	bne.n	8013488 <_strtol_l.constprop.0+0x54>
 801351c:	2308      	movs	r3, #8
 801351e:	e7b3      	b.n	8013488 <_strtol_l.constprop.0+0x54>
 8013520:	2c30      	cmp	r4, #48	; 0x30
 8013522:	d0a9      	beq.n	8013478 <_strtol_l.constprop.0+0x44>
 8013524:	230a      	movs	r3, #10
 8013526:	e7af      	b.n	8013488 <_strtol_l.constprop.0+0x54>
 8013528:	08015f6d 	.word	0x08015f6d

0801352c <strtol>:
 801352c:	4613      	mov	r3, r2
 801352e:	460a      	mov	r2, r1
 8013530:	4601      	mov	r1, r0
 8013532:	4802      	ldr	r0, [pc, #8]	; (801353c <strtol+0x10>)
 8013534:	6800      	ldr	r0, [r0, #0]
 8013536:	f7ff bf7d 	b.w	8013434 <_strtol_l.constprop.0>
 801353a:	bf00      	nop
 801353c:	20000810 	.word	0x20000810

08013540 <__assert_func>:
 8013540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013542:	4614      	mov	r4, r2
 8013544:	461a      	mov	r2, r3
 8013546:	4b09      	ldr	r3, [pc, #36]	; (801356c <__assert_func+0x2c>)
 8013548:	4605      	mov	r5, r0
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	68d8      	ldr	r0, [r3, #12]
 801354e:	b14c      	cbz	r4, 8013564 <__assert_func+0x24>
 8013550:	4b07      	ldr	r3, [pc, #28]	; (8013570 <__assert_func+0x30>)
 8013552:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013556:	9100      	str	r1, [sp, #0]
 8013558:	462b      	mov	r3, r5
 801355a:	4906      	ldr	r1, [pc, #24]	; (8013574 <__assert_func+0x34>)
 801355c:	f000 fe8a 	bl	8014274 <fiprintf>
 8013560:	f001 feb8 	bl	80152d4 <abort>
 8013564:	4b04      	ldr	r3, [pc, #16]	; (8013578 <__assert_func+0x38>)
 8013566:	461c      	mov	r4, r3
 8013568:	e7f3      	b.n	8013552 <__assert_func+0x12>
 801356a:	bf00      	nop
 801356c:	20000810 	.word	0x20000810
 8013570:	08015f30 	.word	0x08015f30
 8013574:	08015f3d 	.word	0x08015f3d
 8013578:	08015f6b 	.word	0x08015f6b

0801357c <quorem>:
 801357c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013580:	6903      	ldr	r3, [r0, #16]
 8013582:	690c      	ldr	r4, [r1, #16]
 8013584:	4607      	mov	r7, r0
 8013586:	42a3      	cmp	r3, r4
 8013588:	f2c0 8082 	blt.w	8013690 <quorem+0x114>
 801358c:	3c01      	subs	r4, #1
 801358e:	f100 0514 	add.w	r5, r0, #20
 8013592:	f101 0814 	add.w	r8, r1, #20
 8013596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801359a:	9301      	str	r3, [sp, #4]
 801359c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80135a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135a4:	3301      	adds	r3, #1
 80135a6:	429a      	cmp	r2, r3
 80135a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80135ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80135b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80135b4:	d331      	bcc.n	801361a <quorem+0x9e>
 80135b6:	f04f 0e00 	mov.w	lr, #0
 80135ba:	4640      	mov	r0, r8
 80135bc:	46ac      	mov	ip, r5
 80135be:	46f2      	mov	sl, lr
 80135c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80135c4:	b293      	uxth	r3, r2
 80135c6:	fb06 e303 	mla	r3, r6, r3, lr
 80135ca:	0c12      	lsrs	r2, r2, #16
 80135cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	fb06 e202 	mla	r2, r6, r2, lr
 80135d6:	ebaa 0303 	sub.w	r3, sl, r3
 80135da:	f8dc a000 	ldr.w	sl, [ip]
 80135de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80135e2:	fa1f fa8a 	uxth.w	sl, sl
 80135e6:	4453      	add	r3, sl
 80135e8:	f8dc a000 	ldr.w	sl, [ip]
 80135ec:	b292      	uxth	r2, r2
 80135ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80135f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135fc:	4581      	cmp	r9, r0
 80135fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013602:	f84c 3b04 	str.w	r3, [ip], #4
 8013606:	d2db      	bcs.n	80135c0 <quorem+0x44>
 8013608:	f855 300b 	ldr.w	r3, [r5, fp]
 801360c:	b92b      	cbnz	r3, 801361a <quorem+0x9e>
 801360e:	9b01      	ldr	r3, [sp, #4]
 8013610:	3b04      	subs	r3, #4
 8013612:	429d      	cmp	r5, r3
 8013614:	461a      	mov	r2, r3
 8013616:	d32f      	bcc.n	8013678 <quorem+0xfc>
 8013618:	613c      	str	r4, [r7, #16]
 801361a:	4638      	mov	r0, r7
 801361c:	f001 f8e2 	bl	80147e4 <__mcmp>
 8013620:	2800      	cmp	r0, #0
 8013622:	db25      	blt.n	8013670 <quorem+0xf4>
 8013624:	4628      	mov	r0, r5
 8013626:	f04f 0c00 	mov.w	ip, #0
 801362a:	3601      	adds	r6, #1
 801362c:	f858 1b04 	ldr.w	r1, [r8], #4
 8013630:	f8d0 e000 	ldr.w	lr, [r0]
 8013634:	b28b      	uxth	r3, r1
 8013636:	ebac 0303 	sub.w	r3, ip, r3
 801363a:	fa1f f28e 	uxth.w	r2, lr
 801363e:	4413      	add	r3, r2
 8013640:	0c0a      	lsrs	r2, r1, #16
 8013642:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013646:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801364a:	b29b      	uxth	r3, r3
 801364c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013650:	45c1      	cmp	r9, r8
 8013652:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013656:	f840 3b04 	str.w	r3, [r0], #4
 801365a:	d2e7      	bcs.n	801362c <quorem+0xb0>
 801365c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013664:	b922      	cbnz	r2, 8013670 <quorem+0xf4>
 8013666:	3b04      	subs	r3, #4
 8013668:	429d      	cmp	r5, r3
 801366a:	461a      	mov	r2, r3
 801366c:	d30a      	bcc.n	8013684 <quorem+0x108>
 801366e:	613c      	str	r4, [r7, #16]
 8013670:	4630      	mov	r0, r6
 8013672:	b003      	add	sp, #12
 8013674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013678:	6812      	ldr	r2, [r2, #0]
 801367a:	3b04      	subs	r3, #4
 801367c:	2a00      	cmp	r2, #0
 801367e:	d1cb      	bne.n	8013618 <quorem+0x9c>
 8013680:	3c01      	subs	r4, #1
 8013682:	e7c6      	b.n	8013612 <quorem+0x96>
 8013684:	6812      	ldr	r2, [r2, #0]
 8013686:	3b04      	subs	r3, #4
 8013688:	2a00      	cmp	r2, #0
 801368a:	d1f0      	bne.n	801366e <quorem+0xf2>
 801368c:	3c01      	subs	r4, #1
 801368e:	e7eb      	b.n	8013668 <quorem+0xec>
 8013690:	2000      	movs	r0, #0
 8013692:	e7ee      	b.n	8013672 <quorem+0xf6>
 8013694:	0000      	movs	r0, r0
	...

08013698 <_dtoa_r>:
 8013698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801369c:	4616      	mov	r6, r2
 801369e:	461f      	mov	r7, r3
 80136a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80136a2:	b099      	sub	sp, #100	; 0x64
 80136a4:	4605      	mov	r5, r0
 80136a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80136aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80136ae:	b974      	cbnz	r4, 80136ce <_dtoa_r+0x36>
 80136b0:	2010      	movs	r0, #16
 80136b2:	f000 fdf5 	bl	80142a0 <malloc>
 80136b6:	4602      	mov	r2, r0
 80136b8:	6268      	str	r0, [r5, #36]	; 0x24
 80136ba:	b920      	cbnz	r0, 80136c6 <_dtoa_r+0x2e>
 80136bc:	21ea      	movs	r1, #234	; 0xea
 80136be:	4ba8      	ldr	r3, [pc, #672]	; (8013960 <_dtoa_r+0x2c8>)
 80136c0:	48a8      	ldr	r0, [pc, #672]	; (8013964 <_dtoa_r+0x2cc>)
 80136c2:	f7ff ff3d 	bl	8013540 <__assert_func>
 80136c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136ca:	6004      	str	r4, [r0, #0]
 80136cc:	60c4      	str	r4, [r0, #12]
 80136ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80136d0:	6819      	ldr	r1, [r3, #0]
 80136d2:	b151      	cbz	r1, 80136ea <_dtoa_r+0x52>
 80136d4:	685a      	ldr	r2, [r3, #4]
 80136d6:	2301      	movs	r3, #1
 80136d8:	4093      	lsls	r3, r2
 80136da:	604a      	str	r2, [r1, #4]
 80136dc:	608b      	str	r3, [r1, #8]
 80136de:	4628      	mov	r0, r5
 80136e0:	f000 fe42 	bl	8014368 <_Bfree>
 80136e4:	2200      	movs	r2, #0
 80136e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80136e8:	601a      	str	r2, [r3, #0]
 80136ea:	1e3b      	subs	r3, r7, #0
 80136ec:	bfaf      	iteee	ge
 80136ee:	2300      	movge	r3, #0
 80136f0:	2201      	movlt	r2, #1
 80136f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80136f6:	9305      	strlt	r3, [sp, #20]
 80136f8:	bfa8      	it	ge
 80136fa:	f8c8 3000 	strge.w	r3, [r8]
 80136fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013702:	4b99      	ldr	r3, [pc, #612]	; (8013968 <_dtoa_r+0x2d0>)
 8013704:	bfb8      	it	lt
 8013706:	f8c8 2000 	strlt.w	r2, [r8]
 801370a:	ea33 0309 	bics.w	r3, r3, r9
 801370e:	d119      	bne.n	8013744 <_dtoa_r+0xac>
 8013710:	f242 730f 	movw	r3, #9999	; 0x270f
 8013714:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013716:	6013      	str	r3, [r2, #0]
 8013718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801371c:	4333      	orrs	r3, r6
 801371e:	f000 857f 	beq.w	8014220 <_dtoa_r+0xb88>
 8013722:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013724:	b953      	cbnz	r3, 801373c <_dtoa_r+0xa4>
 8013726:	4b91      	ldr	r3, [pc, #580]	; (801396c <_dtoa_r+0x2d4>)
 8013728:	e022      	b.n	8013770 <_dtoa_r+0xd8>
 801372a:	4b91      	ldr	r3, [pc, #580]	; (8013970 <_dtoa_r+0x2d8>)
 801372c:	9303      	str	r3, [sp, #12]
 801372e:	3308      	adds	r3, #8
 8013730:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013732:	6013      	str	r3, [r2, #0]
 8013734:	9803      	ldr	r0, [sp, #12]
 8013736:	b019      	add	sp, #100	; 0x64
 8013738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801373c:	4b8b      	ldr	r3, [pc, #556]	; (801396c <_dtoa_r+0x2d4>)
 801373e:	9303      	str	r3, [sp, #12]
 8013740:	3303      	adds	r3, #3
 8013742:	e7f5      	b.n	8013730 <_dtoa_r+0x98>
 8013744:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013748:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801374c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013750:	2200      	movs	r2, #0
 8013752:	2300      	movs	r3, #0
 8013754:	f7ed f994 	bl	8000a80 <__aeabi_dcmpeq>
 8013758:	4680      	mov	r8, r0
 801375a:	b158      	cbz	r0, 8013774 <_dtoa_r+0xdc>
 801375c:	2301      	movs	r3, #1
 801375e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013760:	6013      	str	r3, [r2, #0]
 8013762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013764:	2b00      	cmp	r3, #0
 8013766:	f000 8558 	beq.w	801421a <_dtoa_r+0xb82>
 801376a:	4882      	ldr	r0, [pc, #520]	; (8013974 <_dtoa_r+0x2dc>)
 801376c:	6018      	str	r0, [r3, #0]
 801376e:	1e43      	subs	r3, r0, #1
 8013770:	9303      	str	r3, [sp, #12]
 8013772:	e7df      	b.n	8013734 <_dtoa_r+0x9c>
 8013774:	ab16      	add	r3, sp, #88	; 0x58
 8013776:	9301      	str	r3, [sp, #4]
 8013778:	ab17      	add	r3, sp, #92	; 0x5c
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4628      	mov	r0, r5
 801377e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013782:	f001 f8d7 	bl	8014934 <__d2b>
 8013786:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801378a:	4683      	mov	fp, r0
 801378c:	2c00      	cmp	r4, #0
 801378e:	d07f      	beq.n	8013890 <_dtoa_r+0x1f8>
 8013790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013796:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801379a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801379e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80137a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80137a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80137aa:	2200      	movs	r2, #0
 80137ac:	4b72      	ldr	r3, [pc, #456]	; (8013978 <_dtoa_r+0x2e0>)
 80137ae:	f7ec fd47 	bl	8000240 <__aeabi_dsub>
 80137b2:	a365      	add	r3, pc, #404	; (adr r3, 8013948 <_dtoa_r+0x2b0>)
 80137b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b8:	f7ec fefa 	bl	80005b0 <__aeabi_dmul>
 80137bc:	a364      	add	r3, pc, #400	; (adr r3, 8013950 <_dtoa_r+0x2b8>)
 80137be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c2:	f7ec fd3f 	bl	8000244 <__adddf3>
 80137c6:	4606      	mov	r6, r0
 80137c8:	4620      	mov	r0, r4
 80137ca:	460f      	mov	r7, r1
 80137cc:	f7ec fe86 	bl	80004dc <__aeabi_i2d>
 80137d0:	a361      	add	r3, pc, #388	; (adr r3, 8013958 <_dtoa_r+0x2c0>)
 80137d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d6:	f7ec feeb 	bl	80005b0 <__aeabi_dmul>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	4630      	mov	r0, r6
 80137e0:	4639      	mov	r1, r7
 80137e2:	f7ec fd2f 	bl	8000244 <__adddf3>
 80137e6:	4606      	mov	r6, r0
 80137e8:	460f      	mov	r7, r1
 80137ea:	f7ed f991 	bl	8000b10 <__aeabi_d2iz>
 80137ee:	2200      	movs	r2, #0
 80137f0:	4682      	mov	sl, r0
 80137f2:	2300      	movs	r3, #0
 80137f4:	4630      	mov	r0, r6
 80137f6:	4639      	mov	r1, r7
 80137f8:	f7ed f94c 	bl	8000a94 <__aeabi_dcmplt>
 80137fc:	b148      	cbz	r0, 8013812 <_dtoa_r+0x17a>
 80137fe:	4650      	mov	r0, sl
 8013800:	f7ec fe6c 	bl	80004dc <__aeabi_i2d>
 8013804:	4632      	mov	r2, r6
 8013806:	463b      	mov	r3, r7
 8013808:	f7ed f93a 	bl	8000a80 <__aeabi_dcmpeq>
 801380c:	b908      	cbnz	r0, 8013812 <_dtoa_r+0x17a>
 801380e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013812:	f1ba 0f16 	cmp.w	sl, #22
 8013816:	d858      	bhi.n	80138ca <_dtoa_r+0x232>
 8013818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801381c:	4b57      	ldr	r3, [pc, #348]	; (801397c <_dtoa_r+0x2e4>)
 801381e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013826:	f7ed f935 	bl	8000a94 <__aeabi_dcmplt>
 801382a:	2800      	cmp	r0, #0
 801382c:	d04f      	beq.n	80138ce <_dtoa_r+0x236>
 801382e:	2300      	movs	r3, #0
 8013830:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013834:	930f      	str	r3, [sp, #60]	; 0x3c
 8013836:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013838:	1b1c      	subs	r4, r3, r4
 801383a:	1e63      	subs	r3, r4, #1
 801383c:	9309      	str	r3, [sp, #36]	; 0x24
 801383e:	bf49      	itett	mi
 8013840:	f1c4 0301 	rsbmi	r3, r4, #1
 8013844:	2300      	movpl	r3, #0
 8013846:	9306      	strmi	r3, [sp, #24]
 8013848:	2300      	movmi	r3, #0
 801384a:	bf54      	ite	pl
 801384c:	9306      	strpl	r3, [sp, #24]
 801384e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013850:	f1ba 0f00 	cmp.w	sl, #0
 8013854:	db3d      	blt.n	80138d2 <_dtoa_r+0x23a>
 8013856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013858:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801385c:	4453      	add	r3, sl
 801385e:	9309      	str	r3, [sp, #36]	; 0x24
 8013860:	2300      	movs	r3, #0
 8013862:	930a      	str	r3, [sp, #40]	; 0x28
 8013864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013866:	2b09      	cmp	r3, #9
 8013868:	f200 808c 	bhi.w	8013984 <_dtoa_r+0x2ec>
 801386c:	2b05      	cmp	r3, #5
 801386e:	bfc4      	itt	gt
 8013870:	3b04      	subgt	r3, #4
 8013872:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013876:	bfc8      	it	gt
 8013878:	2400      	movgt	r4, #0
 801387a:	f1a3 0302 	sub.w	r3, r3, #2
 801387e:	bfd8      	it	le
 8013880:	2401      	movle	r4, #1
 8013882:	2b03      	cmp	r3, #3
 8013884:	f200 808a 	bhi.w	801399c <_dtoa_r+0x304>
 8013888:	e8df f003 	tbb	[pc, r3]
 801388c:	5b4d4f2d 	.word	0x5b4d4f2d
 8013890:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013894:	441c      	add	r4, r3
 8013896:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801389a:	2b20      	cmp	r3, #32
 801389c:	bfc3      	ittte	gt
 801389e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80138a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80138a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80138aa:	f1c3 0320 	rsble	r3, r3, #32
 80138ae:	bfc6      	itte	gt
 80138b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80138b4:	4318      	orrgt	r0, r3
 80138b6:	fa06 f003 	lslle.w	r0, r6, r3
 80138ba:	f7ec fdff 	bl	80004bc <__aeabi_ui2d>
 80138be:	2301      	movs	r3, #1
 80138c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80138c4:	3c01      	subs	r4, #1
 80138c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80138c8:	e76f      	b.n	80137aa <_dtoa_r+0x112>
 80138ca:	2301      	movs	r3, #1
 80138cc:	e7b2      	b.n	8013834 <_dtoa_r+0x19c>
 80138ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80138d0:	e7b1      	b.n	8013836 <_dtoa_r+0x19e>
 80138d2:	9b06      	ldr	r3, [sp, #24]
 80138d4:	eba3 030a 	sub.w	r3, r3, sl
 80138d8:	9306      	str	r3, [sp, #24]
 80138da:	f1ca 0300 	rsb	r3, sl, #0
 80138de:	930a      	str	r3, [sp, #40]	; 0x28
 80138e0:	2300      	movs	r3, #0
 80138e2:	930e      	str	r3, [sp, #56]	; 0x38
 80138e4:	e7be      	b.n	8013864 <_dtoa_r+0x1cc>
 80138e6:	2300      	movs	r3, #0
 80138e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80138ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	dc58      	bgt.n	80139a2 <_dtoa_r+0x30a>
 80138f0:	f04f 0901 	mov.w	r9, #1
 80138f4:	464b      	mov	r3, r9
 80138f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80138fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80138fe:	2200      	movs	r2, #0
 8013900:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013902:	6042      	str	r2, [r0, #4]
 8013904:	2204      	movs	r2, #4
 8013906:	f102 0614 	add.w	r6, r2, #20
 801390a:	429e      	cmp	r6, r3
 801390c:	6841      	ldr	r1, [r0, #4]
 801390e:	d94e      	bls.n	80139ae <_dtoa_r+0x316>
 8013910:	4628      	mov	r0, r5
 8013912:	f000 fce9 	bl	80142e8 <_Balloc>
 8013916:	9003      	str	r0, [sp, #12]
 8013918:	2800      	cmp	r0, #0
 801391a:	d14c      	bne.n	80139b6 <_dtoa_r+0x31e>
 801391c:	4602      	mov	r2, r0
 801391e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013922:	4b17      	ldr	r3, [pc, #92]	; (8013980 <_dtoa_r+0x2e8>)
 8013924:	e6cc      	b.n	80136c0 <_dtoa_r+0x28>
 8013926:	2301      	movs	r3, #1
 8013928:	e7de      	b.n	80138e8 <_dtoa_r+0x250>
 801392a:	2300      	movs	r3, #0
 801392c:	930b      	str	r3, [sp, #44]	; 0x2c
 801392e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013930:	eb0a 0903 	add.w	r9, sl, r3
 8013934:	f109 0301 	add.w	r3, r9, #1
 8013938:	2b01      	cmp	r3, #1
 801393a:	9308      	str	r3, [sp, #32]
 801393c:	bfb8      	it	lt
 801393e:	2301      	movlt	r3, #1
 8013940:	e7dd      	b.n	80138fe <_dtoa_r+0x266>
 8013942:	2301      	movs	r3, #1
 8013944:	e7f2      	b.n	801392c <_dtoa_r+0x294>
 8013946:	bf00      	nop
 8013948:	636f4361 	.word	0x636f4361
 801394c:	3fd287a7 	.word	0x3fd287a7
 8013950:	8b60c8b3 	.word	0x8b60c8b3
 8013954:	3fc68a28 	.word	0x3fc68a28
 8013958:	509f79fb 	.word	0x509f79fb
 801395c:	3fd34413 	.word	0x3fd34413
 8013960:	08015ebc 	.word	0x08015ebc
 8013964:	0801607a 	.word	0x0801607a
 8013968:	7ff00000 	.word	0x7ff00000
 801396c:	08016076 	.word	0x08016076
 8013970:	0801606d 	.word	0x0801606d
 8013974:	08015e99 	.word	0x08015e99
 8013978:	3ff80000 	.word	0x3ff80000
 801397c:	08016170 	.word	0x08016170
 8013980:	080160d5 	.word	0x080160d5
 8013984:	2401      	movs	r4, #1
 8013986:	2300      	movs	r3, #0
 8013988:	940b      	str	r4, [sp, #44]	; 0x2c
 801398a:	9322      	str	r3, [sp, #136]	; 0x88
 801398c:	f04f 39ff 	mov.w	r9, #4294967295
 8013990:	2200      	movs	r2, #0
 8013992:	2312      	movs	r3, #18
 8013994:	f8cd 9020 	str.w	r9, [sp, #32]
 8013998:	9223      	str	r2, [sp, #140]	; 0x8c
 801399a:	e7b0      	b.n	80138fe <_dtoa_r+0x266>
 801399c:	2301      	movs	r3, #1
 801399e:	930b      	str	r3, [sp, #44]	; 0x2c
 80139a0:	e7f4      	b.n	801398c <_dtoa_r+0x2f4>
 80139a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80139a6:	464b      	mov	r3, r9
 80139a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80139ac:	e7a7      	b.n	80138fe <_dtoa_r+0x266>
 80139ae:	3101      	adds	r1, #1
 80139b0:	6041      	str	r1, [r0, #4]
 80139b2:	0052      	lsls	r2, r2, #1
 80139b4:	e7a7      	b.n	8013906 <_dtoa_r+0x26e>
 80139b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80139b8:	9a03      	ldr	r2, [sp, #12]
 80139ba:	601a      	str	r2, [r3, #0]
 80139bc:	9b08      	ldr	r3, [sp, #32]
 80139be:	2b0e      	cmp	r3, #14
 80139c0:	f200 80a8 	bhi.w	8013b14 <_dtoa_r+0x47c>
 80139c4:	2c00      	cmp	r4, #0
 80139c6:	f000 80a5 	beq.w	8013b14 <_dtoa_r+0x47c>
 80139ca:	f1ba 0f00 	cmp.w	sl, #0
 80139ce:	dd34      	ble.n	8013a3a <_dtoa_r+0x3a2>
 80139d0:	4a9a      	ldr	r2, [pc, #616]	; (8013c3c <_dtoa_r+0x5a4>)
 80139d2:	f00a 030f 	and.w	r3, sl, #15
 80139d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80139da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80139de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80139e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80139e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80139ea:	d016      	beq.n	8013a1a <_dtoa_r+0x382>
 80139ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80139f0:	4b93      	ldr	r3, [pc, #588]	; (8013c40 <_dtoa_r+0x5a8>)
 80139f2:	2703      	movs	r7, #3
 80139f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80139f8:	f7ec ff04 	bl	8000804 <__aeabi_ddiv>
 80139fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a00:	f004 040f 	and.w	r4, r4, #15
 8013a04:	4e8e      	ldr	r6, [pc, #568]	; (8013c40 <_dtoa_r+0x5a8>)
 8013a06:	b954      	cbnz	r4, 8013a1e <_dtoa_r+0x386>
 8013a08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a10:	f7ec fef8 	bl	8000804 <__aeabi_ddiv>
 8013a14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a18:	e029      	b.n	8013a6e <_dtoa_r+0x3d6>
 8013a1a:	2702      	movs	r7, #2
 8013a1c:	e7f2      	b.n	8013a04 <_dtoa_r+0x36c>
 8013a1e:	07e1      	lsls	r1, r4, #31
 8013a20:	d508      	bpl.n	8013a34 <_dtoa_r+0x39c>
 8013a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013a2a:	f7ec fdc1 	bl	80005b0 <__aeabi_dmul>
 8013a2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013a32:	3701      	adds	r7, #1
 8013a34:	1064      	asrs	r4, r4, #1
 8013a36:	3608      	adds	r6, #8
 8013a38:	e7e5      	b.n	8013a06 <_dtoa_r+0x36e>
 8013a3a:	f000 80a5 	beq.w	8013b88 <_dtoa_r+0x4f0>
 8013a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013a42:	f1ca 0400 	rsb	r4, sl, #0
 8013a46:	4b7d      	ldr	r3, [pc, #500]	; (8013c3c <_dtoa_r+0x5a4>)
 8013a48:	f004 020f 	and.w	r2, r4, #15
 8013a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a54:	f7ec fdac 	bl	80005b0 <__aeabi_dmul>
 8013a58:	2702      	movs	r7, #2
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a60:	4e77      	ldr	r6, [pc, #476]	; (8013c40 <_dtoa_r+0x5a8>)
 8013a62:	1124      	asrs	r4, r4, #4
 8013a64:	2c00      	cmp	r4, #0
 8013a66:	f040 8084 	bne.w	8013b72 <_dtoa_r+0x4da>
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d1d2      	bne.n	8013a14 <_dtoa_r+0x37c>
 8013a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f000 808b 	beq.w	8013b8c <_dtoa_r+0x4f4>
 8013a76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013a7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013a7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a82:	2200      	movs	r2, #0
 8013a84:	4b6f      	ldr	r3, [pc, #444]	; (8013c44 <_dtoa_r+0x5ac>)
 8013a86:	f7ed f805 	bl	8000a94 <__aeabi_dcmplt>
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	d07e      	beq.n	8013b8c <_dtoa_r+0x4f4>
 8013a8e:	9b08      	ldr	r3, [sp, #32]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d07b      	beq.n	8013b8c <_dtoa_r+0x4f4>
 8013a94:	f1b9 0f00 	cmp.w	r9, #0
 8013a98:	dd38      	ble.n	8013b0c <_dtoa_r+0x474>
 8013a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	4b69      	ldr	r3, [pc, #420]	; (8013c48 <_dtoa_r+0x5b0>)
 8013aa2:	f7ec fd85 	bl	80005b0 <__aeabi_dmul>
 8013aa6:	464c      	mov	r4, r9
 8013aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013aac:	f10a 38ff 	add.w	r8, sl, #4294967295
 8013ab0:	3701      	adds	r7, #1
 8013ab2:	4638      	mov	r0, r7
 8013ab4:	f7ec fd12 	bl	80004dc <__aeabi_i2d>
 8013ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013abc:	f7ec fd78 	bl	80005b0 <__aeabi_dmul>
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	4b62      	ldr	r3, [pc, #392]	; (8013c4c <_dtoa_r+0x5b4>)
 8013ac4:	f7ec fbbe 	bl	8000244 <__adddf3>
 8013ac8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013acc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013ad0:	9611      	str	r6, [sp, #68]	; 0x44
 8013ad2:	2c00      	cmp	r4, #0
 8013ad4:	d15d      	bne.n	8013b92 <_dtoa_r+0x4fa>
 8013ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ada:	2200      	movs	r2, #0
 8013adc:	4b5c      	ldr	r3, [pc, #368]	; (8013c50 <_dtoa_r+0x5b8>)
 8013ade:	f7ec fbaf 	bl	8000240 <__aeabi_dsub>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	460b      	mov	r3, r1
 8013ae6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013aea:	4633      	mov	r3, r6
 8013aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013aee:	f7ec ffef 	bl	8000ad0 <__aeabi_dcmpgt>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	f040 829c 	bne.w	8014030 <_dtoa_r+0x998>
 8013af8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013afc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013afe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013b02:	f7ec ffc7 	bl	8000a94 <__aeabi_dcmplt>
 8013b06:	2800      	cmp	r0, #0
 8013b08:	f040 8290 	bne.w	801402c <_dtoa_r+0x994>
 8013b0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013b10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013b14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	f2c0 8152 	blt.w	8013dc0 <_dtoa_r+0x728>
 8013b1c:	f1ba 0f0e 	cmp.w	sl, #14
 8013b20:	f300 814e 	bgt.w	8013dc0 <_dtoa_r+0x728>
 8013b24:	4b45      	ldr	r3, [pc, #276]	; (8013c3c <_dtoa_r+0x5a4>)
 8013b26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013b2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013b2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	f280 80db 	bge.w	8013cf0 <_dtoa_r+0x658>
 8013b3a:	9b08      	ldr	r3, [sp, #32]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	f300 80d7 	bgt.w	8013cf0 <_dtoa_r+0x658>
 8013b42:	f040 8272 	bne.w	801402a <_dtoa_r+0x992>
 8013b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	4b40      	ldr	r3, [pc, #256]	; (8013c50 <_dtoa_r+0x5b8>)
 8013b4e:	f7ec fd2f 	bl	80005b0 <__aeabi_dmul>
 8013b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b56:	f7ec ffb1 	bl	8000abc <__aeabi_dcmpge>
 8013b5a:	9c08      	ldr	r4, [sp, #32]
 8013b5c:	4626      	mov	r6, r4
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	f040 8248 	bne.w	8013ff4 <_dtoa_r+0x95c>
 8013b64:	2331      	movs	r3, #49	; 0x31
 8013b66:	9f03      	ldr	r7, [sp, #12]
 8013b68:	f10a 0a01 	add.w	sl, sl, #1
 8013b6c:	f807 3b01 	strb.w	r3, [r7], #1
 8013b70:	e244      	b.n	8013ffc <_dtoa_r+0x964>
 8013b72:	07e2      	lsls	r2, r4, #31
 8013b74:	d505      	bpl.n	8013b82 <_dtoa_r+0x4ea>
 8013b76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b7a:	f7ec fd19 	bl	80005b0 <__aeabi_dmul>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	3701      	adds	r7, #1
 8013b82:	1064      	asrs	r4, r4, #1
 8013b84:	3608      	adds	r6, #8
 8013b86:	e76d      	b.n	8013a64 <_dtoa_r+0x3cc>
 8013b88:	2702      	movs	r7, #2
 8013b8a:	e770      	b.n	8013a6e <_dtoa_r+0x3d6>
 8013b8c:	46d0      	mov	r8, sl
 8013b8e:	9c08      	ldr	r4, [sp, #32]
 8013b90:	e78f      	b.n	8013ab2 <_dtoa_r+0x41a>
 8013b92:	9903      	ldr	r1, [sp, #12]
 8013b94:	4b29      	ldr	r3, [pc, #164]	; (8013c3c <_dtoa_r+0x5a4>)
 8013b96:	4421      	add	r1, r4
 8013b98:	9112      	str	r1, [sp, #72]	; 0x48
 8013b9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013ba0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013ba4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013ba8:	2900      	cmp	r1, #0
 8013baa:	d055      	beq.n	8013c58 <_dtoa_r+0x5c0>
 8013bac:	2000      	movs	r0, #0
 8013bae:	4929      	ldr	r1, [pc, #164]	; (8013c54 <_dtoa_r+0x5bc>)
 8013bb0:	f7ec fe28 	bl	8000804 <__aeabi_ddiv>
 8013bb4:	463b      	mov	r3, r7
 8013bb6:	4632      	mov	r2, r6
 8013bb8:	f7ec fb42 	bl	8000240 <__aeabi_dsub>
 8013bbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013bc0:	9f03      	ldr	r7, [sp, #12]
 8013bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bc6:	f7ec ffa3 	bl	8000b10 <__aeabi_d2iz>
 8013bca:	4604      	mov	r4, r0
 8013bcc:	f7ec fc86 	bl	80004dc <__aeabi_i2d>
 8013bd0:	4602      	mov	r2, r0
 8013bd2:	460b      	mov	r3, r1
 8013bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bd8:	f7ec fb32 	bl	8000240 <__aeabi_dsub>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	460b      	mov	r3, r1
 8013be0:	3430      	adds	r4, #48	; 0x30
 8013be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013bea:	f807 4b01 	strb.w	r4, [r7], #1
 8013bee:	f7ec ff51 	bl	8000a94 <__aeabi_dcmplt>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d174      	bne.n	8013ce0 <_dtoa_r+0x648>
 8013bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	4911      	ldr	r1, [pc, #68]	; (8013c44 <_dtoa_r+0x5ac>)
 8013bfe:	f7ec fb1f 	bl	8000240 <__aeabi_dsub>
 8013c02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013c06:	f7ec ff45 	bl	8000a94 <__aeabi_dcmplt>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	f040 80b7 	bne.w	8013d7e <_dtoa_r+0x6e6>
 8013c10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c12:	429f      	cmp	r7, r3
 8013c14:	f43f af7a 	beq.w	8013b0c <_dtoa_r+0x474>
 8013c18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	4b0a      	ldr	r3, [pc, #40]	; (8013c48 <_dtoa_r+0x5b0>)
 8013c20:	f7ec fcc6 	bl	80005b0 <__aeabi_dmul>
 8013c24:	2200      	movs	r2, #0
 8013c26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c2e:	4b06      	ldr	r3, [pc, #24]	; (8013c48 <_dtoa_r+0x5b0>)
 8013c30:	f7ec fcbe 	bl	80005b0 <__aeabi_dmul>
 8013c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c38:	e7c3      	b.n	8013bc2 <_dtoa_r+0x52a>
 8013c3a:	bf00      	nop
 8013c3c:	08016170 	.word	0x08016170
 8013c40:	08016148 	.word	0x08016148
 8013c44:	3ff00000 	.word	0x3ff00000
 8013c48:	40240000 	.word	0x40240000
 8013c4c:	401c0000 	.word	0x401c0000
 8013c50:	40140000 	.word	0x40140000
 8013c54:	3fe00000 	.word	0x3fe00000
 8013c58:	4630      	mov	r0, r6
 8013c5a:	4639      	mov	r1, r7
 8013c5c:	f7ec fca8 	bl	80005b0 <__aeabi_dmul>
 8013c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013c66:	9c03      	ldr	r4, [sp, #12]
 8013c68:	9314      	str	r3, [sp, #80]	; 0x50
 8013c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c6e:	f7ec ff4f 	bl	8000b10 <__aeabi_d2iz>
 8013c72:	9015      	str	r0, [sp, #84]	; 0x54
 8013c74:	f7ec fc32 	bl	80004dc <__aeabi_i2d>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	460b      	mov	r3, r1
 8013c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c80:	f7ec fade 	bl	8000240 <__aeabi_dsub>
 8013c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c86:	4606      	mov	r6, r0
 8013c88:	3330      	adds	r3, #48	; 0x30
 8013c8a:	f804 3b01 	strb.w	r3, [r4], #1
 8013c8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c90:	460f      	mov	r7, r1
 8013c92:	429c      	cmp	r4, r3
 8013c94:	f04f 0200 	mov.w	r2, #0
 8013c98:	d124      	bne.n	8013ce4 <_dtoa_r+0x64c>
 8013c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c9e:	4bb0      	ldr	r3, [pc, #704]	; (8013f60 <_dtoa_r+0x8c8>)
 8013ca0:	f7ec fad0 	bl	8000244 <__adddf3>
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	460b      	mov	r3, r1
 8013ca8:	4630      	mov	r0, r6
 8013caa:	4639      	mov	r1, r7
 8013cac:	f7ec ff10 	bl	8000ad0 <__aeabi_dcmpgt>
 8013cb0:	2800      	cmp	r0, #0
 8013cb2:	d163      	bne.n	8013d7c <_dtoa_r+0x6e4>
 8013cb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013cb8:	2000      	movs	r0, #0
 8013cba:	49a9      	ldr	r1, [pc, #676]	; (8013f60 <_dtoa_r+0x8c8>)
 8013cbc:	f7ec fac0 	bl	8000240 <__aeabi_dsub>
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	460b      	mov	r3, r1
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	4639      	mov	r1, r7
 8013cc8:	f7ec fee4 	bl	8000a94 <__aeabi_dcmplt>
 8013ccc:	2800      	cmp	r0, #0
 8013cce:	f43f af1d 	beq.w	8013b0c <_dtoa_r+0x474>
 8013cd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013cd4:	1e7b      	subs	r3, r7, #1
 8013cd6:	9314      	str	r3, [sp, #80]	; 0x50
 8013cd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013cdc:	2b30      	cmp	r3, #48	; 0x30
 8013cde:	d0f8      	beq.n	8013cd2 <_dtoa_r+0x63a>
 8013ce0:	46c2      	mov	sl, r8
 8013ce2:	e03b      	b.n	8013d5c <_dtoa_r+0x6c4>
 8013ce4:	4b9f      	ldr	r3, [pc, #636]	; (8013f64 <_dtoa_r+0x8cc>)
 8013ce6:	f7ec fc63 	bl	80005b0 <__aeabi_dmul>
 8013cea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013cee:	e7bc      	b.n	8013c6a <_dtoa_r+0x5d2>
 8013cf0:	9f03      	ldr	r7, [sp, #12]
 8013cf2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cfa:	4640      	mov	r0, r8
 8013cfc:	4649      	mov	r1, r9
 8013cfe:	f7ec fd81 	bl	8000804 <__aeabi_ddiv>
 8013d02:	f7ec ff05 	bl	8000b10 <__aeabi_d2iz>
 8013d06:	4604      	mov	r4, r0
 8013d08:	f7ec fbe8 	bl	80004dc <__aeabi_i2d>
 8013d0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d10:	f7ec fc4e 	bl	80005b0 <__aeabi_dmul>
 8013d14:	4602      	mov	r2, r0
 8013d16:	460b      	mov	r3, r1
 8013d18:	4640      	mov	r0, r8
 8013d1a:	4649      	mov	r1, r9
 8013d1c:	f7ec fa90 	bl	8000240 <__aeabi_dsub>
 8013d20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013d24:	f807 6b01 	strb.w	r6, [r7], #1
 8013d28:	9e03      	ldr	r6, [sp, #12]
 8013d2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013d2e:	1bbe      	subs	r6, r7, r6
 8013d30:	45b4      	cmp	ip, r6
 8013d32:	4602      	mov	r2, r0
 8013d34:	460b      	mov	r3, r1
 8013d36:	d136      	bne.n	8013da6 <_dtoa_r+0x70e>
 8013d38:	f7ec fa84 	bl	8000244 <__adddf3>
 8013d3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d40:	4680      	mov	r8, r0
 8013d42:	4689      	mov	r9, r1
 8013d44:	f7ec fec4 	bl	8000ad0 <__aeabi_dcmpgt>
 8013d48:	bb58      	cbnz	r0, 8013da2 <_dtoa_r+0x70a>
 8013d4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d4e:	4640      	mov	r0, r8
 8013d50:	4649      	mov	r1, r9
 8013d52:	f7ec fe95 	bl	8000a80 <__aeabi_dcmpeq>
 8013d56:	b108      	cbz	r0, 8013d5c <_dtoa_r+0x6c4>
 8013d58:	07e1      	lsls	r1, r4, #31
 8013d5a:	d422      	bmi.n	8013da2 <_dtoa_r+0x70a>
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	4659      	mov	r1, fp
 8013d60:	f000 fb02 	bl	8014368 <_Bfree>
 8013d64:	2300      	movs	r3, #0
 8013d66:	703b      	strb	r3, [r7, #0]
 8013d68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013d6a:	f10a 0001 	add.w	r0, sl, #1
 8013d6e:	6018      	str	r0, [r3, #0]
 8013d70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	f43f acde 	beq.w	8013734 <_dtoa_r+0x9c>
 8013d78:	601f      	str	r7, [r3, #0]
 8013d7a:	e4db      	b.n	8013734 <_dtoa_r+0x9c>
 8013d7c:	4627      	mov	r7, r4
 8013d7e:	463b      	mov	r3, r7
 8013d80:	461f      	mov	r7, r3
 8013d82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d86:	2a39      	cmp	r2, #57	; 0x39
 8013d88:	d107      	bne.n	8013d9a <_dtoa_r+0x702>
 8013d8a:	9a03      	ldr	r2, [sp, #12]
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d1f7      	bne.n	8013d80 <_dtoa_r+0x6e8>
 8013d90:	2230      	movs	r2, #48	; 0x30
 8013d92:	9903      	ldr	r1, [sp, #12]
 8013d94:	f108 0801 	add.w	r8, r8, #1
 8013d98:	700a      	strb	r2, [r1, #0]
 8013d9a:	781a      	ldrb	r2, [r3, #0]
 8013d9c:	3201      	adds	r2, #1
 8013d9e:	701a      	strb	r2, [r3, #0]
 8013da0:	e79e      	b.n	8013ce0 <_dtoa_r+0x648>
 8013da2:	46d0      	mov	r8, sl
 8013da4:	e7eb      	b.n	8013d7e <_dtoa_r+0x6e6>
 8013da6:	2200      	movs	r2, #0
 8013da8:	4b6e      	ldr	r3, [pc, #440]	; (8013f64 <_dtoa_r+0x8cc>)
 8013daa:	f7ec fc01 	bl	80005b0 <__aeabi_dmul>
 8013dae:	2200      	movs	r2, #0
 8013db0:	2300      	movs	r3, #0
 8013db2:	4680      	mov	r8, r0
 8013db4:	4689      	mov	r9, r1
 8013db6:	f7ec fe63 	bl	8000a80 <__aeabi_dcmpeq>
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d09b      	beq.n	8013cf6 <_dtoa_r+0x65e>
 8013dbe:	e7cd      	b.n	8013d5c <_dtoa_r+0x6c4>
 8013dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013dc2:	2a00      	cmp	r2, #0
 8013dc4:	f000 80d0 	beq.w	8013f68 <_dtoa_r+0x8d0>
 8013dc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013dca:	2a01      	cmp	r2, #1
 8013dcc:	f300 80ae 	bgt.w	8013f2c <_dtoa_r+0x894>
 8013dd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013dd2:	2a00      	cmp	r2, #0
 8013dd4:	f000 80a6 	beq.w	8013f24 <_dtoa_r+0x88c>
 8013dd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ddc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013dde:	9f06      	ldr	r7, [sp, #24]
 8013de0:	9a06      	ldr	r2, [sp, #24]
 8013de2:	2101      	movs	r1, #1
 8013de4:	441a      	add	r2, r3
 8013de6:	9206      	str	r2, [sp, #24]
 8013de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dea:	4628      	mov	r0, r5
 8013dec:	441a      	add	r2, r3
 8013dee:	9209      	str	r2, [sp, #36]	; 0x24
 8013df0:	f000 fb70 	bl	80144d4 <__i2b>
 8013df4:	4606      	mov	r6, r0
 8013df6:	2f00      	cmp	r7, #0
 8013df8:	dd0c      	ble.n	8013e14 <_dtoa_r+0x77c>
 8013dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	dd09      	ble.n	8013e14 <_dtoa_r+0x77c>
 8013e00:	42bb      	cmp	r3, r7
 8013e02:	bfa8      	it	ge
 8013e04:	463b      	movge	r3, r7
 8013e06:	9a06      	ldr	r2, [sp, #24]
 8013e08:	1aff      	subs	r7, r7, r3
 8013e0a:	1ad2      	subs	r2, r2, r3
 8013e0c:	9206      	str	r2, [sp, #24]
 8013e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e10:	1ad3      	subs	r3, r2, r3
 8013e12:	9309      	str	r3, [sp, #36]	; 0x24
 8013e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e16:	b1f3      	cbz	r3, 8013e56 <_dtoa_r+0x7be>
 8013e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f000 80a8 	beq.w	8013f70 <_dtoa_r+0x8d8>
 8013e20:	2c00      	cmp	r4, #0
 8013e22:	dd10      	ble.n	8013e46 <_dtoa_r+0x7ae>
 8013e24:	4631      	mov	r1, r6
 8013e26:	4622      	mov	r2, r4
 8013e28:	4628      	mov	r0, r5
 8013e2a:	f000 fc11 	bl	8014650 <__pow5mult>
 8013e2e:	465a      	mov	r2, fp
 8013e30:	4601      	mov	r1, r0
 8013e32:	4606      	mov	r6, r0
 8013e34:	4628      	mov	r0, r5
 8013e36:	f000 fb63 	bl	8014500 <__multiply>
 8013e3a:	4680      	mov	r8, r0
 8013e3c:	4659      	mov	r1, fp
 8013e3e:	4628      	mov	r0, r5
 8013e40:	f000 fa92 	bl	8014368 <_Bfree>
 8013e44:	46c3      	mov	fp, r8
 8013e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e48:	1b1a      	subs	r2, r3, r4
 8013e4a:	d004      	beq.n	8013e56 <_dtoa_r+0x7be>
 8013e4c:	4659      	mov	r1, fp
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f000 fbfe 	bl	8014650 <__pow5mult>
 8013e54:	4683      	mov	fp, r0
 8013e56:	2101      	movs	r1, #1
 8013e58:	4628      	mov	r0, r5
 8013e5a:	f000 fb3b 	bl	80144d4 <__i2b>
 8013e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e60:	4604      	mov	r4, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	f340 8086 	ble.w	8013f74 <_dtoa_r+0x8dc>
 8013e68:	461a      	mov	r2, r3
 8013e6a:	4601      	mov	r1, r0
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	f000 fbef 	bl	8014650 <__pow5mult>
 8013e72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e74:	4604      	mov	r4, r0
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	dd7f      	ble.n	8013f7a <_dtoa_r+0x8e2>
 8013e7a:	f04f 0800 	mov.w	r8, #0
 8013e7e:	6923      	ldr	r3, [r4, #16]
 8013e80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013e84:	6918      	ldr	r0, [r3, #16]
 8013e86:	f000 fad7 	bl	8014438 <__hi0bits>
 8013e8a:	f1c0 0020 	rsb	r0, r0, #32
 8013e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e90:	4418      	add	r0, r3
 8013e92:	f010 001f 	ands.w	r0, r0, #31
 8013e96:	f000 8092 	beq.w	8013fbe <_dtoa_r+0x926>
 8013e9a:	f1c0 0320 	rsb	r3, r0, #32
 8013e9e:	2b04      	cmp	r3, #4
 8013ea0:	f340 808a 	ble.w	8013fb8 <_dtoa_r+0x920>
 8013ea4:	f1c0 001c 	rsb	r0, r0, #28
 8013ea8:	9b06      	ldr	r3, [sp, #24]
 8013eaa:	4407      	add	r7, r0
 8013eac:	4403      	add	r3, r0
 8013eae:	9306      	str	r3, [sp, #24]
 8013eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eb2:	4403      	add	r3, r0
 8013eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8013eb6:	9b06      	ldr	r3, [sp, #24]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	dd05      	ble.n	8013ec8 <_dtoa_r+0x830>
 8013ebc:	4659      	mov	r1, fp
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	f000 fc1f 	bl	8014704 <__lshift>
 8013ec6:	4683      	mov	fp, r0
 8013ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	dd05      	ble.n	8013eda <_dtoa_r+0x842>
 8013ece:	4621      	mov	r1, r4
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	f000 fc16 	bl	8014704 <__lshift>
 8013ed8:	4604      	mov	r4, r0
 8013eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d070      	beq.n	8013fc2 <_dtoa_r+0x92a>
 8013ee0:	4621      	mov	r1, r4
 8013ee2:	4658      	mov	r0, fp
 8013ee4:	f000 fc7e 	bl	80147e4 <__mcmp>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	da6a      	bge.n	8013fc2 <_dtoa_r+0x92a>
 8013eec:	2300      	movs	r3, #0
 8013eee:	4659      	mov	r1, fp
 8013ef0:	220a      	movs	r2, #10
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	f000 fa5a 	bl	80143ac <__multadd>
 8013ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013efa:	4683      	mov	fp, r0
 8013efc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	f000 8194 	beq.w	801422e <_dtoa_r+0xb96>
 8013f06:	4631      	mov	r1, r6
 8013f08:	2300      	movs	r3, #0
 8013f0a:	220a      	movs	r2, #10
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	f000 fa4d 	bl	80143ac <__multadd>
 8013f12:	f1b9 0f00 	cmp.w	r9, #0
 8013f16:	4606      	mov	r6, r0
 8013f18:	f300 8093 	bgt.w	8014042 <_dtoa_r+0x9aa>
 8013f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f1e:	2b02      	cmp	r3, #2
 8013f20:	dc57      	bgt.n	8013fd2 <_dtoa_r+0x93a>
 8013f22:	e08e      	b.n	8014042 <_dtoa_r+0x9aa>
 8013f24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013f2a:	e757      	b.n	8013ddc <_dtoa_r+0x744>
 8013f2c:	9b08      	ldr	r3, [sp, #32]
 8013f2e:	1e5c      	subs	r4, r3, #1
 8013f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f32:	42a3      	cmp	r3, r4
 8013f34:	bfb7      	itett	lt
 8013f36:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013f38:	1b1c      	subge	r4, r3, r4
 8013f3a:	1ae2      	sublt	r2, r4, r3
 8013f3c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013f3e:	bfbe      	ittt	lt
 8013f40:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013f42:	189b      	addlt	r3, r3, r2
 8013f44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013f46:	9b08      	ldr	r3, [sp, #32]
 8013f48:	bfb8      	it	lt
 8013f4a:	2400      	movlt	r4, #0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	bfbb      	ittet	lt
 8013f50:	9b06      	ldrlt	r3, [sp, #24]
 8013f52:	9a08      	ldrlt	r2, [sp, #32]
 8013f54:	9f06      	ldrge	r7, [sp, #24]
 8013f56:	1a9f      	sublt	r7, r3, r2
 8013f58:	bfac      	ite	ge
 8013f5a:	9b08      	ldrge	r3, [sp, #32]
 8013f5c:	2300      	movlt	r3, #0
 8013f5e:	e73f      	b.n	8013de0 <_dtoa_r+0x748>
 8013f60:	3fe00000 	.word	0x3fe00000
 8013f64:	40240000 	.word	0x40240000
 8013f68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013f6a:	9f06      	ldr	r7, [sp, #24]
 8013f6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013f6e:	e742      	b.n	8013df6 <_dtoa_r+0x75e>
 8013f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f72:	e76b      	b.n	8013e4c <_dtoa_r+0x7b4>
 8013f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	dc19      	bgt.n	8013fae <_dtoa_r+0x916>
 8013f7a:	9b04      	ldr	r3, [sp, #16]
 8013f7c:	b9bb      	cbnz	r3, 8013fae <_dtoa_r+0x916>
 8013f7e:	9b05      	ldr	r3, [sp, #20]
 8013f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f84:	b99b      	cbnz	r3, 8013fae <_dtoa_r+0x916>
 8013f86:	9b05      	ldr	r3, [sp, #20]
 8013f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f8c:	0d1b      	lsrs	r3, r3, #20
 8013f8e:	051b      	lsls	r3, r3, #20
 8013f90:	b183      	cbz	r3, 8013fb4 <_dtoa_r+0x91c>
 8013f92:	f04f 0801 	mov.w	r8, #1
 8013f96:	9b06      	ldr	r3, [sp, #24]
 8013f98:	3301      	adds	r3, #1
 8013f9a:	9306      	str	r3, [sp, #24]
 8013f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8013fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	f47f af6a 	bne.w	8013e7e <_dtoa_r+0x7e6>
 8013faa:	2001      	movs	r0, #1
 8013fac:	e76f      	b.n	8013e8e <_dtoa_r+0x7f6>
 8013fae:	f04f 0800 	mov.w	r8, #0
 8013fb2:	e7f6      	b.n	8013fa2 <_dtoa_r+0x90a>
 8013fb4:	4698      	mov	r8, r3
 8013fb6:	e7f4      	b.n	8013fa2 <_dtoa_r+0x90a>
 8013fb8:	f43f af7d 	beq.w	8013eb6 <_dtoa_r+0x81e>
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	301c      	adds	r0, #28
 8013fc0:	e772      	b.n	8013ea8 <_dtoa_r+0x810>
 8013fc2:	9b08      	ldr	r3, [sp, #32]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	dc36      	bgt.n	8014036 <_dtoa_r+0x99e>
 8013fc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013fca:	2b02      	cmp	r3, #2
 8013fcc:	dd33      	ble.n	8014036 <_dtoa_r+0x99e>
 8013fce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013fd2:	f1b9 0f00 	cmp.w	r9, #0
 8013fd6:	d10d      	bne.n	8013ff4 <_dtoa_r+0x95c>
 8013fd8:	4621      	mov	r1, r4
 8013fda:	464b      	mov	r3, r9
 8013fdc:	2205      	movs	r2, #5
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f000 f9e4 	bl	80143ac <__multadd>
 8013fe4:	4601      	mov	r1, r0
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	4658      	mov	r0, fp
 8013fea:	f000 fbfb 	bl	80147e4 <__mcmp>
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	f73f adb8 	bgt.w	8013b64 <_dtoa_r+0x4cc>
 8013ff4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ff6:	9f03      	ldr	r7, [sp, #12]
 8013ff8:	ea6f 0a03 	mvn.w	sl, r3
 8013ffc:	f04f 0800 	mov.w	r8, #0
 8014000:	4621      	mov	r1, r4
 8014002:	4628      	mov	r0, r5
 8014004:	f000 f9b0 	bl	8014368 <_Bfree>
 8014008:	2e00      	cmp	r6, #0
 801400a:	f43f aea7 	beq.w	8013d5c <_dtoa_r+0x6c4>
 801400e:	f1b8 0f00 	cmp.w	r8, #0
 8014012:	d005      	beq.n	8014020 <_dtoa_r+0x988>
 8014014:	45b0      	cmp	r8, r6
 8014016:	d003      	beq.n	8014020 <_dtoa_r+0x988>
 8014018:	4641      	mov	r1, r8
 801401a:	4628      	mov	r0, r5
 801401c:	f000 f9a4 	bl	8014368 <_Bfree>
 8014020:	4631      	mov	r1, r6
 8014022:	4628      	mov	r0, r5
 8014024:	f000 f9a0 	bl	8014368 <_Bfree>
 8014028:	e698      	b.n	8013d5c <_dtoa_r+0x6c4>
 801402a:	2400      	movs	r4, #0
 801402c:	4626      	mov	r6, r4
 801402e:	e7e1      	b.n	8013ff4 <_dtoa_r+0x95c>
 8014030:	46c2      	mov	sl, r8
 8014032:	4626      	mov	r6, r4
 8014034:	e596      	b.n	8013b64 <_dtoa_r+0x4cc>
 8014036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801403c:	2b00      	cmp	r3, #0
 801403e:	f000 80fd 	beq.w	801423c <_dtoa_r+0xba4>
 8014042:	2f00      	cmp	r7, #0
 8014044:	dd05      	ble.n	8014052 <_dtoa_r+0x9ba>
 8014046:	4631      	mov	r1, r6
 8014048:	463a      	mov	r2, r7
 801404a:	4628      	mov	r0, r5
 801404c:	f000 fb5a 	bl	8014704 <__lshift>
 8014050:	4606      	mov	r6, r0
 8014052:	f1b8 0f00 	cmp.w	r8, #0
 8014056:	d05c      	beq.n	8014112 <_dtoa_r+0xa7a>
 8014058:	4628      	mov	r0, r5
 801405a:	6871      	ldr	r1, [r6, #4]
 801405c:	f000 f944 	bl	80142e8 <_Balloc>
 8014060:	4607      	mov	r7, r0
 8014062:	b928      	cbnz	r0, 8014070 <_dtoa_r+0x9d8>
 8014064:	4602      	mov	r2, r0
 8014066:	f240 21ea 	movw	r1, #746	; 0x2ea
 801406a:	4b7f      	ldr	r3, [pc, #508]	; (8014268 <_dtoa_r+0xbd0>)
 801406c:	f7ff bb28 	b.w	80136c0 <_dtoa_r+0x28>
 8014070:	6932      	ldr	r2, [r6, #16]
 8014072:	f106 010c 	add.w	r1, r6, #12
 8014076:	3202      	adds	r2, #2
 8014078:	0092      	lsls	r2, r2, #2
 801407a:	300c      	adds	r0, #12
 801407c:	f000 f926 	bl	80142cc <memcpy>
 8014080:	2201      	movs	r2, #1
 8014082:	4639      	mov	r1, r7
 8014084:	4628      	mov	r0, r5
 8014086:	f000 fb3d 	bl	8014704 <__lshift>
 801408a:	46b0      	mov	r8, r6
 801408c:	4606      	mov	r6, r0
 801408e:	9b03      	ldr	r3, [sp, #12]
 8014090:	3301      	adds	r3, #1
 8014092:	9308      	str	r3, [sp, #32]
 8014094:	9b03      	ldr	r3, [sp, #12]
 8014096:	444b      	add	r3, r9
 8014098:	930a      	str	r3, [sp, #40]	; 0x28
 801409a:	9b04      	ldr	r3, [sp, #16]
 801409c:	f003 0301 	and.w	r3, r3, #1
 80140a0:	9309      	str	r3, [sp, #36]	; 0x24
 80140a2:	9b08      	ldr	r3, [sp, #32]
 80140a4:	4621      	mov	r1, r4
 80140a6:	3b01      	subs	r3, #1
 80140a8:	4658      	mov	r0, fp
 80140aa:	9304      	str	r3, [sp, #16]
 80140ac:	f7ff fa66 	bl	801357c <quorem>
 80140b0:	4603      	mov	r3, r0
 80140b2:	4641      	mov	r1, r8
 80140b4:	3330      	adds	r3, #48	; 0x30
 80140b6:	9006      	str	r0, [sp, #24]
 80140b8:	4658      	mov	r0, fp
 80140ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80140bc:	f000 fb92 	bl	80147e4 <__mcmp>
 80140c0:	4632      	mov	r2, r6
 80140c2:	4681      	mov	r9, r0
 80140c4:	4621      	mov	r1, r4
 80140c6:	4628      	mov	r0, r5
 80140c8:	f000 fba8 	bl	801481c <__mdiff>
 80140cc:	68c2      	ldr	r2, [r0, #12]
 80140ce:	4607      	mov	r7, r0
 80140d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140d2:	bb02      	cbnz	r2, 8014116 <_dtoa_r+0xa7e>
 80140d4:	4601      	mov	r1, r0
 80140d6:	4658      	mov	r0, fp
 80140d8:	f000 fb84 	bl	80147e4 <__mcmp>
 80140dc:	4602      	mov	r2, r0
 80140de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140e0:	4639      	mov	r1, r7
 80140e2:	4628      	mov	r0, r5
 80140e4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80140e8:	f000 f93e 	bl	8014368 <_Bfree>
 80140ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80140ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140f0:	9f08      	ldr	r7, [sp, #32]
 80140f2:	ea43 0102 	orr.w	r1, r3, r2
 80140f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140f8:	430b      	orrs	r3, r1
 80140fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140fc:	d10d      	bne.n	801411a <_dtoa_r+0xa82>
 80140fe:	2b39      	cmp	r3, #57	; 0x39
 8014100:	d029      	beq.n	8014156 <_dtoa_r+0xabe>
 8014102:	f1b9 0f00 	cmp.w	r9, #0
 8014106:	dd01      	ble.n	801410c <_dtoa_r+0xa74>
 8014108:	9b06      	ldr	r3, [sp, #24]
 801410a:	3331      	adds	r3, #49	; 0x31
 801410c:	9a04      	ldr	r2, [sp, #16]
 801410e:	7013      	strb	r3, [r2, #0]
 8014110:	e776      	b.n	8014000 <_dtoa_r+0x968>
 8014112:	4630      	mov	r0, r6
 8014114:	e7b9      	b.n	801408a <_dtoa_r+0x9f2>
 8014116:	2201      	movs	r2, #1
 8014118:	e7e2      	b.n	80140e0 <_dtoa_r+0xa48>
 801411a:	f1b9 0f00 	cmp.w	r9, #0
 801411e:	db06      	blt.n	801412e <_dtoa_r+0xa96>
 8014120:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014122:	ea41 0909 	orr.w	r9, r1, r9
 8014126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014128:	ea59 0101 	orrs.w	r1, r9, r1
 801412c:	d120      	bne.n	8014170 <_dtoa_r+0xad8>
 801412e:	2a00      	cmp	r2, #0
 8014130:	ddec      	ble.n	801410c <_dtoa_r+0xa74>
 8014132:	4659      	mov	r1, fp
 8014134:	2201      	movs	r2, #1
 8014136:	4628      	mov	r0, r5
 8014138:	9308      	str	r3, [sp, #32]
 801413a:	f000 fae3 	bl	8014704 <__lshift>
 801413e:	4621      	mov	r1, r4
 8014140:	4683      	mov	fp, r0
 8014142:	f000 fb4f 	bl	80147e4 <__mcmp>
 8014146:	2800      	cmp	r0, #0
 8014148:	9b08      	ldr	r3, [sp, #32]
 801414a:	dc02      	bgt.n	8014152 <_dtoa_r+0xaba>
 801414c:	d1de      	bne.n	801410c <_dtoa_r+0xa74>
 801414e:	07da      	lsls	r2, r3, #31
 8014150:	d5dc      	bpl.n	801410c <_dtoa_r+0xa74>
 8014152:	2b39      	cmp	r3, #57	; 0x39
 8014154:	d1d8      	bne.n	8014108 <_dtoa_r+0xa70>
 8014156:	2339      	movs	r3, #57	; 0x39
 8014158:	9a04      	ldr	r2, [sp, #16]
 801415a:	7013      	strb	r3, [r2, #0]
 801415c:	463b      	mov	r3, r7
 801415e:	461f      	mov	r7, r3
 8014160:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8014164:	3b01      	subs	r3, #1
 8014166:	2a39      	cmp	r2, #57	; 0x39
 8014168:	d050      	beq.n	801420c <_dtoa_r+0xb74>
 801416a:	3201      	adds	r2, #1
 801416c:	701a      	strb	r2, [r3, #0]
 801416e:	e747      	b.n	8014000 <_dtoa_r+0x968>
 8014170:	2a00      	cmp	r2, #0
 8014172:	dd03      	ble.n	801417c <_dtoa_r+0xae4>
 8014174:	2b39      	cmp	r3, #57	; 0x39
 8014176:	d0ee      	beq.n	8014156 <_dtoa_r+0xabe>
 8014178:	3301      	adds	r3, #1
 801417a:	e7c7      	b.n	801410c <_dtoa_r+0xa74>
 801417c:	9a08      	ldr	r2, [sp, #32]
 801417e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014180:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014184:	428a      	cmp	r2, r1
 8014186:	d02a      	beq.n	80141de <_dtoa_r+0xb46>
 8014188:	4659      	mov	r1, fp
 801418a:	2300      	movs	r3, #0
 801418c:	220a      	movs	r2, #10
 801418e:	4628      	mov	r0, r5
 8014190:	f000 f90c 	bl	80143ac <__multadd>
 8014194:	45b0      	cmp	r8, r6
 8014196:	4683      	mov	fp, r0
 8014198:	f04f 0300 	mov.w	r3, #0
 801419c:	f04f 020a 	mov.w	r2, #10
 80141a0:	4641      	mov	r1, r8
 80141a2:	4628      	mov	r0, r5
 80141a4:	d107      	bne.n	80141b6 <_dtoa_r+0xb1e>
 80141a6:	f000 f901 	bl	80143ac <__multadd>
 80141aa:	4680      	mov	r8, r0
 80141ac:	4606      	mov	r6, r0
 80141ae:	9b08      	ldr	r3, [sp, #32]
 80141b0:	3301      	adds	r3, #1
 80141b2:	9308      	str	r3, [sp, #32]
 80141b4:	e775      	b.n	80140a2 <_dtoa_r+0xa0a>
 80141b6:	f000 f8f9 	bl	80143ac <__multadd>
 80141ba:	4631      	mov	r1, r6
 80141bc:	4680      	mov	r8, r0
 80141be:	2300      	movs	r3, #0
 80141c0:	220a      	movs	r2, #10
 80141c2:	4628      	mov	r0, r5
 80141c4:	f000 f8f2 	bl	80143ac <__multadd>
 80141c8:	4606      	mov	r6, r0
 80141ca:	e7f0      	b.n	80141ae <_dtoa_r+0xb16>
 80141cc:	f1b9 0f00 	cmp.w	r9, #0
 80141d0:	bfcc      	ite	gt
 80141d2:	464f      	movgt	r7, r9
 80141d4:	2701      	movle	r7, #1
 80141d6:	f04f 0800 	mov.w	r8, #0
 80141da:	9a03      	ldr	r2, [sp, #12]
 80141dc:	4417      	add	r7, r2
 80141de:	4659      	mov	r1, fp
 80141e0:	2201      	movs	r2, #1
 80141e2:	4628      	mov	r0, r5
 80141e4:	9308      	str	r3, [sp, #32]
 80141e6:	f000 fa8d 	bl	8014704 <__lshift>
 80141ea:	4621      	mov	r1, r4
 80141ec:	4683      	mov	fp, r0
 80141ee:	f000 faf9 	bl	80147e4 <__mcmp>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	dcb2      	bgt.n	801415c <_dtoa_r+0xac4>
 80141f6:	d102      	bne.n	80141fe <_dtoa_r+0xb66>
 80141f8:	9b08      	ldr	r3, [sp, #32]
 80141fa:	07db      	lsls	r3, r3, #31
 80141fc:	d4ae      	bmi.n	801415c <_dtoa_r+0xac4>
 80141fe:	463b      	mov	r3, r7
 8014200:	461f      	mov	r7, r3
 8014202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014206:	2a30      	cmp	r2, #48	; 0x30
 8014208:	d0fa      	beq.n	8014200 <_dtoa_r+0xb68>
 801420a:	e6f9      	b.n	8014000 <_dtoa_r+0x968>
 801420c:	9a03      	ldr	r2, [sp, #12]
 801420e:	429a      	cmp	r2, r3
 8014210:	d1a5      	bne.n	801415e <_dtoa_r+0xac6>
 8014212:	2331      	movs	r3, #49	; 0x31
 8014214:	f10a 0a01 	add.w	sl, sl, #1
 8014218:	e779      	b.n	801410e <_dtoa_r+0xa76>
 801421a:	4b14      	ldr	r3, [pc, #80]	; (801426c <_dtoa_r+0xbd4>)
 801421c:	f7ff baa8 	b.w	8013770 <_dtoa_r+0xd8>
 8014220:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014222:	2b00      	cmp	r3, #0
 8014224:	f47f aa81 	bne.w	801372a <_dtoa_r+0x92>
 8014228:	4b11      	ldr	r3, [pc, #68]	; (8014270 <_dtoa_r+0xbd8>)
 801422a:	f7ff baa1 	b.w	8013770 <_dtoa_r+0xd8>
 801422e:	f1b9 0f00 	cmp.w	r9, #0
 8014232:	dc03      	bgt.n	801423c <_dtoa_r+0xba4>
 8014234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014236:	2b02      	cmp	r3, #2
 8014238:	f73f aecb 	bgt.w	8013fd2 <_dtoa_r+0x93a>
 801423c:	9f03      	ldr	r7, [sp, #12]
 801423e:	4621      	mov	r1, r4
 8014240:	4658      	mov	r0, fp
 8014242:	f7ff f99b 	bl	801357c <quorem>
 8014246:	9a03      	ldr	r2, [sp, #12]
 8014248:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801424c:	f807 3b01 	strb.w	r3, [r7], #1
 8014250:	1aba      	subs	r2, r7, r2
 8014252:	4591      	cmp	r9, r2
 8014254:	ddba      	ble.n	80141cc <_dtoa_r+0xb34>
 8014256:	4659      	mov	r1, fp
 8014258:	2300      	movs	r3, #0
 801425a:	220a      	movs	r2, #10
 801425c:	4628      	mov	r0, r5
 801425e:	f000 f8a5 	bl	80143ac <__multadd>
 8014262:	4683      	mov	fp, r0
 8014264:	e7eb      	b.n	801423e <_dtoa_r+0xba6>
 8014266:	bf00      	nop
 8014268:	080160d5 	.word	0x080160d5
 801426c:	08015e98 	.word	0x08015e98
 8014270:	0801606d 	.word	0x0801606d

08014274 <fiprintf>:
 8014274:	b40e      	push	{r1, r2, r3}
 8014276:	b503      	push	{r0, r1, lr}
 8014278:	4601      	mov	r1, r0
 801427a:	ab03      	add	r3, sp, #12
 801427c:	4805      	ldr	r0, [pc, #20]	; (8014294 <fiprintf+0x20>)
 801427e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014282:	6800      	ldr	r0, [r0, #0]
 8014284:	9301      	str	r3, [sp, #4]
 8014286:	f000 fe25 	bl	8014ed4 <_vfiprintf_r>
 801428a:	b002      	add	sp, #8
 801428c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014290:	b003      	add	sp, #12
 8014292:	4770      	bx	lr
 8014294:	20000810 	.word	0x20000810

08014298 <_localeconv_r>:
 8014298:	4800      	ldr	r0, [pc, #0]	; (801429c <_localeconv_r+0x4>)
 801429a:	4770      	bx	lr
 801429c:	20000964 	.word	0x20000964

080142a0 <malloc>:
 80142a0:	4b02      	ldr	r3, [pc, #8]	; (80142ac <malloc+0xc>)
 80142a2:	4601      	mov	r1, r0
 80142a4:	6818      	ldr	r0, [r3, #0]
 80142a6:	f000 bc1d 	b.w	8014ae4 <_malloc_r>
 80142aa:	bf00      	nop
 80142ac:	20000810 	.word	0x20000810

080142b0 <memchr>:
 80142b0:	4603      	mov	r3, r0
 80142b2:	b510      	push	{r4, lr}
 80142b4:	b2c9      	uxtb	r1, r1
 80142b6:	4402      	add	r2, r0
 80142b8:	4293      	cmp	r3, r2
 80142ba:	4618      	mov	r0, r3
 80142bc:	d101      	bne.n	80142c2 <memchr+0x12>
 80142be:	2000      	movs	r0, #0
 80142c0:	e003      	b.n	80142ca <memchr+0x1a>
 80142c2:	7804      	ldrb	r4, [r0, #0]
 80142c4:	3301      	adds	r3, #1
 80142c6:	428c      	cmp	r4, r1
 80142c8:	d1f6      	bne.n	80142b8 <memchr+0x8>
 80142ca:	bd10      	pop	{r4, pc}

080142cc <memcpy>:
 80142cc:	440a      	add	r2, r1
 80142ce:	4291      	cmp	r1, r2
 80142d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80142d4:	d100      	bne.n	80142d8 <memcpy+0xc>
 80142d6:	4770      	bx	lr
 80142d8:	b510      	push	{r4, lr}
 80142da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142de:	4291      	cmp	r1, r2
 80142e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142e4:	d1f9      	bne.n	80142da <memcpy+0xe>
 80142e6:	bd10      	pop	{r4, pc}

080142e8 <_Balloc>:
 80142e8:	b570      	push	{r4, r5, r6, lr}
 80142ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80142ec:	4604      	mov	r4, r0
 80142ee:	460d      	mov	r5, r1
 80142f0:	b976      	cbnz	r6, 8014310 <_Balloc+0x28>
 80142f2:	2010      	movs	r0, #16
 80142f4:	f7ff ffd4 	bl	80142a0 <malloc>
 80142f8:	4602      	mov	r2, r0
 80142fa:	6260      	str	r0, [r4, #36]	; 0x24
 80142fc:	b920      	cbnz	r0, 8014308 <_Balloc+0x20>
 80142fe:	2166      	movs	r1, #102	; 0x66
 8014300:	4b17      	ldr	r3, [pc, #92]	; (8014360 <_Balloc+0x78>)
 8014302:	4818      	ldr	r0, [pc, #96]	; (8014364 <_Balloc+0x7c>)
 8014304:	f7ff f91c 	bl	8013540 <__assert_func>
 8014308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801430c:	6006      	str	r6, [r0, #0]
 801430e:	60c6      	str	r6, [r0, #12]
 8014310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014312:	68f3      	ldr	r3, [r6, #12]
 8014314:	b183      	cbz	r3, 8014338 <_Balloc+0x50>
 8014316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801431e:	b9b8      	cbnz	r0, 8014350 <_Balloc+0x68>
 8014320:	2101      	movs	r1, #1
 8014322:	fa01 f605 	lsl.w	r6, r1, r5
 8014326:	1d72      	adds	r2, r6, #5
 8014328:	4620      	mov	r0, r4
 801432a:	0092      	lsls	r2, r2, #2
 801432c:	f000 fb5e 	bl	80149ec <_calloc_r>
 8014330:	b160      	cbz	r0, 801434c <_Balloc+0x64>
 8014332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014336:	e00e      	b.n	8014356 <_Balloc+0x6e>
 8014338:	2221      	movs	r2, #33	; 0x21
 801433a:	2104      	movs	r1, #4
 801433c:	4620      	mov	r0, r4
 801433e:	f000 fb55 	bl	80149ec <_calloc_r>
 8014342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014344:	60f0      	str	r0, [r6, #12]
 8014346:	68db      	ldr	r3, [r3, #12]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1e4      	bne.n	8014316 <_Balloc+0x2e>
 801434c:	2000      	movs	r0, #0
 801434e:	bd70      	pop	{r4, r5, r6, pc}
 8014350:	6802      	ldr	r2, [r0, #0]
 8014352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014356:	2300      	movs	r3, #0
 8014358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801435c:	e7f7      	b.n	801434e <_Balloc+0x66>
 801435e:	bf00      	nop
 8014360:	08015ebc 	.word	0x08015ebc
 8014364:	080160e6 	.word	0x080160e6

08014368 <_Bfree>:
 8014368:	b570      	push	{r4, r5, r6, lr}
 801436a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801436c:	4605      	mov	r5, r0
 801436e:	460c      	mov	r4, r1
 8014370:	b976      	cbnz	r6, 8014390 <_Bfree+0x28>
 8014372:	2010      	movs	r0, #16
 8014374:	f7ff ff94 	bl	80142a0 <malloc>
 8014378:	4602      	mov	r2, r0
 801437a:	6268      	str	r0, [r5, #36]	; 0x24
 801437c:	b920      	cbnz	r0, 8014388 <_Bfree+0x20>
 801437e:	218a      	movs	r1, #138	; 0x8a
 8014380:	4b08      	ldr	r3, [pc, #32]	; (80143a4 <_Bfree+0x3c>)
 8014382:	4809      	ldr	r0, [pc, #36]	; (80143a8 <_Bfree+0x40>)
 8014384:	f7ff f8dc 	bl	8013540 <__assert_func>
 8014388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801438c:	6006      	str	r6, [r0, #0]
 801438e:	60c6      	str	r6, [r0, #12]
 8014390:	b13c      	cbz	r4, 80143a2 <_Bfree+0x3a>
 8014392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014394:	6862      	ldr	r2, [r4, #4]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801439c:	6021      	str	r1, [r4, #0]
 801439e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80143a2:	bd70      	pop	{r4, r5, r6, pc}
 80143a4:	08015ebc 	.word	0x08015ebc
 80143a8:	080160e6 	.word	0x080160e6

080143ac <__multadd>:
 80143ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	4607      	mov	r7, r0
 80143b2:	460c      	mov	r4, r1
 80143b4:	461e      	mov	r6, r3
 80143b6:	2000      	movs	r0, #0
 80143b8:	690d      	ldr	r5, [r1, #16]
 80143ba:	f101 0c14 	add.w	ip, r1, #20
 80143be:	f8dc 3000 	ldr.w	r3, [ip]
 80143c2:	3001      	adds	r0, #1
 80143c4:	b299      	uxth	r1, r3
 80143c6:	fb02 6101 	mla	r1, r2, r1, r6
 80143ca:	0c1e      	lsrs	r6, r3, #16
 80143cc:	0c0b      	lsrs	r3, r1, #16
 80143ce:	fb02 3306 	mla	r3, r2, r6, r3
 80143d2:	b289      	uxth	r1, r1
 80143d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80143d8:	4285      	cmp	r5, r0
 80143da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80143de:	f84c 1b04 	str.w	r1, [ip], #4
 80143e2:	dcec      	bgt.n	80143be <__multadd+0x12>
 80143e4:	b30e      	cbz	r6, 801442a <__multadd+0x7e>
 80143e6:	68a3      	ldr	r3, [r4, #8]
 80143e8:	42ab      	cmp	r3, r5
 80143ea:	dc19      	bgt.n	8014420 <__multadd+0x74>
 80143ec:	6861      	ldr	r1, [r4, #4]
 80143ee:	4638      	mov	r0, r7
 80143f0:	3101      	adds	r1, #1
 80143f2:	f7ff ff79 	bl	80142e8 <_Balloc>
 80143f6:	4680      	mov	r8, r0
 80143f8:	b928      	cbnz	r0, 8014406 <__multadd+0x5a>
 80143fa:	4602      	mov	r2, r0
 80143fc:	21b5      	movs	r1, #181	; 0xb5
 80143fe:	4b0c      	ldr	r3, [pc, #48]	; (8014430 <__multadd+0x84>)
 8014400:	480c      	ldr	r0, [pc, #48]	; (8014434 <__multadd+0x88>)
 8014402:	f7ff f89d 	bl	8013540 <__assert_func>
 8014406:	6922      	ldr	r2, [r4, #16]
 8014408:	f104 010c 	add.w	r1, r4, #12
 801440c:	3202      	adds	r2, #2
 801440e:	0092      	lsls	r2, r2, #2
 8014410:	300c      	adds	r0, #12
 8014412:	f7ff ff5b 	bl	80142cc <memcpy>
 8014416:	4621      	mov	r1, r4
 8014418:	4638      	mov	r0, r7
 801441a:	f7ff ffa5 	bl	8014368 <_Bfree>
 801441e:	4644      	mov	r4, r8
 8014420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014424:	3501      	adds	r5, #1
 8014426:	615e      	str	r6, [r3, #20]
 8014428:	6125      	str	r5, [r4, #16]
 801442a:	4620      	mov	r0, r4
 801442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014430:	080160d5 	.word	0x080160d5
 8014434:	080160e6 	.word	0x080160e6

08014438 <__hi0bits>:
 8014438:	0c02      	lsrs	r2, r0, #16
 801443a:	0412      	lsls	r2, r2, #16
 801443c:	4603      	mov	r3, r0
 801443e:	b9ca      	cbnz	r2, 8014474 <__hi0bits+0x3c>
 8014440:	0403      	lsls	r3, r0, #16
 8014442:	2010      	movs	r0, #16
 8014444:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014448:	bf04      	itt	eq
 801444a:	021b      	lsleq	r3, r3, #8
 801444c:	3008      	addeq	r0, #8
 801444e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014452:	bf04      	itt	eq
 8014454:	011b      	lsleq	r3, r3, #4
 8014456:	3004      	addeq	r0, #4
 8014458:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801445c:	bf04      	itt	eq
 801445e:	009b      	lsleq	r3, r3, #2
 8014460:	3002      	addeq	r0, #2
 8014462:	2b00      	cmp	r3, #0
 8014464:	db05      	blt.n	8014472 <__hi0bits+0x3a>
 8014466:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801446a:	f100 0001 	add.w	r0, r0, #1
 801446e:	bf08      	it	eq
 8014470:	2020      	moveq	r0, #32
 8014472:	4770      	bx	lr
 8014474:	2000      	movs	r0, #0
 8014476:	e7e5      	b.n	8014444 <__hi0bits+0xc>

08014478 <__lo0bits>:
 8014478:	6803      	ldr	r3, [r0, #0]
 801447a:	4602      	mov	r2, r0
 801447c:	f013 0007 	ands.w	r0, r3, #7
 8014480:	d00b      	beq.n	801449a <__lo0bits+0x22>
 8014482:	07d9      	lsls	r1, r3, #31
 8014484:	d421      	bmi.n	80144ca <__lo0bits+0x52>
 8014486:	0798      	lsls	r0, r3, #30
 8014488:	bf49      	itett	mi
 801448a:	085b      	lsrmi	r3, r3, #1
 801448c:	089b      	lsrpl	r3, r3, #2
 801448e:	2001      	movmi	r0, #1
 8014490:	6013      	strmi	r3, [r2, #0]
 8014492:	bf5c      	itt	pl
 8014494:	2002      	movpl	r0, #2
 8014496:	6013      	strpl	r3, [r2, #0]
 8014498:	4770      	bx	lr
 801449a:	b299      	uxth	r1, r3
 801449c:	b909      	cbnz	r1, 80144a2 <__lo0bits+0x2a>
 801449e:	2010      	movs	r0, #16
 80144a0:	0c1b      	lsrs	r3, r3, #16
 80144a2:	b2d9      	uxtb	r1, r3
 80144a4:	b909      	cbnz	r1, 80144aa <__lo0bits+0x32>
 80144a6:	3008      	adds	r0, #8
 80144a8:	0a1b      	lsrs	r3, r3, #8
 80144aa:	0719      	lsls	r1, r3, #28
 80144ac:	bf04      	itt	eq
 80144ae:	091b      	lsreq	r3, r3, #4
 80144b0:	3004      	addeq	r0, #4
 80144b2:	0799      	lsls	r1, r3, #30
 80144b4:	bf04      	itt	eq
 80144b6:	089b      	lsreq	r3, r3, #2
 80144b8:	3002      	addeq	r0, #2
 80144ba:	07d9      	lsls	r1, r3, #31
 80144bc:	d403      	bmi.n	80144c6 <__lo0bits+0x4e>
 80144be:	085b      	lsrs	r3, r3, #1
 80144c0:	f100 0001 	add.w	r0, r0, #1
 80144c4:	d003      	beq.n	80144ce <__lo0bits+0x56>
 80144c6:	6013      	str	r3, [r2, #0]
 80144c8:	4770      	bx	lr
 80144ca:	2000      	movs	r0, #0
 80144cc:	4770      	bx	lr
 80144ce:	2020      	movs	r0, #32
 80144d0:	4770      	bx	lr
	...

080144d4 <__i2b>:
 80144d4:	b510      	push	{r4, lr}
 80144d6:	460c      	mov	r4, r1
 80144d8:	2101      	movs	r1, #1
 80144da:	f7ff ff05 	bl	80142e8 <_Balloc>
 80144de:	4602      	mov	r2, r0
 80144e0:	b928      	cbnz	r0, 80144ee <__i2b+0x1a>
 80144e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80144e6:	4b04      	ldr	r3, [pc, #16]	; (80144f8 <__i2b+0x24>)
 80144e8:	4804      	ldr	r0, [pc, #16]	; (80144fc <__i2b+0x28>)
 80144ea:	f7ff f829 	bl	8013540 <__assert_func>
 80144ee:	2301      	movs	r3, #1
 80144f0:	6144      	str	r4, [r0, #20]
 80144f2:	6103      	str	r3, [r0, #16]
 80144f4:	bd10      	pop	{r4, pc}
 80144f6:	bf00      	nop
 80144f8:	080160d5 	.word	0x080160d5
 80144fc:	080160e6 	.word	0x080160e6

08014500 <__multiply>:
 8014500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014504:	4691      	mov	r9, r2
 8014506:	690a      	ldr	r2, [r1, #16]
 8014508:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801450c:	460c      	mov	r4, r1
 801450e:	429a      	cmp	r2, r3
 8014510:	bfbe      	ittt	lt
 8014512:	460b      	movlt	r3, r1
 8014514:	464c      	movlt	r4, r9
 8014516:	4699      	movlt	r9, r3
 8014518:	6927      	ldr	r7, [r4, #16]
 801451a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801451e:	68a3      	ldr	r3, [r4, #8]
 8014520:	6861      	ldr	r1, [r4, #4]
 8014522:	eb07 060a 	add.w	r6, r7, sl
 8014526:	42b3      	cmp	r3, r6
 8014528:	b085      	sub	sp, #20
 801452a:	bfb8      	it	lt
 801452c:	3101      	addlt	r1, #1
 801452e:	f7ff fedb 	bl	80142e8 <_Balloc>
 8014532:	b930      	cbnz	r0, 8014542 <__multiply+0x42>
 8014534:	4602      	mov	r2, r0
 8014536:	f240 115d 	movw	r1, #349	; 0x15d
 801453a:	4b43      	ldr	r3, [pc, #268]	; (8014648 <__multiply+0x148>)
 801453c:	4843      	ldr	r0, [pc, #268]	; (801464c <__multiply+0x14c>)
 801453e:	f7fe ffff 	bl	8013540 <__assert_func>
 8014542:	f100 0514 	add.w	r5, r0, #20
 8014546:	462b      	mov	r3, r5
 8014548:	2200      	movs	r2, #0
 801454a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801454e:	4543      	cmp	r3, r8
 8014550:	d321      	bcc.n	8014596 <__multiply+0x96>
 8014552:	f104 0314 	add.w	r3, r4, #20
 8014556:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801455a:	f109 0314 	add.w	r3, r9, #20
 801455e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014562:	9202      	str	r2, [sp, #8]
 8014564:	1b3a      	subs	r2, r7, r4
 8014566:	3a15      	subs	r2, #21
 8014568:	f022 0203 	bic.w	r2, r2, #3
 801456c:	3204      	adds	r2, #4
 801456e:	f104 0115 	add.w	r1, r4, #21
 8014572:	428f      	cmp	r7, r1
 8014574:	bf38      	it	cc
 8014576:	2204      	movcc	r2, #4
 8014578:	9201      	str	r2, [sp, #4]
 801457a:	9a02      	ldr	r2, [sp, #8]
 801457c:	9303      	str	r3, [sp, #12]
 801457e:	429a      	cmp	r2, r3
 8014580:	d80c      	bhi.n	801459c <__multiply+0x9c>
 8014582:	2e00      	cmp	r6, #0
 8014584:	dd03      	ble.n	801458e <__multiply+0x8e>
 8014586:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801458a:	2b00      	cmp	r3, #0
 801458c:	d059      	beq.n	8014642 <__multiply+0x142>
 801458e:	6106      	str	r6, [r0, #16]
 8014590:	b005      	add	sp, #20
 8014592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014596:	f843 2b04 	str.w	r2, [r3], #4
 801459a:	e7d8      	b.n	801454e <__multiply+0x4e>
 801459c:	f8b3 a000 	ldrh.w	sl, [r3]
 80145a0:	f1ba 0f00 	cmp.w	sl, #0
 80145a4:	d023      	beq.n	80145ee <__multiply+0xee>
 80145a6:	46a9      	mov	r9, r5
 80145a8:	f04f 0c00 	mov.w	ip, #0
 80145ac:	f104 0e14 	add.w	lr, r4, #20
 80145b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80145b4:	f8d9 1000 	ldr.w	r1, [r9]
 80145b8:	fa1f fb82 	uxth.w	fp, r2
 80145bc:	b289      	uxth	r1, r1
 80145be:	fb0a 110b 	mla	r1, sl, fp, r1
 80145c2:	4461      	add	r1, ip
 80145c4:	f8d9 c000 	ldr.w	ip, [r9]
 80145c8:	0c12      	lsrs	r2, r2, #16
 80145ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80145ce:	fb0a c202 	mla	r2, sl, r2, ip
 80145d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80145d6:	b289      	uxth	r1, r1
 80145d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80145dc:	4577      	cmp	r7, lr
 80145de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80145e2:	f849 1b04 	str.w	r1, [r9], #4
 80145e6:	d8e3      	bhi.n	80145b0 <__multiply+0xb0>
 80145e8:	9a01      	ldr	r2, [sp, #4]
 80145ea:	f845 c002 	str.w	ip, [r5, r2]
 80145ee:	9a03      	ldr	r2, [sp, #12]
 80145f0:	3304      	adds	r3, #4
 80145f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80145f6:	f1b9 0f00 	cmp.w	r9, #0
 80145fa:	d020      	beq.n	801463e <__multiply+0x13e>
 80145fc:	46ae      	mov	lr, r5
 80145fe:	f04f 0a00 	mov.w	sl, #0
 8014602:	6829      	ldr	r1, [r5, #0]
 8014604:	f104 0c14 	add.w	ip, r4, #20
 8014608:	f8bc b000 	ldrh.w	fp, [ip]
 801460c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014610:	b289      	uxth	r1, r1
 8014612:	fb09 220b 	mla	r2, r9, fp, r2
 8014616:	4492      	add	sl, r2
 8014618:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801461c:	f84e 1b04 	str.w	r1, [lr], #4
 8014620:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014624:	f8be 1000 	ldrh.w	r1, [lr]
 8014628:	0c12      	lsrs	r2, r2, #16
 801462a:	fb09 1102 	mla	r1, r9, r2, r1
 801462e:	4567      	cmp	r7, ip
 8014630:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014634:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014638:	d8e6      	bhi.n	8014608 <__multiply+0x108>
 801463a:	9a01      	ldr	r2, [sp, #4]
 801463c:	50a9      	str	r1, [r5, r2]
 801463e:	3504      	adds	r5, #4
 8014640:	e79b      	b.n	801457a <__multiply+0x7a>
 8014642:	3e01      	subs	r6, #1
 8014644:	e79d      	b.n	8014582 <__multiply+0x82>
 8014646:	bf00      	nop
 8014648:	080160d5 	.word	0x080160d5
 801464c:	080160e6 	.word	0x080160e6

08014650 <__pow5mult>:
 8014650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014654:	4615      	mov	r5, r2
 8014656:	f012 0203 	ands.w	r2, r2, #3
 801465a:	4606      	mov	r6, r0
 801465c:	460f      	mov	r7, r1
 801465e:	d007      	beq.n	8014670 <__pow5mult+0x20>
 8014660:	4c25      	ldr	r4, [pc, #148]	; (80146f8 <__pow5mult+0xa8>)
 8014662:	3a01      	subs	r2, #1
 8014664:	2300      	movs	r3, #0
 8014666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801466a:	f7ff fe9f 	bl	80143ac <__multadd>
 801466e:	4607      	mov	r7, r0
 8014670:	10ad      	asrs	r5, r5, #2
 8014672:	d03d      	beq.n	80146f0 <__pow5mult+0xa0>
 8014674:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014676:	b97c      	cbnz	r4, 8014698 <__pow5mult+0x48>
 8014678:	2010      	movs	r0, #16
 801467a:	f7ff fe11 	bl	80142a0 <malloc>
 801467e:	4602      	mov	r2, r0
 8014680:	6270      	str	r0, [r6, #36]	; 0x24
 8014682:	b928      	cbnz	r0, 8014690 <__pow5mult+0x40>
 8014684:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014688:	4b1c      	ldr	r3, [pc, #112]	; (80146fc <__pow5mult+0xac>)
 801468a:	481d      	ldr	r0, [pc, #116]	; (8014700 <__pow5mult+0xb0>)
 801468c:	f7fe ff58 	bl	8013540 <__assert_func>
 8014690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014694:	6004      	str	r4, [r0, #0]
 8014696:	60c4      	str	r4, [r0, #12]
 8014698:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801469c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80146a0:	b94c      	cbnz	r4, 80146b6 <__pow5mult+0x66>
 80146a2:	f240 2171 	movw	r1, #625	; 0x271
 80146a6:	4630      	mov	r0, r6
 80146a8:	f7ff ff14 	bl	80144d4 <__i2b>
 80146ac:	2300      	movs	r3, #0
 80146ae:	4604      	mov	r4, r0
 80146b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80146b4:	6003      	str	r3, [r0, #0]
 80146b6:	f04f 0900 	mov.w	r9, #0
 80146ba:	07eb      	lsls	r3, r5, #31
 80146bc:	d50a      	bpl.n	80146d4 <__pow5mult+0x84>
 80146be:	4639      	mov	r1, r7
 80146c0:	4622      	mov	r2, r4
 80146c2:	4630      	mov	r0, r6
 80146c4:	f7ff ff1c 	bl	8014500 <__multiply>
 80146c8:	4680      	mov	r8, r0
 80146ca:	4639      	mov	r1, r7
 80146cc:	4630      	mov	r0, r6
 80146ce:	f7ff fe4b 	bl	8014368 <_Bfree>
 80146d2:	4647      	mov	r7, r8
 80146d4:	106d      	asrs	r5, r5, #1
 80146d6:	d00b      	beq.n	80146f0 <__pow5mult+0xa0>
 80146d8:	6820      	ldr	r0, [r4, #0]
 80146da:	b938      	cbnz	r0, 80146ec <__pow5mult+0x9c>
 80146dc:	4622      	mov	r2, r4
 80146de:	4621      	mov	r1, r4
 80146e0:	4630      	mov	r0, r6
 80146e2:	f7ff ff0d 	bl	8014500 <__multiply>
 80146e6:	6020      	str	r0, [r4, #0]
 80146e8:	f8c0 9000 	str.w	r9, [r0]
 80146ec:	4604      	mov	r4, r0
 80146ee:	e7e4      	b.n	80146ba <__pow5mult+0x6a>
 80146f0:	4638      	mov	r0, r7
 80146f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146f6:	bf00      	nop
 80146f8:	08016238 	.word	0x08016238
 80146fc:	08015ebc 	.word	0x08015ebc
 8014700:	080160e6 	.word	0x080160e6

08014704 <__lshift>:
 8014704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014708:	460c      	mov	r4, r1
 801470a:	4607      	mov	r7, r0
 801470c:	4691      	mov	r9, r2
 801470e:	6923      	ldr	r3, [r4, #16]
 8014710:	6849      	ldr	r1, [r1, #4]
 8014712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014716:	68a3      	ldr	r3, [r4, #8]
 8014718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801471c:	f108 0601 	add.w	r6, r8, #1
 8014720:	42b3      	cmp	r3, r6
 8014722:	db0b      	blt.n	801473c <__lshift+0x38>
 8014724:	4638      	mov	r0, r7
 8014726:	f7ff fddf 	bl	80142e8 <_Balloc>
 801472a:	4605      	mov	r5, r0
 801472c:	b948      	cbnz	r0, 8014742 <__lshift+0x3e>
 801472e:	4602      	mov	r2, r0
 8014730:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014734:	4b29      	ldr	r3, [pc, #164]	; (80147dc <__lshift+0xd8>)
 8014736:	482a      	ldr	r0, [pc, #168]	; (80147e0 <__lshift+0xdc>)
 8014738:	f7fe ff02 	bl	8013540 <__assert_func>
 801473c:	3101      	adds	r1, #1
 801473e:	005b      	lsls	r3, r3, #1
 8014740:	e7ee      	b.n	8014720 <__lshift+0x1c>
 8014742:	2300      	movs	r3, #0
 8014744:	f100 0114 	add.w	r1, r0, #20
 8014748:	f100 0210 	add.w	r2, r0, #16
 801474c:	4618      	mov	r0, r3
 801474e:	4553      	cmp	r3, sl
 8014750:	db37      	blt.n	80147c2 <__lshift+0xbe>
 8014752:	6920      	ldr	r0, [r4, #16]
 8014754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014758:	f104 0314 	add.w	r3, r4, #20
 801475c:	f019 091f 	ands.w	r9, r9, #31
 8014760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014764:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014768:	d02f      	beq.n	80147ca <__lshift+0xc6>
 801476a:	468a      	mov	sl, r1
 801476c:	f04f 0c00 	mov.w	ip, #0
 8014770:	f1c9 0e20 	rsb	lr, r9, #32
 8014774:	681a      	ldr	r2, [r3, #0]
 8014776:	fa02 f209 	lsl.w	r2, r2, r9
 801477a:	ea42 020c 	orr.w	r2, r2, ip
 801477e:	f84a 2b04 	str.w	r2, [sl], #4
 8014782:	f853 2b04 	ldr.w	r2, [r3], #4
 8014786:	4298      	cmp	r0, r3
 8014788:	fa22 fc0e 	lsr.w	ip, r2, lr
 801478c:	d8f2      	bhi.n	8014774 <__lshift+0x70>
 801478e:	1b03      	subs	r3, r0, r4
 8014790:	3b15      	subs	r3, #21
 8014792:	f023 0303 	bic.w	r3, r3, #3
 8014796:	3304      	adds	r3, #4
 8014798:	f104 0215 	add.w	r2, r4, #21
 801479c:	4290      	cmp	r0, r2
 801479e:	bf38      	it	cc
 80147a0:	2304      	movcc	r3, #4
 80147a2:	f841 c003 	str.w	ip, [r1, r3]
 80147a6:	f1bc 0f00 	cmp.w	ip, #0
 80147aa:	d001      	beq.n	80147b0 <__lshift+0xac>
 80147ac:	f108 0602 	add.w	r6, r8, #2
 80147b0:	3e01      	subs	r6, #1
 80147b2:	4638      	mov	r0, r7
 80147b4:	4621      	mov	r1, r4
 80147b6:	612e      	str	r6, [r5, #16]
 80147b8:	f7ff fdd6 	bl	8014368 <_Bfree>
 80147bc:	4628      	mov	r0, r5
 80147be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80147c6:	3301      	adds	r3, #1
 80147c8:	e7c1      	b.n	801474e <__lshift+0x4a>
 80147ca:	3904      	subs	r1, #4
 80147cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80147d0:	4298      	cmp	r0, r3
 80147d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80147d6:	d8f9      	bhi.n	80147cc <__lshift+0xc8>
 80147d8:	e7ea      	b.n	80147b0 <__lshift+0xac>
 80147da:	bf00      	nop
 80147dc:	080160d5 	.word	0x080160d5
 80147e0:	080160e6 	.word	0x080160e6

080147e4 <__mcmp>:
 80147e4:	4603      	mov	r3, r0
 80147e6:	690a      	ldr	r2, [r1, #16]
 80147e8:	6900      	ldr	r0, [r0, #16]
 80147ea:	b530      	push	{r4, r5, lr}
 80147ec:	1a80      	subs	r0, r0, r2
 80147ee:	d10d      	bne.n	801480c <__mcmp+0x28>
 80147f0:	3314      	adds	r3, #20
 80147f2:	3114      	adds	r1, #20
 80147f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80147f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80147fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014800:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014804:	4295      	cmp	r5, r2
 8014806:	d002      	beq.n	801480e <__mcmp+0x2a>
 8014808:	d304      	bcc.n	8014814 <__mcmp+0x30>
 801480a:	2001      	movs	r0, #1
 801480c:	bd30      	pop	{r4, r5, pc}
 801480e:	42a3      	cmp	r3, r4
 8014810:	d3f4      	bcc.n	80147fc <__mcmp+0x18>
 8014812:	e7fb      	b.n	801480c <__mcmp+0x28>
 8014814:	f04f 30ff 	mov.w	r0, #4294967295
 8014818:	e7f8      	b.n	801480c <__mcmp+0x28>
	...

0801481c <__mdiff>:
 801481c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	460d      	mov	r5, r1
 8014822:	4607      	mov	r7, r0
 8014824:	4611      	mov	r1, r2
 8014826:	4628      	mov	r0, r5
 8014828:	4614      	mov	r4, r2
 801482a:	f7ff ffdb 	bl	80147e4 <__mcmp>
 801482e:	1e06      	subs	r6, r0, #0
 8014830:	d111      	bne.n	8014856 <__mdiff+0x3a>
 8014832:	4631      	mov	r1, r6
 8014834:	4638      	mov	r0, r7
 8014836:	f7ff fd57 	bl	80142e8 <_Balloc>
 801483a:	4602      	mov	r2, r0
 801483c:	b928      	cbnz	r0, 801484a <__mdiff+0x2e>
 801483e:	f240 2132 	movw	r1, #562	; 0x232
 8014842:	4b3a      	ldr	r3, [pc, #232]	; (801492c <__mdiff+0x110>)
 8014844:	483a      	ldr	r0, [pc, #232]	; (8014930 <__mdiff+0x114>)
 8014846:	f7fe fe7b 	bl	8013540 <__assert_func>
 801484a:	2301      	movs	r3, #1
 801484c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014850:	4610      	mov	r0, r2
 8014852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014856:	bfa4      	itt	ge
 8014858:	4623      	movge	r3, r4
 801485a:	462c      	movge	r4, r5
 801485c:	4638      	mov	r0, r7
 801485e:	6861      	ldr	r1, [r4, #4]
 8014860:	bfa6      	itte	ge
 8014862:	461d      	movge	r5, r3
 8014864:	2600      	movge	r6, #0
 8014866:	2601      	movlt	r6, #1
 8014868:	f7ff fd3e 	bl	80142e8 <_Balloc>
 801486c:	4602      	mov	r2, r0
 801486e:	b918      	cbnz	r0, 8014878 <__mdiff+0x5c>
 8014870:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014874:	4b2d      	ldr	r3, [pc, #180]	; (801492c <__mdiff+0x110>)
 8014876:	e7e5      	b.n	8014844 <__mdiff+0x28>
 8014878:	f102 0814 	add.w	r8, r2, #20
 801487c:	46c2      	mov	sl, r8
 801487e:	f04f 0c00 	mov.w	ip, #0
 8014882:	6927      	ldr	r7, [r4, #16]
 8014884:	60c6      	str	r6, [r0, #12]
 8014886:	692e      	ldr	r6, [r5, #16]
 8014888:	f104 0014 	add.w	r0, r4, #20
 801488c:	f105 0914 	add.w	r9, r5, #20
 8014890:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014894:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014898:	3410      	adds	r4, #16
 801489a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801489e:	f859 3b04 	ldr.w	r3, [r9], #4
 80148a2:	fa1f f18b 	uxth.w	r1, fp
 80148a6:	448c      	add	ip, r1
 80148a8:	b299      	uxth	r1, r3
 80148aa:	0c1b      	lsrs	r3, r3, #16
 80148ac:	ebac 0101 	sub.w	r1, ip, r1
 80148b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80148b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80148b8:	b289      	uxth	r1, r1
 80148ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80148be:	454e      	cmp	r6, r9
 80148c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80148c4:	f84a 3b04 	str.w	r3, [sl], #4
 80148c8:	d8e7      	bhi.n	801489a <__mdiff+0x7e>
 80148ca:	1b73      	subs	r3, r6, r5
 80148cc:	3b15      	subs	r3, #21
 80148ce:	f023 0303 	bic.w	r3, r3, #3
 80148d2:	3515      	adds	r5, #21
 80148d4:	3304      	adds	r3, #4
 80148d6:	42ae      	cmp	r6, r5
 80148d8:	bf38      	it	cc
 80148da:	2304      	movcc	r3, #4
 80148dc:	4418      	add	r0, r3
 80148de:	4443      	add	r3, r8
 80148e0:	461e      	mov	r6, r3
 80148e2:	4605      	mov	r5, r0
 80148e4:	4575      	cmp	r5, lr
 80148e6:	d30e      	bcc.n	8014906 <__mdiff+0xea>
 80148e8:	f10e 0103 	add.w	r1, lr, #3
 80148ec:	1a09      	subs	r1, r1, r0
 80148ee:	f021 0103 	bic.w	r1, r1, #3
 80148f2:	3803      	subs	r0, #3
 80148f4:	4586      	cmp	lr, r0
 80148f6:	bf38      	it	cc
 80148f8:	2100      	movcc	r1, #0
 80148fa:	4419      	add	r1, r3
 80148fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014900:	b18b      	cbz	r3, 8014926 <__mdiff+0x10a>
 8014902:	6117      	str	r7, [r2, #16]
 8014904:	e7a4      	b.n	8014850 <__mdiff+0x34>
 8014906:	f855 8b04 	ldr.w	r8, [r5], #4
 801490a:	fa1f f188 	uxth.w	r1, r8
 801490e:	4461      	add	r1, ip
 8014910:	140c      	asrs	r4, r1, #16
 8014912:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014916:	b289      	uxth	r1, r1
 8014918:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801491c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8014920:	f846 1b04 	str.w	r1, [r6], #4
 8014924:	e7de      	b.n	80148e4 <__mdiff+0xc8>
 8014926:	3f01      	subs	r7, #1
 8014928:	e7e8      	b.n	80148fc <__mdiff+0xe0>
 801492a:	bf00      	nop
 801492c:	080160d5 	.word	0x080160d5
 8014930:	080160e6 	.word	0x080160e6

08014934 <__d2b>:
 8014934:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014938:	2101      	movs	r1, #1
 801493a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801493e:	4690      	mov	r8, r2
 8014940:	461d      	mov	r5, r3
 8014942:	f7ff fcd1 	bl	80142e8 <_Balloc>
 8014946:	4604      	mov	r4, r0
 8014948:	b930      	cbnz	r0, 8014958 <__d2b+0x24>
 801494a:	4602      	mov	r2, r0
 801494c:	f240 310a 	movw	r1, #778	; 0x30a
 8014950:	4b24      	ldr	r3, [pc, #144]	; (80149e4 <__d2b+0xb0>)
 8014952:	4825      	ldr	r0, [pc, #148]	; (80149e8 <__d2b+0xb4>)
 8014954:	f7fe fdf4 	bl	8013540 <__assert_func>
 8014958:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801495c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8014960:	bb2d      	cbnz	r5, 80149ae <__d2b+0x7a>
 8014962:	9301      	str	r3, [sp, #4]
 8014964:	f1b8 0300 	subs.w	r3, r8, #0
 8014968:	d026      	beq.n	80149b8 <__d2b+0x84>
 801496a:	4668      	mov	r0, sp
 801496c:	9300      	str	r3, [sp, #0]
 801496e:	f7ff fd83 	bl	8014478 <__lo0bits>
 8014972:	9900      	ldr	r1, [sp, #0]
 8014974:	b1f0      	cbz	r0, 80149b4 <__d2b+0x80>
 8014976:	9a01      	ldr	r2, [sp, #4]
 8014978:	f1c0 0320 	rsb	r3, r0, #32
 801497c:	fa02 f303 	lsl.w	r3, r2, r3
 8014980:	430b      	orrs	r3, r1
 8014982:	40c2      	lsrs	r2, r0
 8014984:	6163      	str	r3, [r4, #20]
 8014986:	9201      	str	r2, [sp, #4]
 8014988:	9b01      	ldr	r3, [sp, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	bf14      	ite	ne
 801498e:	2102      	movne	r1, #2
 8014990:	2101      	moveq	r1, #1
 8014992:	61a3      	str	r3, [r4, #24]
 8014994:	6121      	str	r1, [r4, #16]
 8014996:	b1c5      	cbz	r5, 80149ca <__d2b+0x96>
 8014998:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801499c:	4405      	add	r5, r0
 801499e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80149a2:	603d      	str	r5, [r7, #0]
 80149a4:	6030      	str	r0, [r6, #0]
 80149a6:	4620      	mov	r0, r4
 80149a8:	b002      	add	sp, #8
 80149aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80149b2:	e7d6      	b.n	8014962 <__d2b+0x2e>
 80149b4:	6161      	str	r1, [r4, #20]
 80149b6:	e7e7      	b.n	8014988 <__d2b+0x54>
 80149b8:	a801      	add	r0, sp, #4
 80149ba:	f7ff fd5d 	bl	8014478 <__lo0bits>
 80149be:	2101      	movs	r1, #1
 80149c0:	9b01      	ldr	r3, [sp, #4]
 80149c2:	6121      	str	r1, [r4, #16]
 80149c4:	6163      	str	r3, [r4, #20]
 80149c6:	3020      	adds	r0, #32
 80149c8:	e7e5      	b.n	8014996 <__d2b+0x62>
 80149ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80149ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80149d2:	6038      	str	r0, [r7, #0]
 80149d4:	6918      	ldr	r0, [r3, #16]
 80149d6:	f7ff fd2f 	bl	8014438 <__hi0bits>
 80149da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80149de:	6031      	str	r1, [r6, #0]
 80149e0:	e7e1      	b.n	80149a6 <__d2b+0x72>
 80149e2:	bf00      	nop
 80149e4:	080160d5 	.word	0x080160d5
 80149e8:	080160e6 	.word	0x080160e6

080149ec <_calloc_r>:
 80149ec:	b570      	push	{r4, r5, r6, lr}
 80149ee:	fba1 5402 	umull	r5, r4, r1, r2
 80149f2:	b934      	cbnz	r4, 8014a02 <_calloc_r+0x16>
 80149f4:	4629      	mov	r1, r5
 80149f6:	f000 f875 	bl	8014ae4 <_malloc_r>
 80149fa:	4606      	mov	r6, r0
 80149fc:	b928      	cbnz	r0, 8014a0a <_calloc_r+0x1e>
 80149fe:	4630      	mov	r0, r6
 8014a00:	bd70      	pop	{r4, r5, r6, pc}
 8014a02:	220c      	movs	r2, #12
 8014a04:	2600      	movs	r6, #0
 8014a06:	6002      	str	r2, [r0, #0]
 8014a08:	e7f9      	b.n	80149fe <_calloc_r+0x12>
 8014a0a:	462a      	mov	r2, r5
 8014a0c:	4621      	mov	r1, r4
 8014a0e:	f7fe f82d 	bl	8012a6c <memset>
 8014a12:	e7f4      	b.n	80149fe <_calloc_r+0x12>

08014a14 <_free_r>:
 8014a14:	b538      	push	{r3, r4, r5, lr}
 8014a16:	4605      	mov	r5, r0
 8014a18:	2900      	cmp	r1, #0
 8014a1a:	d040      	beq.n	8014a9e <_free_r+0x8a>
 8014a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a20:	1f0c      	subs	r4, r1, #4
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	bfb8      	it	lt
 8014a26:	18e4      	addlt	r4, r4, r3
 8014a28:	f000 fea4 	bl	8015774 <__malloc_lock>
 8014a2c:	4a1c      	ldr	r2, [pc, #112]	; (8014aa0 <_free_r+0x8c>)
 8014a2e:	6813      	ldr	r3, [r2, #0]
 8014a30:	b933      	cbnz	r3, 8014a40 <_free_r+0x2c>
 8014a32:	6063      	str	r3, [r4, #4]
 8014a34:	6014      	str	r4, [r2, #0]
 8014a36:	4628      	mov	r0, r5
 8014a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a3c:	f000 bea0 	b.w	8015780 <__malloc_unlock>
 8014a40:	42a3      	cmp	r3, r4
 8014a42:	d908      	bls.n	8014a56 <_free_r+0x42>
 8014a44:	6820      	ldr	r0, [r4, #0]
 8014a46:	1821      	adds	r1, r4, r0
 8014a48:	428b      	cmp	r3, r1
 8014a4a:	bf01      	itttt	eq
 8014a4c:	6819      	ldreq	r1, [r3, #0]
 8014a4e:	685b      	ldreq	r3, [r3, #4]
 8014a50:	1809      	addeq	r1, r1, r0
 8014a52:	6021      	streq	r1, [r4, #0]
 8014a54:	e7ed      	b.n	8014a32 <_free_r+0x1e>
 8014a56:	461a      	mov	r2, r3
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	b10b      	cbz	r3, 8014a60 <_free_r+0x4c>
 8014a5c:	42a3      	cmp	r3, r4
 8014a5e:	d9fa      	bls.n	8014a56 <_free_r+0x42>
 8014a60:	6811      	ldr	r1, [r2, #0]
 8014a62:	1850      	adds	r0, r2, r1
 8014a64:	42a0      	cmp	r0, r4
 8014a66:	d10b      	bne.n	8014a80 <_free_r+0x6c>
 8014a68:	6820      	ldr	r0, [r4, #0]
 8014a6a:	4401      	add	r1, r0
 8014a6c:	1850      	adds	r0, r2, r1
 8014a6e:	4283      	cmp	r3, r0
 8014a70:	6011      	str	r1, [r2, #0]
 8014a72:	d1e0      	bne.n	8014a36 <_free_r+0x22>
 8014a74:	6818      	ldr	r0, [r3, #0]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	4401      	add	r1, r0
 8014a7a:	6011      	str	r1, [r2, #0]
 8014a7c:	6053      	str	r3, [r2, #4]
 8014a7e:	e7da      	b.n	8014a36 <_free_r+0x22>
 8014a80:	d902      	bls.n	8014a88 <_free_r+0x74>
 8014a82:	230c      	movs	r3, #12
 8014a84:	602b      	str	r3, [r5, #0]
 8014a86:	e7d6      	b.n	8014a36 <_free_r+0x22>
 8014a88:	6820      	ldr	r0, [r4, #0]
 8014a8a:	1821      	adds	r1, r4, r0
 8014a8c:	428b      	cmp	r3, r1
 8014a8e:	bf01      	itttt	eq
 8014a90:	6819      	ldreq	r1, [r3, #0]
 8014a92:	685b      	ldreq	r3, [r3, #4]
 8014a94:	1809      	addeq	r1, r1, r0
 8014a96:	6021      	streq	r1, [r4, #0]
 8014a98:	6063      	str	r3, [r4, #4]
 8014a9a:	6054      	str	r4, [r2, #4]
 8014a9c:	e7cb      	b.n	8014a36 <_free_r+0x22>
 8014a9e:	bd38      	pop	{r3, r4, r5, pc}
 8014aa0:	20003a7c 	.word	0x20003a7c

08014aa4 <sbrk_aligned>:
 8014aa4:	b570      	push	{r4, r5, r6, lr}
 8014aa6:	4e0e      	ldr	r6, [pc, #56]	; (8014ae0 <sbrk_aligned+0x3c>)
 8014aa8:	460c      	mov	r4, r1
 8014aaa:	6831      	ldr	r1, [r6, #0]
 8014aac:	4605      	mov	r5, r0
 8014aae:	b911      	cbnz	r1, 8014ab6 <sbrk_aligned+0x12>
 8014ab0:	f000 fb40 	bl	8015134 <_sbrk_r>
 8014ab4:	6030      	str	r0, [r6, #0]
 8014ab6:	4621      	mov	r1, r4
 8014ab8:	4628      	mov	r0, r5
 8014aba:	f000 fb3b 	bl	8015134 <_sbrk_r>
 8014abe:	1c43      	adds	r3, r0, #1
 8014ac0:	d00a      	beq.n	8014ad8 <sbrk_aligned+0x34>
 8014ac2:	1cc4      	adds	r4, r0, #3
 8014ac4:	f024 0403 	bic.w	r4, r4, #3
 8014ac8:	42a0      	cmp	r0, r4
 8014aca:	d007      	beq.n	8014adc <sbrk_aligned+0x38>
 8014acc:	1a21      	subs	r1, r4, r0
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f000 fb30 	bl	8015134 <_sbrk_r>
 8014ad4:	3001      	adds	r0, #1
 8014ad6:	d101      	bne.n	8014adc <sbrk_aligned+0x38>
 8014ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8014adc:	4620      	mov	r0, r4
 8014ade:	bd70      	pop	{r4, r5, r6, pc}
 8014ae0:	20003a80 	.word	0x20003a80

08014ae4 <_malloc_r>:
 8014ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae8:	1ccd      	adds	r5, r1, #3
 8014aea:	f025 0503 	bic.w	r5, r5, #3
 8014aee:	3508      	adds	r5, #8
 8014af0:	2d0c      	cmp	r5, #12
 8014af2:	bf38      	it	cc
 8014af4:	250c      	movcc	r5, #12
 8014af6:	2d00      	cmp	r5, #0
 8014af8:	4607      	mov	r7, r0
 8014afa:	db01      	blt.n	8014b00 <_malloc_r+0x1c>
 8014afc:	42a9      	cmp	r1, r5
 8014afe:	d905      	bls.n	8014b0c <_malloc_r+0x28>
 8014b00:	230c      	movs	r3, #12
 8014b02:	2600      	movs	r6, #0
 8014b04:	603b      	str	r3, [r7, #0]
 8014b06:	4630      	mov	r0, r6
 8014b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b0c:	4e2e      	ldr	r6, [pc, #184]	; (8014bc8 <_malloc_r+0xe4>)
 8014b0e:	f000 fe31 	bl	8015774 <__malloc_lock>
 8014b12:	6833      	ldr	r3, [r6, #0]
 8014b14:	461c      	mov	r4, r3
 8014b16:	bb34      	cbnz	r4, 8014b66 <_malloc_r+0x82>
 8014b18:	4629      	mov	r1, r5
 8014b1a:	4638      	mov	r0, r7
 8014b1c:	f7ff ffc2 	bl	8014aa4 <sbrk_aligned>
 8014b20:	1c43      	adds	r3, r0, #1
 8014b22:	4604      	mov	r4, r0
 8014b24:	d14d      	bne.n	8014bc2 <_malloc_r+0xde>
 8014b26:	6834      	ldr	r4, [r6, #0]
 8014b28:	4626      	mov	r6, r4
 8014b2a:	2e00      	cmp	r6, #0
 8014b2c:	d140      	bne.n	8014bb0 <_malloc_r+0xcc>
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	4631      	mov	r1, r6
 8014b32:	4638      	mov	r0, r7
 8014b34:	eb04 0803 	add.w	r8, r4, r3
 8014b38:	f000 fafc 	bl	8015134 <_sbrk_r>
 8014b3c:	4580      	cmp	r8, r0
 8014b3e:	d13a      	bne.n	8014bb6 <_malloc_r+0xd2>
 8014b40:	6821      	ldr	r1, [r4, #0]
 8014b42:	3503      	adds	r5, #3
 8014b44:	1a6d      	subs	r5, r5, r1
 8014b46:	f025 0503 	bic.w	r5, r5, #3
 8014b4a:	3508      	adds	r5, #8
 8014b4c:	2d0c      	cmp	r5, #12
 8014b4e:	bf38      	it	cc
 8014b50:	250c      	movcc	r5, #12
 8014b52:	4638      	mov	r0, r7
 8014b54:	4629      	mov	r1, r5
 8014b56:	f7ff ffa5 	bl	8014aa4 <sbrk_aligned>
 8014b5a:	3001      	adds	r0, #1
 8014b5c:	d02b      	beq.n	8014bb6 <_malloc_r+0xd2>
 8014b5e:	6823      	ldr	r3, [r4, #0]
 8014b60:	442b      	add	r3, r5
 8014b62:	6023      	str	r3, [r4, #0]
 8014b64:	e00e      	b.n	8014b84 <_malloc_r+0xa0>
 8014b66:	6822      	ldr	r2, [r4, #0]
 8014b68:	1b52      	subs	r2, r2, r5
 8014b6a:	d41e      	bmi.n	8014baa <_malloc_r+0xc6>
 8014b6c:	2a0b      	cmp	r2, #11
 8014b6e:	d916      	bls.n	8014b9e <_malloc_r+0xba>
 8014b70:	1961      	adds	r1, r4, r5
 8014b72:	42a3      	cmp	r3, r4
 8014b74:	6025      	str	r5, [r4, #0]
 8014b76:	bf18      	it	ne
 8014b78:	6059      	strne	r1, [r3, #4]
 8014b7a:	6863      	ldr	r3, [r4, #4]
 8014b7c:	bf08      	it	eq
 8014b7e:	6031      	streq	r1, [r6, #0]
 8014b80:	5162      	str	r2, [r4, r5]
 8014b82:	604b      	str	r3, [r1, #4]
 8014b84:	4638      	mov	r0, r7
 8014b86:	f104 060b 	add.w	r6, r4, #11
 8014b8a:	f000 fdf9 	bl	8015780 <__malloc_unlock>
 8014b8e:	f026 0607 	bic.w	r6, r6, #7
 8014b92:	1d23      	adds	r3, r4, #4
 8014b94:	1af2      	subs	r2, r6, r3
 8014b96:	d0b6      	beq.n	8014b06 <_malloc_r+0x22>
 8014b98:	1b9b      	subs	r3, r3, r6
 8014b9a:	50a3      	str	r3, [r4, r2]
 8014b9c:	e7b3      	b.n	8014b06 <_malloc_r+0x22>
 8014b9e:	6862      	ldr	r2, [r4, #4]
 8014ba0:	42a3      	cmp	r3, r4
 8014ba2:	bf0c      	ite	eq
 8014ba4:	6032      	streq	r2, [r6, #0]
 8014ba6:	605a      	strne	r2, [r3, #4]
 8014ba8:	e7ec      	b.n	8014b84 <_malloc_r+0xa0>
 8014baa:	4623      	mov	r3, r4
 8014bac:	6864      	ldr	r4, [r4, #4]
 8014bae:	e7b2      	b.n	8014b16 <_malloc_r+0x32>
 8014bb0:	4634      	mov	r4, r6
 8014bb2:	6876      	ldr	r6, [r6, #4]
 8014bb4:	e7b9      	b.n	8014b2a <_malloc_r+0x46>
 8014bb6:	230c      	movs	r3, #12
 8014bb8:	4638      	mov	r0, r7
 8014bba:	603b      	str	r3, [r7, #0]
 8014bbc:	f000 fde0 	bl	8015780 <__malloc_unlock>
 8014bc0:	e7a1      	b.n	8014b06 <_malloc_r+0x22>
 8014bc2:	6025      	str	r5, [r4, #0]
 8014bc4:	e7de      	b.n	8014b84 <_malloc_r+0xa0>
 8014bc6:	bf00      	nop
 8014bc8:	20003a7c 	.word	0x20003a7c

08014bcc <__ssputs_r>:
 8014bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bd0:	688e      	ldr	r6, [r1, #8]
 8014bd2:	4682      	mov	sl, r0
 8014bd4:	429e      	cmp	r6, r3
 8014bd6:	460c      	mov	r4, r1
 8014bd8:	4690      	mov	r8, r2
 8014bda:	461f      	mov	r7, r3
 8014bdc:	d838      	bhi.n	8014c50 <__ssputs_r+0x84>
 8014bde:	898a      	ldrh	r2, [r1, #12]
 8014be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014be4:	d032      	beq.n	8014c4c <__ssputs_r+0x80>
 8014be6:	6825      	ldr	r5, [r4, #0]
 8014be8:	6909      	ldr	r1, [r1, #16]
 8014bea:	3301      	adds	r3, #1
 8014bec:	eba5 0901 	sub.w	r9, r5, r1
 8014bf0:	6965      	ldr	r5, [r4, #20]
 8014bf2:	444b      	add	r3, r9
 8014bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014bfc:	106d      	asrs	r5, r5, #1
 8014bfe:	429d      	cmp	r5, r3
 8014c00:	bf38      	it	cc
 8014c02:	461d      	movcc	r5, r3
 8014c04:	0553      	lsls	r3, r2, #21
 8014c06:	d531      	bpl.n	8014c6c <__ssputs_r+0xa0>
 8014c08:	4629      	mov	r1, r5
 8014c0a:	f7ff ff6b 	bl	8014ae4 <_malloc_r>
 8014c0e:	4606      	mov	r6, r0
 8014c10:	b950      	cbnz	r0, 8014c28 <__ssputs_r+0x5c>
 8014c12:	230c      	movs	r3, #12
 8014c14:	f04f 30ff 	mov.w	r0, #4294967295
 8014c18:	f8ca 3000 	str.w	r3, [sl]
 8014c1c:	89a3      	ldrh	r3, [r4, #12]
 8014c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c22:	81a3      	strh	r3, [r4, #12]
 8014c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c28:	464a      	mov	r2, r9
 8014c2a:	6921      	ldr	r1, [r4, #16]
 8014c2c:	f7ff fb4e 	bl	80142cc <memcpy>
 8014c30:	89a3      	ldrh	r3, [r4, #12]
 8014c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c3a:	81a3      	strh	r3, [r4, #12]
 8014c3c:	6126      	str	r6, [r4, #16]
 8014c3e:	444e      	add	r6, r9
 8014c40:	6026      	str	r6, [r4, #0]
 8014c42:	463e      	mov	r6, r7
 8014c44:	6165      	str	r5, [r4, #20]
 8014c46:	eba5 0509 	sub.w	r5, r5, r9
 8014c4a:	60a5      	str	r5, [r4, #8]
 8014c4c:	42be      	cmp	r6, r7
 8014c4e:	d900      	bls.n	8014c52 <__ssputs_r+0x86>
 8014c50:	463e      	mov	r6, r7
 8014c52:	4632      	mov	r2, r6
 8014c54:	4641      	mov	r1, r8
 8014c56:	6820      	ldr	r0, [r4, #0]
 8014c58:	f000 fd72 	bl	8015740 <memmove>
 8014c5c:	68a3      	ldr	r3, [r4, #8]
 8014c5e:	2000      	movs	r0, #0
 8014c60:	1b9b      	subs	r3, r3, r6
 8014c62:	60a3      	str	r3, [r4, #8]
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	4433      	add	r3, r6
 8014c68:	6023      	str	r3, [r4, #0]
 8014c6a:	e7db      	b.n	8014c24 <__ssputs_r+0x58>
 8014c6c:	462a      	mov	r2, r5
 8014c6e:	f000 fd8d 	bl	801578c <_realloc_r>
 8014c72:	4606      	mov	r6, r0
 8014c74:	2800      	cmp	r0, #0
 8014c76:	d1e1      	bne.n	8014c3c <__ssputs_r+0x70>
 8014c78:	4650      	mov	r0, sl
 8014c7a:	6921      	ldr	r1, [r4, #16]
 8014c7c:	f7ff feca 	bl	8014a14 <_free_r>
 8014c80:	e7c7      	b.n	8014c12 <__ssputs_r+0x46>
	...

08014c84 <_svfiprintf_r>:
 8014c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c88:	4698      	mov	r8, r3
 8014c8a:	898b      	ldrh	r3, [r1, #12]
 8014c8c:	4607      	mov	r7, r0
 8014c8e:	061b      	lsls	r3, r3, #24
 8014c90:	460d      	mov	r5, r1
 8014c92:	4614      	mov	r4, r2
 8014c94:	b09d      	sub	sp, #116	; 0x74
 8014c96:	d50e      	bpl.n	8014cb6 <_svfiprintf_r+0x32>
 8014c98:	690b      	ldr	r3, [r1, #16]
 8014c9a:	b963      	cbnz	r3, 8014cb6 <_svfiprintf_r+0x32>
 8014c9c:	2140      	movs	r1, #64	; 0x40
 8014c9e:	f7ff ff21 	bl	8014ae4 <_malloc_r>
 8014ca2:	6028      	str	r0, [r5, #0]
 8014ca4:	6128      	str	r0, [r5, #16]
 8014ca6:	b920      	cbnz	r0, 8014cb2 <_svfiprintf_r+0x2e>
 8014ca8:	230c      	movs	r3, #12
 8014caa:	603b      	str	r3, [r7, #0]
 8014cac:	f04f 30ff 	mov.w	r0, #4294967295
 8014cb0:	e0d1      	b.n	8014e56 <_svfiprintf_r+0x1d2>
 8014cb2:	2340      	movs	r3, #64	; 0x40
 8014cb4:	616b      	str	r3, [r5, #20]
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8014cba:	2320      	movs	r3, #32
 8014cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cc0:	2330      	movs	r3, #48	; 0x30
 8014cc2:	f04f 0901 	mov.w	r9, #1
 8014cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014cca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014e70 <_svfiprintf_r+0x1ec>
 8014cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cd2:	4623      	mov	r3, r4
 8014cd4:	469a      	mov	sl, r3
 8014cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cda:	b10a      	cbz	r2, 8014ce0 <_svfiprintf_r+0x5c>
 8014cdc:	2a25      	cmp	r2, #37	; 0x25
 8014cde:	d1f9      	bne.n	8014cd4 <_svfiprintf_r+0x50>
 8014ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8014ce4:	d00b      	beq.n	8014cfe <_svfiprintf_r+0x7a>
 8014ce6:	465b      	mov	r3, fp
 8014ce8:	4622      	mov	r2, r4
 8014cea:	4629      	mov	r1, r5
 8014cec:	4638      	mov	r0, r7
 8014cee:	f7ff ff6d 	bl	8014bcc <__ssputs_r>
 8014cf2:	3001      	adds	r0, #1
 8014cf4:	f000 80aa 	beq.w	8014e4c <_svfiprintf_r+0x1c8>
 8014cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cfa:	445a      	add	r2, fp
 8014cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8014cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	f000 80a2 	beq.w	8014e4c <_svfiprintf_r+0x1c8>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d12:	f10a 0a01 	add.w	sl, sl, #1
 8014d16:	9304      	str	r3, [sp, #16]
 8014d18:	9307      	str	r3, [sp, #28]
 8014d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8014d20:	4654      	mov	r4, sl
 8014d22:	2205      	movs	r2, #5
 8014d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d28:	4851      	ldr	r0, [pc, #324]	; (8014e70 <_svfiprintf_r+0x1ec>)
 8014d2a:	f7ff fac1 	bl	80142b0 <memchr>
 8014d2e:	9a04      	ldr	r2, [sp, #16]
 8014d30:	b9d8      	cbnz	r0, 8014d6a <_svfiprintf_r+0xe6>
 8014d32:	06d0      	lsls	r0, r2, #27
 8014d34:	bf44      	itt	mi
 8014d36:	2320      	movmi	r3, #32
 8014d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d3c:	0711      	lsls	r1, r2, #28
 8014d3e:	bf44      	itt	mi
 8014d40:	232b      	movmi	r3, #43	; 0x2b
 8014d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d46:	f89a 3000 	ldrb.w	r3, [sl]
 8014d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8014d4c:	d015      	beq.n	8014d7a <_svfiprintf_r+0xf6>
 8014d4e:	4654      	mov	r4, sl
 8014d50:	2000      	movs	r0, #0
 8014d52:	f04f 0c0a 	mov.w	ip, #10
 8014d56:	9a07      	ldr	r2, [sp, #28]
 8014d58:	4621      	mov	r1, r4
 8014d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d5e:	3b30      	subs	r3, #48	; 0x30
 8014d60:	2b09      	cmp	r3, #9
 8014d62:	d94e      	bls.n	8014e02 <_svfiprintf_r+0x17e>
 8014d64:	b1b0      	cbz	r0, 8014d94 <_svfiprintf_r+0x110>
 8014d66:	9207      	str	r2, [sp, #28]
 8014d68:	e014      	b.n	8014d94 <_svfiprintf_r+0x110>
 8014d6a:	eba0 0308 	sub.w	r3, r0, r8
 8014d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8014d72:	4313      	orrs	r3, r2
 8014d74:	46a2      	mov	sl, r4
 8014d76:	9304      	str	r3, [sp, #16]
 8014d78:	e7d2      	b.n	8014d20 <_svfiprintf_r+0x9c>
 8014d7a:	9b03      	ldr	r3, [sp, #12]
 8014d7c:	1d19      	adds	r1, r3, #4
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	9103      	str	r1, [sp, #12]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	bfbb      	ittet	lt
 8014d86:	425b      	neglt	r3, r3
 8014d88:	f042 0202 	orrlt.w	r2, r2, #2
 8014d8c:	9307      	strge	r3, [sp, #28]
 8014d8e:	9307      	strlt	r3, [sp, #28]
 8014d90:	bfb8      	it	lt
 8014d92:	9204      	strlt	r2, [sp, #16]
 8014d94:	7823      	ldrb	r3, [r4, #0]
 8014d96:	2b2e      	cmp	r3, #46	; 0x2e
 8014d98:	d10c      	bne.n	8014db4 <_svfiprintf_r+0x130>
 8014d9a:	7863      	ldrb	r3, [r4, #1]
 8014d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8014d9e:	d135      	bne.n	8014e0c <_svfiprintf_r+0x188>
 8014da0:	9b03      	ldr	r3, [sp, #12]
 8014da2:	3402      	adds	r4, #2
 8014da4:	1d1a      	adds	r2, r3, #4
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	9203      	str	r2, [sp, #12]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	bfb8      	it	lt
 8014dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8014db2:	9305      	str	r3, [sp, #20]
 8014db4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8014e74 <_svfiprintf_r+0x1f0>
 8014db8:	2203      	movs	r2, #3
 8014dba:	4650      	mov	r0, sl
 8014dbc:	7821      	ldrb	r1, [r4, #0]
 8014dbe:	f7ff fa77 	bl	80142b0 <memchr>
 8014dc2:	b140      	cbz	r0, 8014dd6 <_svfiprintf_r+0x152>
 8014dc4:	2340      	movs	r3, #64	; 0x40
 8014dc6:	eba0 000a 	sub.w	r0, r0, sl
 8014dca:	fa03 f000 	lsl.w	r0, r3, r0
 8014dce:	9b04      	ldr	r3, [sp, #16]
 8014dd0:	3401      	adds	r4, #1
 8014dd2:	4303      	orrs	r3, r0
 8014dd4:	9304      	str	r3, [sp, #16]
 8014dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dda:	2206      	movs	r2, #6
 8014ddc:	4826      	ldr	r0, [pc, #152]	; (8014e78 <_svfiprintf_r+0x1f4>)
 8014dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014de2:	f7ff fa65 	bl	80142b0 <memchr>
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d038      	beq.n	8014e5c <_svfiprintf_r+0x1d8>
 8014dea:	4b24      	ldr	r3, [pc, #144]	; (8014e7c <_svfiprintf_r+0x1f8>)
 8014dec:	bb1b      	cbnz	r3, 8014e36 <_svfiprintf_r+0x1b2>
 8014dee:	9b03      	ldr	r3, [sp, #12]
 8014df0:	3307      	adds	r3, #7
 8014df2:	f023 0307 	bic.w	r3, r3, #7
 8014df6:	3308      	adds	r3, #8
 8014df8:	9303      	str	r3, [sp, #12]
 8014dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dfc:	4433      	add	r3, r6
 8014dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8014e00:	e767      	b.n	8014cd2 <_svfiprintf_r+0x4e>
 8014e02:	460c      	mov	r4, r1
 8014e04:	2001      	movs	r0, #1
 8014e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e0a:	e7a5      	b.n	8014d58 <_svfiprintf_r+0xd4>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	f04f 0c0a 	mov.w	ip, #10
 8014e12:	4619      	mov	r1, r3
 8014e14:	3401      	adds	r4, #1
 8014e16:	9305      	str	r3, [sp, #20]
 8014e18:	4620      	mov	r0, r4
 8014e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e1e:	3a30      	subs	r2, #48	; 0x30
 8014e20:	2a09      	cmp	r2, #9
 8014e22:	d903      	bls.n	8014e2c <_svfiprintf_r+0x1a8>
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d0c5      	beq.n	8014db4 <_svfiprintf_r+0x130>
 8014e28:	9105      	str	r1, [sp, #20]
 8014e2a:	e7c3      	b.n	8014db4 <_svfiprintf_r+0x130>
 8014e2c:	4604      	mov	r4, r0
 8014e2e:	2301      	movs	r3, #1
 8014e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e34:	e7f0      	b.n	8014e18 <_svfiprintf_r+0x194>
 8014e36:	ab03      	add	r3, sp, #12
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	462a      	mov	r2, r5
 8014e3c:	4638      	mov	r0, r7
 8014e3e:	4b10      	ldr	r3, [pc, #64]	; (8014e80 <_svfiprintf_r+0x1fc>)
 8014e40:	a904      	add	r1, sp, #16
 8014e42:	f7fd feb9 	bl	8012bb8 <_printf_float>
 8014e46:	1c42      	adds	r2, r0, #1
 8014e48:	4606      	mov	r6, r0
 8014e4a:	d1d6      	bne.n	8014dfa <_svfiprintf_r+0x176>
 8014e4c:	89ab      	ldrh	r3, [r5, #12]
 8014e4e:	065b      	lsls	r3, r3, #25
 8014e50:	f53f af2c 	bmi.w	8014cac <_svfiprintf_r+0x28>
 8014e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e56:	b01d      	add	sp, #116	; 0x74
 8014e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e5c:	ab03      	add	r3, sp, #12
 8014e5e:	9300      	str	r3, [sp, #0]
 8014e60:	462a      	mov	r2, r5
 8014e62:	4638      	mov	r0, r7
 8014e64:	4b06      	ldr	r3, [pc, #24]	; (8014e80 <_svfiprintf_r+0x1fc>)
 8014e66:	a904      	add	r1, sp, #16
 8014e68:	f7fe f942 	bl	80130f0 <_printf_i>
 8014e6c:	e7eb      	b.n	8014e46 <_svfiprintf_r+0x1c2>
 8014e6e:	bf00      	nop
 8014e70:	08016244 	.word	0x08016244
 8014e74:	0801624a 	.word	0x0801624a
 8014e78:	0801624e 	.word	0x0801624e
 8014e7c:	08012bb9 	.word	0x08012bb9
 8014e80:	08014bcd 	.word	0x08014bcd

08014e84 <__sfputc_r>:
 8014e84:	6893      	ldr	r3, [r2, #8]
 8014e86:	b410      	push	{r4}
 8014e88:	3b01      	subs	r3, #1
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	6093      	str	r3, [r2, #8]
 8014e8e:	da07      	bge.n	8014ea0 <__sfputc_r+0x1c>
 8014e90:	6994      	ldr	r4, [r2, #24]
 8014e92:	42a3      	cmp	r3, r4
 8014e94:	db01      	blt.n	8014e9a <__sfputc_r+0x16>
 8014e96:	290a      	cmp	r1, #10
 8014e98:	d102      	bne.n	8014ea0 <__sfputc_r+0x1c>
 8014e9a:	bc10      	pop	{r4}
 8014e9c:	f000 b95a 	b.w	8015154 <__swbuf_r>
 8014ea0:	6813      	ldr	r3, [r2, #0]
 8014ea2:	1c58      	adds	r0, r3, #1
 8014ea4:	6010      	str	r0, [r2, #0]
 8014ea6:	7019      	strb	r1, [r3, #0]
 8014ea8:	4608      	mov	r0, r1
 8014eaa:	bc10      	pop	{r4}
 8014eac:	4770      	bx	lr

08014eae <__sfputs_r>:
 8014eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eb0:	4606      	mov	r6, r0
 8014eb2:	460f      	mov	r7, r1
 8014eb4:	4614      	mov	r4, r2
 8014eb6:	18d5      	adds	r5, r2, r3
 8014eb8:	42ac      	cmp	r4, r5
 8014eba:	d101      	bne.n	8014ec0 <__sfputs_r+0x12>
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	e007      	b.n	8014ed0 <__sfputs_r+0x22>
 8014ec0:	463a      	mov	r2, r7
 8014ec2:	4630      	mov	r0, r6
 8014ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ec8:	f7ff ffdc 	bl	8014e84 <__sfputc_r>
 8014ecc:	1c43      	adds	r3, r0, #1
 8014ece:	d1f3      	bne.n	8014eb8 <__sfputs_r+0xa>
 8014ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ed4 <_vfiprintf_r>:
 8014ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed8:	460d      	mov	r5, r1
 8014eda:	4614      	mov	r4, r2
 8014edc:	4698      	mov	r8, r3
 8014ede:	4606      	mov	r6, r0
 8014ee0:	b09d      	sub	sp, #116	; 0x74
 8014ee2:	b118      	cbz	r0, 8014eec <_vfiprintf_r+0x18>
 8014ee4:	6983      	ldr	r3, [r0, #24]
 8014ee6:	b90b      	cbnz	r3, 8014eec <_vfiprintf_r+0x18>
 8014ee8:	f000 fb12 	bl	8015510 <__sinit>
 8014eec:	4b89      	ldr	r3, [pc, #548]	; (8015114 <_vfiprintf_r+0x240>)
 8014eee:	429d      	cmp	r5, r3
 8014ef0:	d11b      	bne.n	8014f2a <_vfiprintf_r+0x56>
 8014ef2:	6875      	ldr	r5, [r6, #4]
 8014ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ef6:	07d9      	lsls	r1, r3, #31
 8014ef8:	d405      	bmi.n	8014f06 <_vfiprintf_r+0x32>
 8014efa:	89ab      	ldrh	r3, [r5, #12]
 8014efc:	059a      	lsls	r2, r3, #22
 8014efe:	d402      	bmi.n	8014f06 <_vfiprintf_r+0x32>
 8014f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f02:	f000 fba3 	bl	801564c <__retarget_lock_acquire_recursive>
 8014f06:	89ab      	ldrh	r3, [r5, #12]
 8014f08:	071b      	lsls	r3, r3, #28
 8014f0a:	d501      	bpl.n	8014f10 <_vfiprintf_r+0x3c>
 8014f0c:	692b      	ldr	r3, [r5, #16]
 8014f0e:	b9eb      	cbnz	r3, 8014f4c <_vfiprintf_r+0x78>
 8014f10:	4629      	mov	r1, r5
 8014f12:	4630      	mov	r0, r6
 8014f14:	f000 f970 	bl	80151f8 <__swsetup_r>
 8014f18:	b1c0      	cbz	r0, 8014f4c <_vfiprintf_r+0x78>
 8014f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f1c:	07dc      	lsls	r4, r3, #31
 8014f1e:	d50e      	bpl.n	8014f3e <_vfiprintf_r+0x6a>
 8014f20:	f04f 30ff 	mov.w	r0, #4294967295
 8014f24:	b01d      	add	sp, #116	; 0x74
 8014f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f2a:	4b7b      	ldr	r3, [pc, #492]	; (8015118 <_vfiprintf_r+0x244>)
 8014f2c:	429d      	cmp	r5, r3
 8014f2e:	d101      	bne.n	8014f34 <_vfiprintf_r+0x60>
 8014f30:	68b5      	ldr	r5, [r6, #8]
 8014f32:	e7df      	b.n	8014ef4 <_vfiprintf_r+0x20>
 8014f34:	4b79      	ldr	r3, [pc, #484]	; (801511c <_vfiprintf_r+0x248>)
 8014f36:	429d      	cmp	r5, r3
 8014f38:	bf08      	it	eq
 8014f3a:	68f5      	ldreq	r5, [r6, #12]
 8014f3c:	e7da      	b.n	8014ef4 <_vfiprintf_r+0x20>
 8014f3e:	89ab      	ldrh	r3, [r5, #12]
 8014f40:	0598      	lsls	r0, r3, #22
 8014f42:	d4ed      	bmi.n	8014f20 <_vfiprintf_r+0x4c>
 8014f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f46:	f000 fb82 	bl	801564e <__retarget_lock_release_recursive>
 8014f4a:	e7e9      	b.n	8014f20 <_vfiprintf_r+0x4c>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f50:	2320      	movs	r3, #32
 8014f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f56:	2330      	movs	r3, #48	; 0x30
 8014f58:	f04f 0901 	mov.w	r9, #1
 8014f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015120 <_vfiprintf_r+0x24c>
 8014f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f68:	4623      	mov	r3, r4
 8014f6a:	469a      	mov	sl, r3
 8014f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f70:	b10a      	cbz	r2, 8014f76 <_vfiprintf_r+0xa2>
 8014f72:	2a25      	cmp	r2, #37	; 0x25
 8014f74:	d1f9      	bne.n	8014f6a <_vfiprintf_r+0x96>
 8014f76:	ebba 0b04 	subs.w	fp, sl, r4
 8014f7a:	d00b      	beq.n	8014f94 <_vfiprintf_r+0xc0>
 8014f7c:	465b      	mov	r3, fp
 8014f7e:	4622      	mov	r2, r4
 8014f80:	4629      	mov	r1, r5
 8014f82:	4630      	mov	r0, r6
 8014f84:	f7ff ff93 	bl	8014eae <__sfputs_r>
 8014f88:	3001      	adds	r0, #1
 8014f8a:	f000 80aa 	beq.w	80150e2 <_vfiprintf_r+0x20e>
 8014f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f90:	445a      	add	r2, fp
 8014f92:	9209      	str	r2, [sp, #36]	; 0x24
 8014f94:	f89a 3000 	ldrb.w	r3, [sl]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	f000 80a2 	beq.w	80150e2 <_vfiprintf_r+0x20e>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8014fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fa8:	f10a 0a01 	add.w	sl, sl, #1
 8014fac:	9304      	str	r3, [sp, #16]
 8014fae:	9307      	str	r3, [sp, #28]
 8014fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8014fb6:	4654      	mov	r4, sl
 8014fb8:	2205      	movs	r2, #5
 8014fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fbe:	4858      	ldr	r0, [pc, #352]	; (8015120 <_vfiprintf_r+0x24c>)
 8014fc0:	f7ff f976 	bl	80142b0 <memchr>
 8014fc4:	9a04      	ldr	r2, [sp, #16]
 8014fc6:	b9d8      	cbnz	r0, 8015000 <_vfiprintf_r+0x12c>
 8014fc8:	06d1      	lsls	r1, r2, #27
 8014fca:	bf44      	itt	mi
 8014fcc:	2320      	movmi	r3, #32
 8014fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fd2:	0713      	lsls	r3, r2, #28
 8014fd4:	bf44      	itt	mi
 8014fd6:	232b      	movmi	r3, #43	; 0x2b
 8014fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8014fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8014fe2:	d015      	beq.n	8015010 <_vfiprintf_r+0x13c>
 8014fe4:	4654      	mov	r4, sl
 8014fe6:	2000      	movs	r0, #0
 8014fe8:	f04f 0c0a 	mov.w	ip, #10
 8014fec:	9a07      	ldr	r2, [sp, #28]
 8014fee:	4621      	mov	r1, r4
 8014ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ff4:	3b30      	subs	r3, #48	; 0x30
 8014ff6:	2b09      	cmp	r3, #9
 8014ff8:	d94e      	bls.n	8015098 <_vfiprintf_r+0x1c4>
 8014ffa:	b1b0      	cbz	r0, 801502a <_vfiprintf_r+0x156>
 8014ffc:	9207      	str	r2, [sp, #28]
 8014ffe:	e014      	b.n	801502a <_vfiprintf_r+0x156>
 8015000:	eba0 0308 	sub.w	r3, r0, r8
 8015004:	fa09 f303 	lsl.w	r3, r9, r3
 8015008:	4313      	orrs	r3, r2
 801500a:	46a2      	mov	sl, r4
 801500c:	9304      	str	r3, [sp, #16]
 801500e:	e7d2      	b.n	8014fb6 <_vfiprintf_r+0xe2>
 8015010:	9b03      	ldr	r3, [sp, #12]
 8015012:	1d19      	adds	r1, r3, #4
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	9103      	str	r1, [sp, #12]
 8015018:	2b00      	cmp	r3, #0
 801501a:	bfbb      	ittet	lt
 801501c:	425b      	neglt	r3, r3
 801501e:	f042 0202 	orrlt.w	r2, r2, #2
 8015022:	9307      	strge	r3, [sp, #28]
 8015024:	9307      	strlt	r3, [sp, #28]
 8015026:	bfb8      	it	lt
 8015028:	9204      	strlt	r2, [sp, #16]
 801502a:	7823      	ldrb	r3, [r4, #0]
 801502c:	2b2e      	cmp	r3, #46	; 0x2e
 801502e:	d10c      	bne.n	801504a <_vfiprintf_r+0x176>
 8015030:	7863      	ldrb	r3, [r4, #1]
 8015032:	2b2a      	cmp	r3, #42	; 0x2a
 8015034:	d135      	bne.n	80150a2 <_vfiprintf_r+0x1ce>
 8015036:	9b03      	ldr	r3, [sp, #12]
 8015038:	3402      	adds	r4, #2
 801503a:	1d1a      	adds	r2, r3, #4
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	9203      	str	r2, [sp, #12]
 8015040:	2b00      	cmp	r3, #0
 8015042:	bfb8      	it	lt
 8015044:	f04f 33ff 	movlt.w	r3, #4294967295
 8015048:	9305      	str	r3, [sp, #20]
 801504a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8015124 <_vfiprintf_r+0x250>
 801504e:	2203      	movs	r2, #3
 8015050:	4650      	mov	r0, sl
 8015052:	7821      	ldrb	r1, [r4, #0]
 8015054:	f7ff f92c 	bl	80142b0 <memchr>
 8015058:	b140      	cbz	r0, 801506c <_vfiprintf_r+0x198>
 801505a:	2340      	movs	r3, #64	; 0x40
 801505c:	eba0 000a 	sub.w	r0, r0, sl
 8015060:	fa03 f000 	lsl.w	r0, r3, r0
 8015064:	9b04      	ldr	r3, [sp, #16]
 8015066:	3401      	adds	r4, #1
 8015068:	4303      	orrs	r3, r0
 801506a:	9304      	str	r3, [sp, #16]
 801506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015070:	2206      	movs	r2, #6
 8015072:	482d      	ldr	r0, [pc, #180]	; (8015128 <_vfiprintf_r+0x254>)
 8015074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015078:	f7ff f91a 	bl	80142b0 <memchr>
 801507c:	2800      	cmp	r0, #0
 801507e:	d03f      	beq.n	8015100 <_vfiprintf_r+0x22c>
 8015080:	4b2a      	ldr	r3, [pc, #168]	; (801512c <_vfiprintf_r+0x258>)
 8015082:	bb1b      	cbnz	r3, 80150cc <_vfiprintf_r+0x1f8>
 8015084:	9b03      	ldr	r3, [sp, #12]
 8015086:	3307      	adds	r3, #7
 8015088:	f023 0307 	bic.w	r3, r3, #7
 801508c:	3308      	adds	r3, #8
 801508e:	9303      	str	r3, [sp, #12]
 8015090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015092:	443b      	add	r3, r7
 8015094:	9309      	str	r3, [sp, #36]	; 0x24
 8015096:	e767      	b.n	8014f68 <_vfiprintf_r+0x94>
 8015098:	460c      	mov	r4, r1
 801509a:	2001      	movs	r0, #1
 801509c:	fb0c 3202 	mla	r2, ip, r2, r3
 80150a0:	e7a5      	b.n	8014fee <_vfiprintf_r+0x11a>
 80150a2:	2300      	movs	r3, #0
 80150a4:	f04f 0c0a 	mov.w	ip, #10
 80150a8:	4619      	mov	r1, r3
 80150aa:	3401      	adds	r4, #1
 80150ac:	9305      	str	r3, [sp, #20]
 80150ae:	4620      	mov	r0, r4
 80150b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150b4:	3a30      	subs	r2, #48	; 0x30
 80150b6:	2a09      	cmp	r2, #9
 80150b8:	d903      	bls.n	80150c2 <_vfiprintf_r+0x1ee>
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d0c5      	beq.n	801504a <_vfiprintf_r+0x176>
 80150be:	9105      	str	r1, [sp, #20]
 80150c0:	e7c3      	b.n	801504a <_vfiprintf_r+0x176>
 80150c2:	4604      	mov	r4, r0
 80150c4:	2301      	movs	r3, #1
 80150c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80150ca:	e7f0      	b.n	80150ae <_vfiprintf_r+0x1da>
 80150cc:	ab03      	add	r3, sp, #12
 80150ce:	9300      	str	r3, [sp, #0]
 80150d0:	462a      	mov	r2, r5
 80150d2:	4630      	mov	r0, r6
 80150d4:	4b16      	ldr	r3, [pc, #88]	; (8015130 <_vfiprintf_r+0x25c>)
 80150d6:	a904      	add	r1, sp, #16
 80150d8:	f7fd fd6e 	bl	8012bb8 <_printf_float>
 80150dc:	4607      	mov	r7, r0
 80150de:	1c78      	adds	r0, r7, #1
 80150e0:	d1d6      	bne.n	8015090 <_vfiprintf_r+0x1bc>
 80150e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150e4:	07d9      	lsls	r1, r3, #31
 80150e6:	d405      	bmi.n	80150f4 <_vfiprintf_r+0x220>
 80150e8:	89ab      	ldrh	r3, [r5, #12]
 80150ea:	059a      	lsls	r2, r3, #22
 80150ec:	d402      	bmi.n	80150f4 <_vfiprintf_r+0x220>
 80150ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150f0:	f000 faad 	bl	801564e <__retarget_lock_release_recursive>
 80150f4:	89ab      	ldrh	r3, [r5, #12]
 80150f6:	065b      	lsls	r3, r3, #25
 80150f8:	f53f af12 	bmi.w	8014f20 <_vfiprintf_r+0x4c>
 80150fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150fe:	e711      	b.n	8014f24 <_vfiprintf_r+0x50>
 8015100:	ab03      	add	r3, sp, #12
 8015102:	9300      	str	r3, [sp, #0]
 8015104:	462a      	mov	r2, r5
 8015106:	4630      	mov	r0, r6
 8015108:	4b09      	ldr	r3, [pc, #36]	; (8015130 <_vfiprintf_r+0x25c>)
 801510a:	a904      	add	r1, sp, #16
 801510c:	f7fd fff0 	bl	80130f0 <_printf_i>
 8015110:	e7e4      	b.n	80150dc <_vfiprintf_r+0x208>
 8015112:	bf00      	nop
 8015114:	08016278 	.word	0x08016278
 8015118:	08016298 	.word	0x08016298
 801511c:	08016258 	.word	0x08016258
 8015120:	08016244 	.word	0x08016244
 8015124:	0801624a 	.word	0x0801624a
 8015128:	0801624e 	.word	0x0801624e
 801512c:	08012bb9 	.word	0x08012bb9
 8015130:	08014eaf 	.word	0x08014eaf

08015134 <_sbrk_r>:
 8015134:	b538      	push	{r3, r4, r5, lr}
 8015136:	2300      	movs	r3, #0
 8015138:	4d05      	ldr	r5, [pc, #20]	; (8015150 <_sbrk_r+0x1c>)
 801513a:	4604      	mov	r4, r0
 801513c:	4608      	mov	r0, r1
 801513e:	602b      	str	r3, [r5, #0]
 8015140:	f7f0 fbfe 	bl	8005940 <_sbrk>
 8015144:	1c43      	adds	r3, r0, #1
 8015146:	d102      	bne.n	801514e <_sbrk_r+0x1a>
 8015148:	682b      	ldr	r3, [r5, #0]
 801514a:	b103      	cbz	r3, 801514e <_sbrk_r+0x1a>
 801514c:	6023      	str	r3, [r4, #0]
 801514e:	bd38      	pop	{r3, r4, r5, pc}
 8015150:	20003a88 	.word	0x20003a88

08015154 <__swbuf_r>:
 8015154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015156:	460e      	mov	r6, r1
 8015158:	4614      	mov	r4, r2
 801515a:	4605      	mov	r5, r0
 801515c:	b118      	cbz	r0, 8015166 <__swbuf_r+0x12>
 801515e:	6983      	ldr	r3, [r0, #24]
 8015160:	b90b      	cbnz	r3, 8015166 <__swbuf_r+0x12>
 8015162:	f000 f9d5 	bl	8015510 <__sinit>
 8015166:	4b21      	ldr	r3, [pc, #132]	; (80151ec <__swbuf_r+0x98>)
 8015168:	429c      	cmp	r4, r3
 801516a:	d12b      	bne.n	80151c4 <__swbuf_r+0x70>
 801516c:	686c      	ldr	r4, [r5, #4]
 801516e:	69a3      	ldr	r3, [r4, #24]
 8015170:	60a3      	str	r3, [r4, #8]
 8015172:	89a3      	ldrh	r3, [r4, #12]
 8015174:	071a      	lsls	r2, r3, #28
 8015176:	d52f      	bpl.n	80151d8 <__swbuf_r+0x84>
 8015178:	6923      	ldr	r3, [r4, #16]
 801517a:	b36b      	cbz	r3, 80151d8 <__swbuf_r+0x84>
 801517c:	6923      	ldr	r3, [r4, #16]
 801517e:	6820      	ldr	r0, [r4, #0]
 8015180:	b2f6      	uxtb	r6, r6
 8015182:	1ac0      	subs	r0, r0, r3
 8015184:	6963      	ldr	r3, [r4, #20]
 8015186:	4637      	mov	r7, r6
 8015188:	4283      	cmp	r3, r0
 801518a:	dc04      	bgt.n	8015196 <__swbuf_r+0x42>
 801518c:	4621      	mov	r1, r4
 801518e:	4628      	mov	r0, r5
 8015190:	f000 f92a 	bl	80153e8 <_fflush_r>
 8015194:	bb30      	cbnz	r0, 80151e4 <__swbuf_r+0x90>
 8015196:	68a3      	ldr	r3, [r4, #8]
 8015198:	3001      	adds	r0, #1
 801519a:	3b01      	subs	r3, #1
 801519c:	60a3      	str	r3, [r4, #8]
 801519e:	6823      	ldr	r3, [r4, #0]
 80151a0:	1c5a      	adds	r2, r3, #1
 80151a2:	6022      	str	r2, [r4, #0]
 80151a4:	701e      	strb	r6, [r3, #0]
 80151a6:	6963      	ldr	r3, [r4, #20]
 80151a8:	4283      	cmp	r3, r0
 80151aa:	d004      	beq.n	80151b6 <__swbuf_r+0x62>
 80151ac:	89a3      	ldrh	r3, [r4, #12]
 80151ae:	07db      	lsls	r3, r3, #31
 80151b0:	d506      	bpl.n	80151c0 <__swbuf_r+0x6c>
 80151b2:	2e0a      	cmp	r6, #10
 80151b4:	d104      	bne.n	80151c0 <__swbuf_r+0x6c>
 80151b6:	4621      	mov	r1, r4
 80151b8:	4628      	mov	r0, r5
 80151ba:	f000 f915 	bl	80153e8 <_fflush_r>
 80151be:	b988      	cbnz	r0, 80151e4 <__swbuf_r+0x90>
 80151c0:	4638      	mov	r0, r7
 80151c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151c4:	4b0a      	ldr	r3, [pc, #40]	; (80151f0 <__swbuf_r+0x9c>)
 80151c6:	429c      	cmp	r4, r3
 80151c8:	d101      	bne.n	80151ce <__swbuf_r+0x7a>
 80151ca:	68ac      	ldr	r4, [r5, #8]
 80151cc:	e7cf      	b.n	801516e <__swbuf_r+0x1a>
 80151ce:	4b09      	ldr	r3, [pc, #36]	; (80151f4 <__swbuf_r+0xa0>)
 80151d0:	429c      	cmp	r4, r3
 80151d2:	bf08      	it	eq
 80151d4:	68ec      	ldreq	r4, [r5, #12]
 80151d6:	e7ca      	b.n	801516e <__swbuf_r+0x1a>
 80151d8:	4621      	mov	r1, r4
 80151da:	4628      	mov	r0, r5
 80151dc:	f000 f80c 	bl	80151f8 <__swsetup_r>
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d0cb      	beq.n	801517c <__swbuf_r+0x28>
 80151e4:	f04f 37ff 	mov.w	r7, #4294967295
 80151e8:	e7ea      	b.n	80151c0 <__swbuf_r+0x6c>
 80151ea:	bf00      	nop
 80151ec:	08016278 	.word	0x08016278
 80151f0:	08016298 	.word	0x08016298
 80151f4:	08016258 	.word	0x08016258

080151f8 <__swsetup_r>:
 80151f8:	4b32      	ldr	r3, [pc, #200]	; (80152c4 <__swsetup_r+0xcc>)
 80151fa:	b570      	push	{r4, r5, r6, lr}
 80151fc:	681d      	ldr	r5, [r3, #0]
 80151fe:	4606      	mov	r6, r0
 8015200:	460c      	mov	r4, r1
 8015202:	b125      	cbz	r5, 801520e <__swsetup_r+0x16>
 8015204:	69ab      	ldr	r3, [r5, #24]
 8015206:	b913      	cbnz	r3, 801520e <__swsetup_r+0x16>
 8015208:	4628      	mov	r0, r5
 801520a:	f000 f981 	bl	8015510 <__sinit>
 801520e:	4b2e      	ldr	r3, [pc, #184]	; (80152c8 <__swsetup_r+0xd0>)
 8015210:	429c      	cmp	r4, r3
 8015212:	d10f      	bne.n	8015234 <__swsetup_r+0x3c>
 8015214:	686c      	ldr	r4, [r5, #4]
 8015216:	89a3      	ldrh	r3, [r4, #12]
 8015218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801521c:	0719      	lsls	r1, r3, #28
 801521e:	d42c      	bmi.n	801527a <__swsetup_r+0x82>
 8015220:	06dd      	lsls	r5, r3, #27
 8015222:	d411      	bmi.n	8015248 <__swsetup_r+0x50>
 8015224:	2309      	movs	r3, #9
 8015226:	6033      	str	r3, [r6, #0]
 8015228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801522c:	f04f 30ff 	mov.w	r0, #4294967295
 8015230:	81a3      	strh	r3, [r4, #12]
 8015232:	e03e      	b.n	80152b2 <__swsetup_r+0xba>
 8015234:	4b25      	ldr	r3, [pc, #148]	; (80152cc <__swsetup_r+0xd4>)
 8015236:	429c      	cmp	r4, r3
 8015238:	d101      	bne.n	801523e <__swsetup_r+0x46>
 801523a:	68ac      	ldr	r4, [r5, #8]
 801523c:	e7eb      	b.n	8015216 <__swsetup_r+0x1e>
 801523e:	4b24      	ldr	r3, [pc, #144]	; (80152d0 <__swsetup_r+0xd8>)
 8015240:	429c      	cmp	r4, r3
 8015242:	bf08      	it	eq
 8015244:	68ec      	ldreq	r4, [r5, #12]
 8015246:	e7e6      	b.n	8015216 <__swsetup_r+0x1e>
 8015248:	0758      	lsls	r0, r3, #29
 801524a:	d512      	bpl.n	8015272 <__swsetup_r+0x7a>
 801524c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801524e:	b141      	cbz	r1, 8015262 <__swsetup_r+0x6a>
 8015250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015254:	4299      	cmp	r1, r3
 8015256:	d002      	beq.n	801525e <__swsetup_r+0x66>
 8015258:	4630      	mov	r0, r6
 801525a:	f7ff fbdb 	bl	8014a14 <_free_r>
 801525e:	2300      	movs	r3, #0
 8015260:	6363      	str	r3, [r4, #52]	; 0x34
 8015262:	89a3      	ldrh	r3, [r4, #12]
 8015264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015268:	81a3      	strh	r3, [r4, #12]
 801526a:	2300      	movs	r3, #0
 801526c:	6063      	str	r3, [r4, #4]
 801526e:	6923      	ldr	r3, [r4, #16]
 8015270:	6023      	str	r3, [r4, #0]
 8015272:	89a3      	ldrh	r3, [r4, #12]
 8015274:	f043 0308 	orr.w	r3, r3, #8
 8015278:	81a3      	strh	r3, [r4, #12]
 801527a:	6923      	ldr	r3, [r4, #16]
 801527c:	b94b      	cbnz	r3, 8015292 <__swsetup_r+0x9a>
 801527e:	89a3      	ldrh	r3, [r4, #12]
 8015280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015288:	d003      	beq.n	8015292 <__swsetup_r+0x9a>
 801528a:	4621      	mov	r1, r4
 801528c:	4630      	mov	r0, r6
 801528e:	f000 fa05 	bl	801569c <__smakebuf_r>
 8015292:	89a0      	ldrh	r0, [r4, #12]
 8015294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015298:	f010 0301 	ands.w	r3, r0, #1
 801529c:	d00a      	beq.n	80152b4 <__swsetup_r+0xbc>
 801529e:	2300      	movs	r3, #0
 80152a0:	60a3      	str	r3, [r4, #8]
 80152a2:	6963      	ldr	r3, [r4, #20]
 80152a4:	425b      	negs	r3, r3
 80152a6:	61a3      	str	r3, [r4, #24]
 80152a8:	6923      	ldr	r3, [r4, #16]
 80152aa:	b943      	cbnz	r3, 80152be <__swsetup_r+0xc6>
 80152ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80152b0:	d1ba      	bne.n	8015228 <__swsetup_r+0x30>
 80152b2:	bd70      	pop	{r4, r5, r6, pc}
 80152b4:	0781      	lsls	r1, r0, #30
 80152b6:	bf58      	it	pl
 80152b8:	6963      	ldrpl	r3, [r4, #20]
 80152ba:	60a3      	str	r3, [r4, #8]
 80152bc:	e7f4      	b.n	80152a8 <__swsetup_r+0xb0>
 80152be:	2000      	movs	r0, #0
 80152c0:	e7f7      	b.n	80152b2 <__swsetup_r+0xba>
 80152c2:	bf00      	nop
 80152c4:	20000810 	.word	0x20000810
 80152c8:	08016278 	.word	0x08016278
 80152cc:	08016298 	.word	0x08016298
 80152d0:	08016258 	.word	0x08016258

080152d4 <abort>:
 80152d4:	2006      	movs	r0, #6
 80152d6:	b508      	push	{r3, lr}
 80152d8:	f000 fab0 	bl	801583c <raise>
 80152dc:	2001      	movs	r0, #1
 80152de:	f7f0 fabc 	bl	800585a <_exit>
	...

080152e4 <__sflush_r>:
 80152e4:	898a      	ldrh	r2, [r1, #12]
 80152e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152e8:	4605      	mov	r5, r0
 80152ea:	0710      	lsls	r0, r2, #28
 80152ec:	460c      	mov	r4, r1
 80152ee:	d457      	bmi.n	80153a0 <__sflush_r+0xbc>
 80152f0:	684b      	ldr	r3, [r1, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	dc04      	bgt.n	8015300 <__sflush_r+0x1c>
 80152f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	dc01      	bgt.n	8015300 <__sflush_r+0x1c>
 80152fc:	2000      	movs	r0, #0
 80152fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015302:	2e00      	cmp	r6, #0
 8015304:	d0fa      	beq.n	80152fc <__sflush_r+0x18>
 8015306:	2300      	movs	r3, #0
 8015308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801530c:	682f      	ldr	r7, [r5, #0]
 801530e:	602b      	str	r3, [r5, #0]
 8015310:	d032      	beq.n	8015378 <__sflush_r+0x94>
 8015312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015314:	89a3      	ldrh	r3, [r4, #12]
 8015316:	075a      	lsls	r2, r3, #29
 8015318:	d505      	bpl.n	8015326 <__sflush_r+0x42>
 801531a:	6863      	ldr	r3, [r4, #4]
 801531c:	1ac0      	subs	r0, r0, r3
 801531e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015320:	b10b      	cbz	r3, 8015326 <__sflush_r+0x42>
 8015322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015324:	1ac0      	subs	r0, r0, r3
 8015326:	2300      	movs	r3, #0
 8015328:	4602      	mov	r2, r0
 801532a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801532c:	4628      	mov	r0, r5
 801532e:	6a21      	ldr	r1, [r4, #32]
 8015330:	47b0      	blx	r6
 8015332:	1c43      	adds	r3, r0, #1
 8015334:	89a3      	ldrh	r3, [r4, #12]
 8015336:	d106      	bne.n	8015346 <__sflush_r+0x62>
 8015338:	6829      	ldr	r1, [r5, #0]
 801533a:	291d      	cmp	r1, #29
 801533c:	d82c      	bhi.n	8015398 <__sflush_r+0xb4>
 801533e:	4a29      	ldr	r2, [pc, #164]	; (80153e4 <__sflush_r+0x100>)
 8015340:	40ca      	lsrs	r2, r1
 8015342:	07d6      	lsls	r6, r2, #31
 8015344:	d528      	bpl.n	8015398 <__sflush_r+0xb4>
 8015346:	2200      	movs	r2, #0
 8015348:	6062      	str	r2, [r4, #4]
 801534a:	6922      	ldr	r2, [r4, #16]
 801534c:	04d9      	lsls	r1, r3, #19
 801534e:	6022      	str	r2, [r4, #0]
 8015350:	d504      	bpl.n	801535c <__sflush_r+0x78>
 8015352:	1c42      	adds	r2, r0, #1
 8015354:	d101      	bne.n	801535a <__sflush_r+0x76>
 8015356:	682b      	ldr	r3, [r5, #0]
 8015358:	b903      	cbnz	r3, 801535c <__sflush_r+0x78>
 801535a:	6560      	str	r0, [r4, #84]	; 0x54
 801535c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801535e:	602f      	str	r7, [r5, #0]
 8015360:	2900      	cmp	r1, #0
 8015362:	d0cb      	beq.n	80152fc <__sflush_r+0x18>
 8015364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015368:	4299      	cmp	r1, r3
 801536a:	d002      	beq.n	8015372 <__sflush_r+0x8e>
 801536c:	4628      	mov	r0, r5
 801536e:	f7ff fb51 	bl	8014a14 <_free_r>
 8015372:	2000      	movs	r0, #0
 8015374:	6360      	str	r0, [r4, #52]	; 0x34
 8015376:	e7c2      	b.n	80152fe <__sflush_r+0x1a>
 8015378:	6a21      	ldr	r1, [r4, #32]
 801537a:	2301      	movs	r3, #1
 801537c:	4628      	mov	r0, r5
 801537e:	47b0      	blx	r6
 8015380:	1c41      	adds	r1, r0, #1
 8015382:	d1c7      	bne.n	8015314 <__sflush_r+0x30>
 8015384:	682b      	ldr	r3, [r5, #0]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d0c4      	beq.n	8015314 <__sflush_r+0x30>
 801538a:	2b1d      	cmp	r3, #29
 801538c:	d001      	beq.n	8015392 <__sflush_r+0xae>
 801538e:	2b16      	cmp	r3, #22
 8015390:	d101      	bne.n	8015396 <__sflush_r+0xb2>
 8015392:	602f      	str	r7, [r5, #0]
 8015394:	e7b2      	b.n	80152fc <__sflush_r+0x18>
 8015396:	89a3      	ldrh	r3, [r4, #12]
 8015398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801539c:	81a3      	strh	r3, [r4, #12]
 801539e:	e7ae      	b.n	80152fe <__sflush_r+0x1a>
 80153a0:	690f      	ldr	r7, [r1, #16]
 80153a2:	2f00      	cmp	r7, #0
 80153a4:	d0aa      	beq.n	80152fc <__sflush_r+0x18>
 80153a6:	0793      	lsls	r3, r2, #30
 80153a8:	bf18      	it	ne
 80153aa:	2300      	movne	r3, #0
 80153ac:	680e      	ldr	r6, [r1, #0]
 80153ae:	bf08      	it	eq
 80153b0:	694b      	ldreq	r3, [r1, #20]
 80153b2:	1bf6      	subs	r6, r6, r7
 80153b4:	600f      	str	r7, [r1, #0]
 80153b6:	608b      	str	r3, [r1, #8]
 80153b8:	2e00      	cmp	r6, #0
 80153ba:	dd9f      	ble.n	80152fc <__sflush_r+0x18>
 80153bc:	4633      	mov	r3, r6
 80153be:	463a      	mov	r2, r7
 80153c0:	4628      	mov	r0, r5
 80153c2:	6a21      	ldr	r1, [r4, #32]
 80153c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80153c8:	47e0      	blx	ip
 80153ca:	2800      	cmp	r0, #0
 80153cc:	dc06      	bgt.n	80153dc <__sflush_r+0xf8>
 80153ce:	89a3      	ldrh	r3, [r4, #12]
 80153d0:	f04f 30ff 	mov.w	r0, #4294967295
 80153d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153d8:	81a3      	strh	r3, [r4, #12]
 80153da:	e790      	b.n	80152fe <__sflush_r+0x1a>
 80153dc:	4407      	add	r7, r0
 80153de:	1a36      	subs	r6, r6, r0
 80153e0:	e7ea      	b.n	80153b8 <__sflush_r+0xd4>
 80153e2:	bf00      	nop
 80153e4:	20400001 	.word	0x20400001

080153e8 <_fflush_r>:
 80153e8:	b538      	push	{r3, r4, r5, lr}
 80153ea:	690b      	ldr	r3, [r1, #16]
 80153ec:	4605      	mov	r5, r0
 80153ee:	460c      	mov	r4, r1
 80153f0:	b913      	cbnz	r3, 80153f8 <_fflush_r+0x10>
 80153f2:	2500      	movs	r5, #0
 80153f4:	4628      	mov	r0, r5
 80153f6:	bd38      	pop	{r3, r4, r5, pc}
 80153f8:	b118      	cbz	r0, 8015402 <_fflush_r+0x1a>
 80153fa:	6983      	ldr	r3, [r0, #24]
 80153fc:	b90b      	cbnz	r3, 8015402 <_fflush_r+0x1a>
 80153fe:	f000 f887 	bl	8015510 <__sinit>
 8015402:	4b14      	ldr	r3, [pc, #80]	; (8015454 <_fflush_r+0x6c>)
 8015404:	429c      	cmp	r4, r3
 8015406:	d11b      	bne.n	8015440 <_fflush_r+0x58>
 8015408:	686c      	ldr	r4, [r5, #4]
 801540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d0ef      	beq.n	80153f2 <_fflush_r+0xa>
 8015412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015414:	07d0      	lsls	r0, r2, #31
 8015416:	d404      	bmi.n	8015422 <_fflush_r+0x3a>
 8015418:	0599      	lsls	r1, r3, #22
 801541a:	d402      	bmi.n	8015422 <_fflush_r+0x3a>
 801541c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801541e:	f000 f915 	bl	801564c <__retarget_lock_acquire_recursive>
 8015422:	4628      	mov	r0, r5
 8015424:	4621      	mov	r1, r4
 8015426:	f7ff ff5d 	bl	80152e4 <__sflush_r>
 801542a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801542c:	4605      	mov	r5, r0
 801542e:	07da      	lsls	r2, r3, #31
 8015430:	d4e0      	bmi.n	80153f4 <_fflush_r+0xc>
 8015432:	89a3      	ldrh	r3, [r4, #12]
 8015434:	059b      	lsls	r3, r3, #22
 8015436:	d4dd      	bmi.n	80153f4 <_fflush_r+0xc>
 8015438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801543a:	f000 f908 	bl	801564e <__retarget_lock_release_recursive>
 801543e:	e7d9      	b.n	80153f4 <_fflush_r+0xc>
 8015440:	4b05      	ldr	r3, [pc, #20]	; (8015458 <_fflush_r+0x70>)
 8015442:	429c      	cmp	r4, r3
 8015444:	d101      	bne.n	801544a <_fflush_r+0x62>
 8015446:	68ac      	ldr	r4, [r5, #8]
 8015448:	e7df      	b.n	801540a <_fflush_r+0x22>
 801544a:	4b04      	ldr	r3, [pc, #16]	; (801545c <_fflush_r+0x74>)
 801544c:	429c      	cmp	r4, r3
 801544e:	bf08      	it	eq
 8015450:	68ec      	ldreq	r4, [r5, #12]
 8015452:	e7da      	b.n	801540a <_fflush_r+0x22>
 8015454:	08016278 	.word	0x08016278
 8015458:	08016298 	.word	0x08016298
 801545c:	08016258 	.word	0x08016258

08015460 <std>:
 8015460:	2300      	movs	r3, #0
 8015462:	b510      	push	{r4, lr}
 8015464:	4604      	mov	r4, r0
 8015466:	e9c0 3300 	strd	r3, r3, [r0]
 801546a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801546e:	6083      	str	r3, [r0, #8]
 8015470:	8181      	strh	r1, [r0, #12]
 8015472:	6643      	str	r3, [r0, #100]	; 0x64
 8015474:	81c2      	strh	r2, [r0, #14]
 8015476:	6183      	str	r3, [r0, #24]
 8015478:	4619      	mov	r1, r3
 801547a:	2208      	movs	r2, #8
 801547c:	305c      	adds	r0, #92	; 0x5c
 801547e:	f7fd faf5 	bl	8012a6c <memset>
 8015482:	4b05      	ldr	r3, [pc, #20]	; (8015498 <std+0x38>)
 8015484:	6224      	str	r4, [r4, #32]
 8015486:	6263      	str	r3, [r4, #36]	; 0x24
 8015488:	4b04      	ldr	r3, [pc, #16]	; (801549c <std+0x3c>)
 801548a:	62a3      	str	r3, [r4, #40]	; 0x28
 801548c:	4b04      	ldr	r3, [pc, #16]	; (80154a0 <std+0x40>)
 801548e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015490:	4b04      	ldr	r3, [pc, #16]	; (80154a4 <std+0x44>)
 8015492:	6323      	str	r3, [r4, #48]	; 0x30
 8015494:	bd10      	pop	{r4, pc}
 8015496:	bf00      	nop
 8015498:	08015875 	.word	0x08015875
 801549c:	08015897 	.word	0x08015897
 80154a0:	080158cf 	.word	0x080158cf
 80154a4:	080158f3 	.word	0x080158f3

080154a8 <_cleanup_r>:
 80154a8:	4901      	ldr	r1, [pc, #4]	; (80154b0 <_cleanup_r+0x8>)
 80154aa:	f000 b8af 	b.w	801560c <_fwalk_reent>
 80154ae:	bf00      	nop
 80154b0:	080153e9 	.word	0x080153e9

080154b4 <__sfmoreglue>:
 80154b4:	2268      	movs	r2, #104	; 0x68
 80154b6:	b570      	push	{r4, r5, r6, lr}
 80154b8:	1e4d      	subs	r5, r1, #1
 80154ba:	4355      	muls	r5, r2
 80154bc:	460e      	mov	r6, r1
 80154be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80154c2:	f7ff fb0f 	bl	8014ae4 <_malloc_r>
 80154c6:	4604      	mov	r4, r0
 80154c8:	b140      	cbz	r0, 80154dc <__sfmoreglue+0x28>
 80154ca:	2100      	movs	r1, #0
 80154cc:	e9c0 1600 	strd	r1, r6, [r0]
 80154d0:	300c      	adds	r0, #12
 80154d2:	60a0      	str	r0, [r4, #8]
 80154d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80154d8:	f7fd fac8 	bl	8012a6c <memset>
 80154dc:	4620      	mov	r0, r4
 80154de:	bd70      	pop	{r4, r5, r6, pc}

080154e0 <__sfp_lock_acquire>:
 80154e0:	4801      	ldr	r0, [pc, #4]	; (80154e8 <__sfp_lock_acquire+0x8>)
 80154e2:	f000 b8b3 	b.w	801564c <__retarget_lock_acquire_recursive>
 80154e6:	bf00      	nop
 80154e8:	20003a85 	.word	0x20003a85

080154ec <__sfp_lock_release>:
 80154ec:	4801      	ldr	r0, [pc, #4]	; (80154f4 <__sfp_lock_release+0x8>)
 80154ee:	f000 b8ae 	b.w	801564e <__retarget_lock_release_recursive>
 80154f2:	bf00      	nop
 80154f4:	20003a85 	.word	0x20003a85

080154f8 <__sinit_lock_acquire>:
 80154f8:	4801      	ldr	r0, [pc, #4]	; (8015500 <__sinit_lock_acquire+0x8>)
 80154fa:	f000 b8a7 	b.w	801564c <__retarget_lock_acquire_recursive>
 80154fe:	bf00      	nop
 8015500:	20003a86 	.word	0x20003a86

08015504 <__sinit_lock_release>:
 8015504:	4801      	ldr	r0, [pc, #4]	; (801550c <__sinit_lock_release+0x8>)
 8015506:	f000 b8a2 	b.w	801564e <__retarget_lock_release_recursive>
 801550a:	bf00      	nop
 801550c:	20003a86 	.word	0x20003a86

08015510 <__sinit>:
 8015510:	b510      	push	{r4, lr}
 8015512:	4604      	mov	r4, r0
 8015514:	f7ff fff0 	bl	80154f8 <__sinit_lock_acquire>
 8015518:	69a3      	ldr	r3, [r4, #24]
 801551a:	b11b      	cbz	r3, 8015524 <__sinit+0x14>
 801551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015520:	f7ff bff0 	b.w	8015504 <__sinit_lock_release>
 8015524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015528:	6523      	str	r3, [r4, #80]	; 0x50
 801552a:	4b13      	ldr	r3, [pc, #76]	; (8015578 <__sinit+0x68>)
 801552c:	4a13      	ldr	r2, [pc, #76]	; (801557c <__sinit+0x6c>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	62a2      	str	r2, [r4, #40]	; 0x28
 8015532:	42a3      	cmp	r3, r4
 8015534:	bf08      	it	eq
 8015536:	2301      	moveq	r3, #1
 8015538:	4620      	mov	r0, r4
 801553a:	bf08      	it	eq
 801553c:	61a3      	streq	r3, [r4, #24]
 801553e:	f000 f81f 	bl	8015580 <__sfp>
 8015542:	6060      	str	r0, [r4, #4]
 8015544:	4620      	mov	r0, r4
 8015546:	f000 f81b 	bl	8015580 <__sfp>
 801554a:	60a0      	str	r0, [r4, #8]
 801554c:	4620      	mov	r0, r4
 801554e:	f000 f817 	bl	8015580 <__sfp>
 8015552:	2200      	movs	r2, #0
 8015554:	2104      	movs	r1, #4
 8015556:	60e0      	str	r0, [r4, #12]
 8015558:	6860      	ldr	r0, [r4, #4]
 801555a:	f7ff ff81 	bl	8015460 <std>
 801555e:	2201      	movs	r2, #1
 8015560:	2109      	movs	r1, #9
 8015562:	68a0      	ldr	r0, [r4, #8]
 8015564:	f7ff ff7c 	bl	8015460 <std>
 8015568:	2202      	movs	r2, #2
 801556a:	2112      	movs	r1, #18
 801556c:	68e0      	ldr	r0, [r4, #12]
 801556e:	f7ff ff77 	bl	8015460 <std>
 8015572:	2301      	movs	r3, #1
 8015574:	61a3      	str	r3, [r4, #24]
 8015576:	e7d1      	b.n	801551c <__sinit+0xc>
 8015578:	08015e84 	.word	0x08015e84
 801557c:	080154a9 	.word	0x080154a9

08015580 <__sfp>:
 8015580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015582:	4607      	mov	r7, r0
 8015584:	f7ff ffac 	bl	80154e0 <__sfp_lock_acquire>
 8015588:	4b1e      	ldr	r3, [pc, #120]	; (8015604 <__sfp+0x84>)
 801558a:	681e      	ldr	r6, [r3, #0]
 801558c:	69b3      	ldr	r3, [r6, #24]
 801558e:	b913      	cbnz	r3, 8015596 <__sfp+0x16>
 8015590:	4630      	mov	r0, r6
 8015592:	f7ff ffbd 	bl	8015510 <__sinit>
 8015596:	3648      	adds	r6, #72	; 0x48
 8015598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801559c:	3b01      	subs	r3, #1
 801559e:	d503      	bpl.n	80155a8 <__sfp+0x28>
 80155a0:	6833      	ldr	r3, [r6, #0]
 80155a2:	b30b      	cbz	r3, 80155e8 <__sfp+0x68>
 80155a4:	6836      	ldr	r6, [r6, #0]
 80155a6:	e7f7      	b.n	8015598 <__sfp+0x18>
 80155a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80155ac:	b9d5      	cbnz	r5, 80155e4 <__sfp+0x64>
 80155ae:	4b16      	ldr	r3, [pc, #88]	; (8015608 <__sfp+0x88>)
 80155b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80155b4:	60e3      	str	r3, [r4, #12]
 80155b6:	6665      	str	r5, [r4, #100]	; 0x64
 80155b8:	f000 f847 	bl	801564a <__retarget_lock_init_recursive>
 80155bc:	f7ff ff96 	bl	80154ec <__sfp_lock_release>
 80155c0:	2208      	movs	r2, #8
 80155c2:	4629      	mov	r1, r5
 80155c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80155c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80155cc:	6025      	str	r5, [r4, #0]
 80155ce:	61a5      	str	r5, [r4, #24]
 80155d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80155d4:	f7fd fa4a 	bl	8012a6c <memset>
 80155d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80155dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80155e0:	4620      	mov	r0, r4
 80155e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155e4:	3468      	adds	r4, #104	; 0x68
 80155e6:	e7d9      	b.n	801559c <__sfp+0x1c>
 80155e8:	2104      	movs	r1, #4
 80155ea:	4638      	mov	r0, r7
 80155ec:	f7ff ff62 	bl	80154b4 <__sfmoreglue>
 80155f0:	4604      	mov	r4, r0
 80155f2:	6030      	str	r0, [r6, #0]
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d1d5      	bne.n	80155a4 <__sfp+0x24>
 80155f8:	f7ff ff78 	bl	80154ec <__sfp_lock_release>
 80155fc:	230c      	movs	r3, #12
 80155fe:	603b      	str	r3, [r7, #0]
 8015600:	e7ee      	b.n	80155e0 <__sfp+0x60>
 8015602:	bf00      	nop
 8015604:	08015e84 	.word	0x08015e84
 8015608:	ffff0001 	.word	0xffff0001

0801560c <_fwalk_reent>:
 801560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015610:	4606      	mov	r6, r0
 8015612:	4688      	mov	r8, r1
 8015614:	2700      	movs	r7, #0
 8015616:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801561a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801561e:	f1b9 0901 	subs.w	r9, r9, #1
 8015622:	d505      	bpl.n	8015630 <_fwalk_reent+0x24>
 8015624:	6824      	ldr	r4, [r4, #0]
 8015626:	2c00      	cmp	r4, #0
 8015628:	d1f7      	bne.n	801561a <_fwalk_reent+0xe>
 801562a:	4638      	mov	r0, r7
 801562c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015630:	89ab      	ldrh	r3, [r5, #12]
 8015632:	2b01      	cmp	r3, #1
 8015634:	d907      	bls.n	8015646 <_fwalk_reent+0x3a>
 8015636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801563a:	3301      	adds	r3, #1
 801563c:	d003      	beq.n	8015646 <_fwalk_reent+0x3a>
 801563e:	4629      	mov	r1, r5
 8015640:	4630      	mov	r0, r6
 8015642:	47c0      	blx	r8
 8015644:	4307      	orrs	r7, r0
 8015646:	3568      	adds	r5, #104	; 0x68
 8015648:	e7e9      	b.n	801561e <_fwalk_reent+0x12>

0801564a <__retarget_lock_init_recursive>:
 801564a:	4770      	bx	lr

0801564c <__retarget_lock_acquire_recursive>:
 801564c:	4770      	bx	lr

0801564e <__retarget_lock_release_recursive>:
 801564e:	4770      	bx	lr

08015650 <__swhatbuf_r>:
 8015650:	b570      	push	{r4, r5, r6, lr}
 8015652:	460e      	mov	r6, r1
 8015654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015658:	4614      	mov	r4, r2
 801565a:	2900      	cmp	r1, #0
 801565c:	461d      	mov	r5, r3
 801565e:	b096      	sub	sp, #88	; 0x58
 8015660:	da08      	bge.n	8015674 <__swhatbuf_r+0x24>
 8015662:	2200      	movs	r2, #0
 8015664:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015668:	602a      	str	r2, [r5, #0]
 801566a:	061a      	lsls	r2, r3, #24
 801566c:	d410      	bmi.n	8015690 <__swhatbuf_r+0x40>
 801566e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015672:	e00e      	b.n	8015692 <__swhatbuf_r+0x42>
 8015674:	466a      	mov	r2, sp
 8015676:	f000 f96f 	bl	8015958 <_fstat_r>
 801567a:	2800      	cmp	r0, #0
 801567c:	dbf1      	blt.n	8015662 <__swhatbuf_r+0x12>
 801567e:	9a01      	ldr	r2, [sp, #4]
 8015680:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015684:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015688:	425a      	negs	r2, r3
 801568a:	415a      	adcs	r2, r3
 801568c:	602a      	str	r2, [r5, #0]
 801568e:	e7ee      	b.n	801566e <__swhatbuf_r+0x1e>
 8015690:	2340      	movs	r3, #64	; 0x40
 8015692:	2000      	movs	r0, #0
 8015694:	6023      	str	r3, [r4, #0]
 8015696:	b016      	add	sp, #88	; 0x58
 8015698:	bd70      	pop	{r4, r5, r6, pc}
	...

0801569c <__smakebuf_r>:
 801569c:	898b      	ldrh	r3, [r1, #12]
 801569e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80156a0:	079d      	lsls	r5, r3, #30
 80156a2:	4606      	mov	r6, r0
 80156a4:	460c      	mov	r4, r1
 80156a6:	d507      	bpl.n	80156b8 <__smakebuf_r+0x1c>
 80156a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80156ac:	6023      	str	r3, [r4, #0]
 80156ae:	6123      	str	r3, [r4, #16]
 80156b0:	2301      	movs	r3, #1
 80156b2:	6163      	str	r3, [r4, #20]
 80156b4:	b002      	add	sp, #8
 80156b6:	bd70      	pop	{r4, r5, r6, pc}
 80156b8:	466a      	mov	r2, sp
 80156ba:	ab01      	add	r3, sp, #4
 80156bc:	f7ff ffc8 	bl	8015650 <__swhatbuf_r>
 80156c0:	9900      	ldr	r1, [sp, #0]
 80156c2:	4605      	mov	r5, r0
 80156c4:	4630      	mov	r0, r6
 80156c6:	f7ff fa0d 	bl	8014ae4 <_malloc_r>
 80156ca:	b948      	cbnz	r0, 80156e0 <__smakebuf_r+0x44>
 80156cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156d0:	059a      	lsls	r2, r3, #22
 80156d2:	d4ef      	bmi.n	80156b4 <__smakebuf_r+0x18>
 80156d4:	f023 0303 	bic.w	r3, r3, #3
 80156d8:	f043 0302 	orr.w	r3, r3, #2
 80156dc:	81a3      	strh	r3, [r4, #12]
 80156de:	e7e3      	b.n	80156a8 <__smakebuf_r+0xc>
 80156e0:	4b0d      	ldr	r3, [pc, #52]	; (8015718 <__smakebuf_r+0x7c>)
 80156e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80156e4:	89a3      	ldrh	r3, [r4, #12]
 80156e6:	6020      	str	r0, [r4, #0]
 80156e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156ec:	81a3      	strh	r3, [r4, #12]
 80156ee:	9b00      	ldr	r3, [sp, #0]
 80156f0:	6120      	str	r0, [r4, #16]
 80156f2:	6163      	str	r3, [r4, #20]
 80156f4:	9b01      	ldr	r3, [sp, #4]
 80156f6:	b15b      	cbz	r3, 8015710 <__smakebuf_r+0x74>
 80156f8:	4630      	mov	r0, r6
 80156fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156fe:	f000 f93d 	bl	801597c <_isatty_r>
 8015702:	b128      	cbz	r0, 8015710 <__smakebuf_r+0x74>
 8015704:	89a3      	ldrh	r3, [r4, #12]
 8015706:	f023 0303 	bic.w	r3, r3, #3
 801570a:	f043 0301 	orr.w	r3, r3, #1
 801570e:	81a3      	strh	r3, [r4, #12]
 8015710:	89a0      	ldrh	r0, [r4, #12]
 8015712:	4305      	orrs	r5, r0
 8015714:	81a5      	strh	r5, [r4, #12]
 8015716:	e7cd      	b.n	80156b4 <__smakebuf_r+0x18>
 8015718:	080154a9 	.word	0x080154a9

0801571c <__ascii_mbtowc>:
 801571c:	b082      	sub	sp, #8
 801571e:	b901      	cbnz	r1, 8015722 <__ascii_mbtowc+0x6>
 8015720:	a901      	add	r1, sp, #4
 8015722:	b142      	cbz	r2, 8015736 <__ascii_mbtowc+0x1a>
 8015724:	b14b      	cbz	r3, 801573a <__ascii_mbtowc+0x1e>
 8015726:	7813      	ldrb	r3, [r2, #0]
 8015728:	600b      	str	r3, [r1, #0]
 801572a:	7812      	ldrb	r2, [r2, #0]
 801572c:	1e10      	subs	r0, r2, #0
 801572e:	bf18      	it	ne
 8015730:	2001      	movne	r0, #1
 8015732:	b002      	add	sp, #8
 8015734:	4770      	bx	lr
 8015736:	4610      	mov	r0, r2
 8015738:	e7fb      	b.n	8015732 <__ascii_mbtowc+0x16>
 801573a:	f06f 0001 	mvn.w	r0, #1
 801573e:	e7f8      	b.n	8015732 <__ascii_mbtowc+0x16>

08015740 <memmove>:
 8015740:	4288      	cmp	r0, r1
 8015742:	b510      	push	{r4, lr}
 8015744:	eb01 0402 	add.w	r4, r1, r2
 8015748:	d902      	bls.n	8015750 <memmove+0x10>
 801574a:	4284      	cmp	r4, r0
 801574c:	4623      	mov	r3, r4
 801574e:	d807      	bhi.n	8015760 <memmove+0x20>
 8015750:	1e43      	subs	r3, r0, #1
 8015752:	42a1      	cmp	r1, r4
 8015754:	d008      	beq.n	8015768 <memmove+0x28>
 8015756:	f811 2b01 	ldrb.w	r2, [r1], #1
 801575a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801575e:	e7f8      	b.n	8015752 <memmove+0x12>
 8015760:	4601      	mov	r1, r0
 8015762:	4402      	add	r2, r0
 8015764:	428a      	cmp	r2, r1
 8015766:	d100      	bne.n	801576a <memmove+0x2a>
 8015768:	bd10      	pop	{r4, pc}
 801576a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801576e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015772:	e7f7      	b.n	8015764 <memmove+0x24>

08015774 <__malloc_lock>:
 8015774:	4801      	ldr	r0, [pc, #4]	; (801577c <__malloc_lock+0x8>)
 8015776:	f7ff bf69 	b.w	801564c <__retarget_lock_acquire_recursive>
 801577a:	bf00      	nop
 801577c:	20003a84 	.word	0x20003a84

08015780 <__malloc_unlock>:
 8015780:	4801      	ldr	r0, [pc, #4]	; (8015788 <__malloc_unlock+0x8>)
 8015782:	f7ff bf64 	b.w	801564e <__retarget_lock_release_recursive>
 8015786:	bf00      	nop
 8015788:	20003a84 	.word	0x20003a84

0801578c <_realloc_r>:
 801578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015790:	4680      	mov	r8, r0
 8015792:	4614      	mov	r4, r2
 8015794:	460e      	mov	r6, r1
 8015796:	b921      	cbnz	r1, 80157a2 <_realloc_r+0x16>
 8015798:	4611      	mov	r1, r2
 801579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801579e:	f7ff b9a1 	b.w	8014ae4 <_malloc_r>
 80157a2:	b92a      	cbnz	r2, 80157b0 <_realloc_r+0x24>
 80157a4:	f7ff f936 	bl	8014a14 <_free_r>
 80157a8:	4625      	mov	r5, r4
 80157aa:	4628      	mov	r0, r5
 80157ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157b0:	f000 f906 	bl	80159c0 <_malloc_usable_size_r>
 80157b4:	4284      	cmp	r4, r0
 80157b6:	4607      	mov	r7, r0
 80157b8:	d802      	bhi.n	80157c0 <_realloc_r+0x34>
 80157ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80157be:	d812      	bhi.n	80157e6 <_realloc_r+0x5a>
 80157c0:	4621      	mov	r1, r4
 80157c2:	4640      	mov	r0, r8
 80157c4:	f7ff f98e 	bl	8014ae4 <_malloc_r>
 80157c8:	4605      	mov	r5, r0
 80157ca:	2800      	cmp	r0, #0
 80157cc:	d0ed      	beq.n	80157aa <_realloc_r+0x1e>
 80157ce:	42bc      	cmp	r4, r7
 80157d0:	4622      	mov	r2, r4
 80157d2:	4631      	mov	r1, r6
 80157d4:	bf28      	it	cs
 80157d6:	463a      	movcs	r2, r7
 80157d8:	f7fe fd78 	bl	80142cc <memcpy>
 80157dc:	4631      	mov	r1, r6
 80157de:	4640      	mov	r0, r8
 80157e0:	f7ff f918 	bl	8014a14 <_free_r>
 80157e4:	e7e1      	b.n	80157aa <_realloc_r+0x1e>
 80157e6:	4635      	mov	r5, r6
 80157e8:	e7df      	b.n	80157aa <_realloc_r+0x1e>

080157ea <_raise_r>:
 80157ea:	291f      	cmp	r1, #31
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4604      	mov	r4, r0
 80157f0:	460d      	mov	r5, r1
 80157f2:	d904      	bls.n	80157fe <_raise_r+0x14>
 80157f4:	2316      	movs	r3, #22
 80157f6:	6003      	str	r3, [r0, #0]
 80157f8:	f04f 30ff 	mov.w	r0, #4294967295
 80157fc:	bd38      	pop	{r3, r4, r5, pc}
 80157fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015800:	b112      	cbz	r2, 8015808 <_raise_r+0x1e>
 8015802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015806:	b94b      	cbnz	r3, 801581c <_raise_r+0x32>
 8015808:	4620      	mov	r0, r4
 801580a:	f000 f831 	bl	8015870 <_getpid_r>
 801580e:	462a      	mov	r2, r5
 8015810:	4601      	mov	r1, r0
 8015812:	4620      	mov	r0, r4
 8015814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015818:	f000 b818 	b.w	801584c <_kill_r>
 801581c:	2b01      	cmp	r3, #1
 801581e:	d00a      	beq.n	8015836 <_raise_r+0x4c>
 8015820:	1c59      	adds	r1, r3, #1
 8015822:	d103      	bne.n	801582c <_raise_r+0x42>
 8015824:	2316      	movs	r3, #22
 8015826:	6003      	str	r3, [r0, #0]
 8015828:	2001      	movs	r0, #1
 801582a:	e7e7      	b.n	80157fc <_raise_r+0x12>
 801582c:	2400      	movs	r4, #0
 801582e:	4628      	mov	r0, r5
 8015830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015834:	4798      	blx	r3
 8015836:	2000      	movs	r0, #0
 8015838:	e7e0      	b.n	80157fc <_raise_r+0x12>
	...

0801583c <raise>:
 801583c:	4b02      	ldr	r3, [pc, #8]	; (8015848 <raise+0xc>)
 801583e:	4601      	mov	r1, r0
 8015840:	6818      	ldr	r0, [r3, #0]
 8015842:	f7ff bfd2 	b.w	80157ea <_raise_r>
 8015846:	bf00      	nop
 8015848:	20000810 	.word	0x20000810

0801584c <_kill_r>:
 801584c:	b538      	push	{r3, r4, r5, lr}
 801584e:	2300      	movs	r3, #0
 8015850:	4d06      	ldr	r5, [pc, #24]	; (801586c <_kill_r+0x20>)
 8015852:	4604      	mov	r4, r0
 8015854:	4608      	mov	r0, r1
 8015856:	4611      	mov	r1, r2
 8015858:	602b      	str	r3, [r5, #0]
 801585a:	f7ef ffee 	bl	800583a <_kill>
 801585e:	1c43      	adds	r3, r0, #1
 8015860:	d102      	bne.n	8015868 <_kill_r+0x1c>
 8015862:	682b      	ldr	r3, [r5, #0]
 8015864:	b103      	cbz	r3, 8015868 <_kill_r+0x1c>
 8015866:	6023      	str	r3, [r4, #0]
 8015868:	bd38      	pop	{r3, r4, r5, pc}
 801586a:	bf00      	nop
 801586c:	20003a88 	.word	0x20003a88

08015870 <_getpid_r>:
 8015870:	f7ef bfdc 	b.w	800582c <_getpid>

08015874 <__sread>:
 8015874:	b510      	push	{r4, lr}
 8015876:	460c      	mov	r4, r1
 8015878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801587c:	f000 f8a8 	bl	80159d0 <_read_r>
 8015880:	2800      	cmp	r0, #0
 8015882:	bfab      	itete	ge
 8015884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015886:	89a3      	ldrhlt	r3, [r4, #12]
 8015888:	181b      	addge	r3, r3, r0
 801588a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801588e:	bfac      	ite	ge
 8015890:	6563      	strge	r3, [r4, #84]	; 0x54
 8015892:	81a3      	strhlt	r3, [r4, #12]
 8015894:	bd10      	pop	{r4, pc}

08015896 <__swrite>:
 8015896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801589a:	461f      	mov	r7, r3
 801589c:	898b      	ldrh	r3, [r1, #12]
 801589e:	4605      	mov	r5, r0
 80158a0:	05db      	lsls	r3, r3, #23
 80158a2:	460c      	mov	r4, r1
 80158a4:	4616      	mov	r6, r2
 80158a6:	d505      	bpl.n	80158b4 <__swrite+0x1e>
 80158a8:	2302      	movs	r3, #2
 80158aa:	2200      	movs	r2, #0
 80158ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158b0:	f000 f874 	bl	801599c <_lseek_r>
 80158b4:	89a3      	ldrh	r3, [r4, #12]
 80158b6:	4632      	mov	r2, r6
 80158b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80158bc:	81a3      	strh	r3, [r4, #12]
 80158be:	4628      	mov	r0, r5
 80158c0:	463b      	mov	r3, r7
 80158c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158ca:	f000 b823 	b.w	8015914 <_write_r>

080158ce <__sseek>:
 80158ce:	b510      	push	{r4, lr}
 80158d0:	460c      	mov	r4, r1
 80158d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158d6:	f000 f861 	bl	801599c <_lseek_r>
 80158da:	1c43      	adds	r3, r0, #1
 80158dc:	89a3      	ldrh	r3, [r4, #12]
 80158de:	bf15      	itete	ne
 80158e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80158e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80158e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80158ea:	81a3      	strheq	r3, [r4, #12]
 80158ec:	bf18      	it	ne
 80158ee:	81a3      	strhne	r3, [r4, #12]
 80158f0:	bd10      	pop	{r4, pc}

080158f2 <__sclose>:
 80158f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158f6:	f000 b81f 	b.w	8015938 <_close_r>

080158fa <__ascii_wctomb>:
 80158fa:	4603      	mov	r3, r0
 80158fc:	4608      	mov	r0, r1
 80158fe:	b141      	cbz	r1, 8015912 <__ascii_wctomb+0x18>
 8015900:	2aff      	cmp	r2, #255	; 0xff
 8015902:	d904      	bls.n	801590e <__ascii_wctomb+0x14>
 8015904:	228a      	movs	r2, #138	; 0x8a
 8015906:	f04f 30ff 	mov.w	r0, #4294967295
 801590a:	601a      	str	r2, [r3, #0]
 801590c:	4770      	bx	lr
 801590e:	2001      	movs	r0, #1
 8015910:	700a      	strb	r2, [r1, #0]
 8015912:	4770      	bx	lr

08015914 <_write_r>:
 8015914:	b538      	push	{r3, r4, r5, lr}
 8015916:	4604      	mov	r4, r0
 8015918:	4608      	mov	r0, r1
 801591a:	4611      	mov	r1, r2
 801591c:	2200      	movs	r2, #0
 801591e:	4d05      	ldr	r5, [pc, #20]	; (8015934 <_write_r+0x20>)
 8015920:	602a      	str	r2, [r5, #0]
 8015922:	461a      	mov	r2, r3
 8015924:	f7ef ffc0 	bl	80058a8 <_write>
 8015928:	1c43      	adds	r3, r0, #1
 801592a:	d102      	bne.n	8015932 <_write_r+0x1e>
 801592c:	682b      	ldr	r3, [r5, #0]
 801592e:	b103      	cbz	r3, 8015932 <_write_r+0x1e>
 8015930:	6023      	str	r3, [r4, #0]
 8015932:	bd38      	pop	{r3, r4, r5, pc}
 8015934:	20003a88 	.word	0x20003a88

08015938 <_close_r>:
 8015938:	b538      	push	{r3, r4, r5, lr}
 801593a:	2300      	movs	r3, #0
 801593c:	4d05      	ldr	r5, [pc, #20]	; (8015954 <_close_r+0x1c>)
 801593e:	4604      	mov	r4, r0
 8015940:	4608      	mov	r0, r1
 8015942:	602b      	str	r3, [r5, #0]
 8015944:	f7ef ffcc 	bl	80058e0 <_close>
 8015948:	1c43      	adds	r3, r0, #1
 801594a:	d102      	bne.n	8015952 <_close_r+0x1a>
 801594c:	682b      	ldr	r3, [r5, #0]
 801594e:	b103      	cbz	r3, 8015952 <_close_r+0x1a>
 8015950:	6023      	str	r3, [r4, #0]
 8015952:	bd38      	pop	{r3, r4, r5, pc}
 8015954:	20003a88 	.word	0x20003a88

08015958 <_fstat_r>:
 8015958:	b538      	push	{r3, r4, r5, lr}
 801595a:	2300      	movs	r3, #0
 801595c:	4d06      	ldr	r5, [pc, #24]	; (8015978 <_fstat_r+0x20>)
 801595e:	4604      	mov	r4, r0
 8015960:	4608      	mov	r0, r1
 8015962:	4611      	mov	r1, r2
 8015964:	602b      	str	r3, [r5, #0]
 8015966:	f7ef ffc6 	bl	80058f6 <_fstat>
 801596a:	1c43      	adds	r3, r0, #1
 801596c:	d102      	bne.n	8015974 <_fstat_r+0x1c>
 801596e:	682b      	ldr	r3, [r5, #0]
 8015970:	b103      	cbz	r3, 8015974 <_fstat_r+0x1c>
 8015972:	6023      	str	r3, [r4, #0]
 8015974:	bd38      	pop	{r3, r4, r5, pc}
 8015976:	bf00      	nop
 8015978:	20003a88 	.word	0x20003a88

0801597c <_isatty_r>:
 801597c:	b538      	push	{r3, r4, r5, lr}
 801597e:	2300      	movs	r3, #0
 8015980:	4d05      	ldr	r5, [pc, #20]	; (8015998 <_isatty_r+0x1c>)
 8015982:	4604      	mov	r4, r0
 8015984:	4608      	mov	r0, r1
 8015986:	602b      	str	r3, [r5, #0]
 8015988:	f7ef ffc4 	bl	8005914 <_isatty>
 801598c:	1c43      	adds	r3, r0, #1
 801598e:	d102      	bne.n	8015996 <_isatty_r+0x1a>
 8015990:	682b      	ldr	r3, [r5, #0]
 8015992:	b103      	cbz	r3, 8015996 <_isatty_r+0x1a>
 8015994:	6023      	str	r3, [r4, #0]
 8015996:	bd38      	pop	{r3, r4, r5, pc}
 8015998:	20003a88 	.word	0x20003a88

0801599c <_lseek_r>:
 801599c:	b538      	push	{r3, r4, r5, lr}
 801599e:	4604      	mov	r4, r0
 80159a0:	4608      	mov	r0, r1
 80159a2:	4611      	mov	r1, r2
 80159a4:	2200      	movs	r2, #0
 80159a6:	4d05      	ldr	r5, [pc, #20]	; (80159bc <_lseek_r+0x20>)
 80159a8:	602a      	str	r2, [r5, #0]
 80159aa:	461a      	mov	r2, r3
 80159ac:	f7ef ffbc 	bl	8005928 <_lseek>
 80159b0:	1c43      	adds	r3, r0, #1
 80159b2:	d102      	bne.n	80159ba <_lseek_r+0x1e>
 80159b4:	682b      	ldr	r3, [r5, #0]
 80159b6:	b103      	cbz	r3, 80159ba <_lseek_r+0x1e>
 80159b8:	6023      	str	r3, [r4, #0]
 80159ba:	bd38      	pop	{r3, r4, r5, pc}
 80159bc:	20003a88 	.word	0x20003a88

080159c0 <_malloc_usable_size_r>:
 80159c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159c4:	1f18      	subs	r0, r3, #4
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	bfbc      	itt	lt
 80159ca:	580b      	ldrlt	r3, [r1, r0]
 80159cc:	18c0      	addlt	r0, r0, r3
 80159ce:	4770      	bx	lr

080159d0 <_read_r>:
 80159d0:	b538      	push	{r3, r4, r5, lr}
 80159d2:	4604      	mov	r4, r0
 80159d4:	4608      	mov	r0, r1
 80159d6:	4611      	mov	r1, r2
 80159d8:	2200      	movs	r2, #0
 80159da:	4d05      	ldr	r5, [pc, #20]	; (80159f0 <_read_r+0x20>)
 80159dc:	602a      	str	r2, [r5, #0]
 80159de:	461a      	mov	r2, r3
 80159e0:	f7ef ff45 	bl	800586e <_read>
 80159e4:	1c43      	adds	r3, r0, #1
 80159e6:	d102      	bne.n	80159ee <_read_r+0x1e>
 80159e8:	682b      	ldr	r3, [r5, #0]
 80159ea:	b103      	cbz	r3, 80159ee <_read_r+0x1e>
 80159ec:	6023      	str	r3, [r4, #0]
 80159ee:	bd38      	pop	{r3, r4, r5, pc}
 80159f0:	20003a88 	.word	0x20003a88

080159f4 <_init>:
 80159f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f6:	bf00      	nop
 80159f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159fa:	bc08      	pop	{r3}
 80159fc:	469e      	mov	lr, r3
 80159fe:	4770      	bx	lr

08015a00 <_fini>:
 8015a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a02:	bf00      	nop
 8015a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a06:	bc08      	pop	{r3}
 8015a08:	469e      	mov	lr, r3
 8015a0a:	4770      	bx	lr
